// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIGcHJvdG8zIlYKCWtleV92YWx1ZRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKAkSHQoEaWtleRgDIAEoDjIPLnByb3RvMy5w",
            "Yl9lbnVtEg4KBml2YWx1ZRgEIAEoDSKeAQoGdXNlcl90EgsKA3VpZBgBIAEo",
            "CRIMCgRmbGFnGAIgASgNEiEKCGRldl90eXBlGAMgASgOMg8ucHJvdG8zLnBi",
            "X2VudW0SDwoHYWNjb3VudBgEIAEoCRIMCgRuYW1lGAUgASgJEgwKBHBzd2QY",
            "BiABKAkSDgoGZ2VuZGVyGAcgASgNEgsKA2FnZRgIIAEoDRIMCgR1ZGlkGAkg",
            "ASgJIp0BCghwbGF5ZXJfdBILCgN1aWQYASABKAkSCwoDcGlkGAIgASgNEg0K",
            "BWxldmVsGAMgASgNEgoKAnhwGAQgASgNEhAKCGN1cnJlbmN5GAUgASgNEg4K",
            "BmVuZXJneRgGIAEoDRIbCgR3aW5zGAcgAygLMg0ucHJvdG8zLndpbl90Eh0K",
            "BWFjaHZzGAggAygLMg4ucHJvdG8zLmFjaHZfdCJZCgV3aW5fdBILCgN1aWQY",
            "ASABKAkSCwoDZ2lkGAIgASgNEgsKA3dpbhgDIAEoDRIMCgRsb3NlGAQgASgN",
            "EgwKBGRyYXcYBSABKA0SDQoFc2NvcmUYBiABKA0iRAoGYWNodl90Eh0KBHR5",
            "cGUYASABKA4yDy5wcm90bzMucGJfZW51bRIMCgRuYW1lGAIgASgJEg0KBXZh",
            "bHVlGAMgASgNIsYBCgZnYW1lX3QSCgoCaWQYASABKA0SDwoHdmVyc2lvbhgC",
            "IAEoDRIKCgJpcBgDIAEoCRIMCgRwb3J0GAQgASgNEhAKCG9jY3VwaWVkGAUg",
            "ASgNEhAKCGNhcGFjaXR5GAYgASgNEgwKBGRlc2MYByABKAkSDgoGc3RhdHVz",
            "GAggASgNEhUKDW9wZW5uaW5nX3RpbWUYCSABKA0SFgoObWFpbnRhaW5fc3Rh",
            "cnQYCiABKA0SFAoMbWFpbnRhaW5fZW5kGAsgASgNIugBCgdsb2JieV90Eg8K",
            "B3ZlcnNpb24YASABKA0SCgoCaXAYAiABKAkSDAoEcG9ydBgDIAEoDRIQCghv",
            "Y2N1cGllZBgEIAEoDRIQCghjYXBhY2l0eRgFIAEoDRIMCgRkZXNjGAYgASgJ",
            "EhAKCGJ1bGxldGluGAcgASgJEg4KBnN0YXR1cxgIIAEoDRIWCg5tYWludGFp",
            "bl9zdGFydBgJIAEoDRIUCgxtYWludGFpbl9lbmQYCiABKA0SEQoJdGltZV96",
            "b25lGAsgASgNEh0KBWdhbWVzGAwgAygLMg4ucHJvdG8zLmdhbWVfdCIyCgZw",
            "YXduX3QSCgoCaWQYASABKA0SDQoFY29sb3IYAiABKA0SDQoFdmFsdWUYAyAB",
            "KA0iRAoHYnVuY2hfdBIdCgR0eXBlGAEgASgOMg8ucHJvdG8zLnBiX2VudW0S",
            "CwoDcG9zGAIgASgNEg0KBXBhd25zGAMgAygNIk4KC2dhbWVfZGF0YV90Eg0K",
            "BWhhbmRzGAEgAygNEhAKCGRpc2NhcmRzGAIgAygNEh4KBWJ1bmNoGAMgAygL",
            "Mg8ucHJvdG8zLmJ1bmNoX3QiJgoHTXNnQmFzZRIbCgNtaWQYASABKA4yDi5w",
            "cm90bzMucGJfbXNnIlgKCk1zZ0NTTG9naW4SGwoDbWlkGAEgASgOMg4ucHJv",
            "dG8zLnBiX21zZxIPCgd2ZXJzaW9uGAMgASgNEhwKBHVzZXIYAiABKAsyDi5w",
            "cm90bzMudXNlcl90IpMBCgpNc2dTQ0xvZ2luEhsKA21pZBgBIAEoDjIOLnBy",
            "b3RvMy5wYl9tc2cSCwoDdWlkGAIgASgJEg8KB3ZlcnNpb24YAyABKA0SDwoH",
            "c2Vzc2lvbhgEIAEoBBIKCgJpcBgFIAEoCRIMCgRwb3J0GAYgASgNEh8KBnJl",
            "c3VsdBgHIAEoDjIPLnByb3RvMy5wYl9lbnVtIlgKCk1zZ0NMRW50ZXISGwoD",
            "bWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxILCgN1aWQYAiABKAkSDwoHdmVy",
            "c2lvbhgDIAEoDRIPCgdzZXNzaW9uGAQgASgEIpkBCgpNc2dMQ0VudGVyEhsK",
            "A21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cSCwoDa2V5GAIgASgNEiAKBnBs",
            "YXllchgDIAEoCzIQLnByb3RvMy5wbGF5ZXJfdBIeCgVsb2JieRgEIAEoCzIP",
            "LnByb3RvMy5sb2JieV90Eh8KBnJlc3VsdBgFIAEoDjIPLnByb3RvMy5wYl9l",
            "bnVtIlgKCk1zZ0NORW50ZXISGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21z",
            "ZxILCgN1aWQYAiABKAkSDwoHdmVyc2lvbhgDIAEoDRIPCgdzZXNzaW9uGAQg",
            "ASgEImwKCk1zZ05DRW50ZXISGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21z",
            "ZxIgCgZwbGF5ZXIYAiABKAsyEC5wcm90bzMucGxheWVyX3QSHwoGcmVzdWx0",
            "GAMgASgOMg8ucHJvdG8zLnBiX2VudW0ibAoLTXNnQ05DcmVhdGUSGwoDbWlk",
            "GAEgASgOMg4ucHJvdG8zLnBiX21zZxIdCgRnYW1lGAIgASgOMg8ucHJvdG8z",
            "LnBiX2VudW0SIQoGb3B0aW9uGAMgAygLMhEucHJvdG8zLmtleV92YWx1ZSJc",
            "CgtNc2dOQ0NyZWF0ZRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEg8K",
            "B2dhbWVfaWQYAiABKA0SHwoGcmVzdWx0GAMgASgOMg8ucHJvdG8zLnBiX2Vu",
            "dW0iOQoJTXNnQ05Kb2luEhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cS",
            "DwoHZ2FtZV9pZBgCIAEoDSJJCglNc2dOQ0pvaW4SGwoDbWlkGAEgASgOMg4u",
            "cHJvdG8zLnBiX21zZxIfCgZyZXN1bHQYAiABKA4yDy5wcm90bzMucGJfZW51",
            "bSLUAQoKTXNnTkNTdGFydBIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNn",
            "Eg4KBmJhbmtlchgCIAEoDRILCgNwb3MYAyABKA0SDAoEYW50ZRgEIAEoDRIQ",
            "CghtdWx0aXBsZRgFIAEoDRIdCgVjYXJkcxgGIAMoCzIOLnByb3RvMy5wYXdu",
            "X3QSDQoFaGFuZHMYByADKA0SDgoGYm90dG9tGAggAygNEg0KBWNvdW50GAkg",
            "AygNEh8KBnJlc3VsdBgKIAEoDjIPLnByb3RvMy5wYl9lbnVtIksKDE1zZ0NO",
            "RGlzY2FyZBIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEh4KBWJ1bmNo",
            "GAIgASgLMg8ucHJvdG8zLmJ1bmNoX3QibAoMTXNnTkNEaXNjYXJkEhsKA21p",
            "ZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cSHgoFYnVuY2gYAiABKAsyDy5wcm90",
            "bzMuYnVuY2hfdBIfCgZyZXN1bHQYAyABKA4yDy5wcm90bzMucGJfZW51bSIo",
            "CglNc2dDTk1lbGQSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZyJJCglN",
            "c2dOQ01lbGQSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxIfCgZyZXN1",
            "bHQYAiABKA4yDy5wcm90bzMucGJfZW51bSIvChBNc2dDTkRpc21pc3NTeW5j",
            "EhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2ciXQoQTXNnTkNEaXNtaXNz",
            "U3luYxIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEgsKA3BvcxgCIAEo",
            "DRIfCgZyZXN1bHQYAyABKA4yDy5wcm90bzMucGJfZW51bSIuCg9Nc2dDTkRp",
            "c21pc3NBY2sSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZyJcCg9Nc2dO",
            "Q0Rpc21pc3NBY2sSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxILCgNw",
            "b3MYAiABKA0SHwoGcmVzdWx0GAMgASgOMg8ucHJvdG8zLnBiX2VudW0imwEK",
            "C01zZ05DU2V0dGxlEhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cSDgoG",
            "d2lubmVyGAIgASgNEh4KBHBsYXkYAyADKAsyEC5wcm90bzMucGxheWVyX3QS",
            "HgoFaGFuZHMYBCADKAsyDy5wcm90bzMuYnVuY2hfdBIfCgZyZXN1bHQYBSAB",
            "KA4yDy5wcm90bzMucGJfZW51bSJrCgtNc2dOQ0ZpbmlzaBIbCgNtaWQYASAB",
            "KA4yDi5wcm90bzMucGJfbXNnEh4KBHBsYXkYAiADKAsyEC5wcm90bzMucGxh",
            "eWVyX3QSHwoGcmVzdWx0GAMgASgOMg8ucHJvdG8zLnBiX2VudW0iRQoKTXNn",
            "Q05TdGF0cxIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEgsKA2tleRgC",
            "IAEoCRINCgV2YWx1ZRgDIAEoCSqdBQoHcGJfZW51bRILCgdVTktOT1dOEAAS",
            "CAoETk9ORRAAEgwKCFNVQ0NFRVNTEAASCgoGREVWX1BDEAASCwoHREVWX1BT",
            "NBABEgwKCERFVl9YQk9YEAISCwoHREVWX0lPUxADEg8KC0RFVl9BTkRST0lE",
            "EAQSEAoMREVWX1dJTlBIT05FEAUSDAoIR0FNRV9ERFoQFBIMCghHQU1FX1BE",
            "SxAVEgwKCEdBTUVfUEhaEBYSEAoMT1BUSU9OX1JPVU5EEAoSDwoLT1BUSU9O",
            "X0FOVEkQCxITCg9PUFRJT05fQ0FURUdPUlkQDBIQCgxPUFRJT05fUk9CT1QQ",
            "DRIRCg1DQVRFR09SWV9FQVNZEAoSEwoPQ0FURUdPUllfTk9STUFMEAsSEQoN",
            "Q0FURUdPUllfSEFSRBAMEgsKB09QX1BBU1MQABIOCgpPUF9ESVNDQVJEEAES",
            "EQoNQlVOQ0hfSU5WQUxJRBAKEgsKB0JVTkNIX0EQCxIMCghCVU5DSF9BQRAM",
            "Eg0KCUJVTkNIX0FBQRANEg4KCkJVTkNIX0FBQUEQDhIPCgtCVU5DSF9BQUFB",
            "QhAPEg4KCkJVTkNIX0FBQUIQEBINCglCVU5DSF9BQkMQERINCglBQ0hWX0JP",
            "TUIQChIPCgtBQ0hWX0hFQVZFThALEg0KCUFDSFZfSEVMTBAMEhIKDURFRl9N",
            "QVhfTk9ERVMQ6AcSHAoWREVGX01BWF9HQU1FU19QRVJfTk9ERRCgjQYSDgoK",
            "RVJSX0ZBSUxFRBBkEhEKDUVSUl9DQU5DRUxMRUQQZRIQCgxFUlJfUFJPVE9D",
            "T0wQZhINCglFUlJfUEFSQU0QZxISCg5FUlJfRFVQTElDQVRFRBBoEhAKC0VS",
            "Ul9VTktOT1dOEOcHGgIQASqDBQoGcGJfbXNnEg8KC01TR19JTlZBTElEEAAS",
            "DgoJTVNHX0JFR0lOEOgHEgwKB01TR19SQVcQ6QcSEQoMTVNHX0NTX0JFR0lO",
            "ENAPEhEKDE1TR19DU19MT0dJThDRDxIRCgxNU0dfU0NfTE9HSU4Q0g8SDwoK",
            "TVNHX0NTX0VORBCfHxIRCgxNU0dfQ0xfQkVHSU4QoB8SEQoMTVNHX0NMX0VO",
            "VEVSEKEfEhEKDE1TR19MQ19FTlRFUhCiHxIQCgtNU0dfTENfRVhJVBCjHxIP",
            "CgpNU0dfQ0xfRU5EEO8uEhEKDE1TR19DTl9CRUdJThDwLhIRCgxNU0dfQ05f",
            "RU5URVIQ8S4SEQoMTVNHX05DX0VOVEVSEPIuEhIKDU1TR19DTl9DUkVBVEUQ",
            "+i4SEgoNTVNHX05DX0NSRUFURRD7LhIQCgtNU0dfQ05fSk9JThD8LhIQCgtN",
            "U0dfTkNfSk9JThD9LhIRCgxNU0dfTkNfU1RBUlQQhC8SEwoOTVNHX0NOX0RJ",
            "U0NBUkQQhS8SEwoOTVNHX05DX0RJU0NBUkQQhi8SEAoLTVNHX0NOX01FTEQQ",
            "hy8SEAoLTVNHX05DX01FTEQQiC8SEgoNTVNHX05DX1NFVFRMRRCJLxISCg1N",
            "U0dfTkNfRklOSVNIEIovEhgKE01TR19DTl9ESVNNSVNTX1NZTkMQji8SGAoT",
            "TVNHX05DX0RJU01JU1NfU1lOQxCPLxIXChJNU0dfQ05fRElTTUlTU19BQ0sQ",
            "kC8SFwoSTVNHX05DX0RJU01JU1NfQUNLEJEvEhEKDE1TR19DTl9TVEFUUxDA",
            "LxIPCgpNU0dfQ05fRU5EENc2EgwKB01TR19FTkQQj05CAkgDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto3.pb_enum), typeof(global::Proto3.pb_msg), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.key_value), global::Proto3.key_value.Parser, new[]{ "Key", "Value", "Ikey", "Ivalue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.user_t), global::Proto3.user_t.Parser, new[]{ "Uid", "Flag", "DevType", "Account", "Name", "Pswd", "Gender", "Age", "Udid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.player_t), global::Proto3.player_t.Parser, new[]{ "Uid", "Pid", "Level", "Xp", "Currency", "Energy", "Wins", "Achvs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.win_t), global::Proto3.win_t.Parser, new[]{ "Uid", "Gid", "Win", "Lose", "Draw", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.achv_t), global::Proto3.achv_t.Parser, new[]{ "Type", "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.game_t), global::Proto3.game_t.Parser, new[]{ "Id", "Version", "Ip", "Port", "Occupied", "Capacity", "Desc", "Status", "OpenningTime", "MaintainStart", "MaintainEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.lobby_t), global::Proto3.lobby_t.Parser, new[]{ "Version", "Ip", "Port", "Occupied", "Capacity", "Desc", "Bulletin", "Status", "MaintainStart", "MaintainEnd", "TimeZone", "Games" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.pawn_t), global::Proto3.pawn_t.Parser, new[]{ "Id", "Color", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.bunch_t), global::Proto3.bunch_t.Parser, new[]{ "Type", "Pos", "Pawns" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.game_data_t), global::Proto3.game_data_t.Parser, new[]{ "Hands", "Discards", "Bunch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgBase), global::Proto3.MsgBase.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCSLogin), global::Proto3.MsgCSLogin.Parser, new[]{ "Mid", "Version", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgSCLogin), global::Proto3.MsgSCLogin.Parser, new[]{ "Mid", "Uid", "Version", "Session", "Ip", "Port", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCLEnter), global::Proto3.MsgCLEnter.Parser, new[]{ "Mid", "Uid", "Version", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgLCEnter), global::Proto3.MsgLCEnter.Parser, new[]{ "Mid", "Key", "Player", "Lobby", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNEnter), global::Proto3.MsgCNEnter.Parser, new[]{ "Mid", "Uid", "Version", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCEnter), global::Proto3.MsgNCEnter.Parser, new[]{ "Mid", "Player", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNCreate), global::Proto3.MsgCNCreate.Parser, new[]{ "Mid", "Game", "Option" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCCreate), global::Proto3.MsgNCCreate.Parser, new[]{ "Mid", "GameId", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNJoin), global::Proto3.MsgCNJoin.Parser, new[]{ "Mid", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCJoin), global::Proto3.MsgNCJoin.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCStart), global::Proto3.MsgNCStart.Parser, new[]{ "Mid", "Banker", "Pos", "Ante", "Multiple", "Cards", "Hands", "Bottom", "Count", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDiscard), global::Proto3.MsgCNDiscard.Parser, new[]{ "Mid", "Bunch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDiscard), global::Proto3.MsgNCDiscard.Parser, new[]{ "Mid", "Bunch", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNMeld), global::Proto3.MsgCNMeld.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCMeld), global::Proto3.MsgNCMeld.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDismissSync), global::Proto3.MsgCNDismissSync.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDismissSync), global::Proto3.MsgNCDismissSync.Parser, new[]{ "Mid", "Pos", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDismissAck), global::Proto3.MsgCNDismissAck.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDismissAck), global::Proto3.MsgNCDismissAck.Parser, new[]{ "Mid", "Pos", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCSettle), global::Proto3.MsgNCSettle.Parser, new[]{ "Mid", "Winner", "Play", "Hands", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCFinish), global::Proto3.MsgNCFinish.Parser, new[]{ "Mid", "Play", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNStats), global::Proto3.MsgCNStats.Parser, new[]{ "Mid", "Key", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  -------- data structures --------
  /// </summary>
  public enum pb_enum {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("SUCCEESS")] Succeess = 0,
    /// <summary>
    ///  device type
    /// </summary>
    [pbr::OriginalName("DEV_PC")] DevPc = 0,
    [pbr::OriginalName("DEV_PS4")] DevPs4 = 1,
    [pbr::OriginalName("DEV_XBOX")] DevXbox = 2,
    [pbr::OriginalName("DEV_IOS")] DevIos = 3,
    [pbr::OriginalName("DEV_ANDROID")] DevAndroid = 4,
    [pbr::OriginalName("DEV_WINPHONE")] DevWinphone = 5,
    /// <summary>
    ///  game rule
    /// </summary>
    [pbr::OriginalName("GAME_DDZ")] GameDdz = 20,
    [pbr::OriginalName("GAME_PDK")] GamePdk = 21,
    [pbr::OriginalName("GAME_PHZ")] GamePhz = 22,
    /// <summary>
    ///  game options
    /// </summary>
    [pbr::OriginalName("OPTION_ROUND")] OptionRound = 10,
    [pbr::OriginalName("OPTION_ANTI")] OptionAnti = 11,
    [pbr::OriginalName("OPTION_CATEGORY")] OptionCategory = 12,
    [pbr::OriginalName("OPTION_ROBOT")] OptionRobot = 13,
    /// <summary>
    ///  game category
    /// </summary>
    [pbr::OriginalName("CATEGORY_EASY")] CategoryEasy = 10,
    [pbr::OriginalName("CATEGORY_NORMAL")] CategoryNormal = 11,
    [pbr::OriginalName("CATEGORY_HARD")] CategoryHard = 12,
    /// <summary>
    ///  game operation
    /// </summary>
    [pbr::OriginalName("OP_PASS")] OpPass = 0,
    [pbr::OriginalName("OP_DISCARD")] OpDiscard = 1,
    /// <summary>
    ///  bunch type
    /// </summary>
    [pbr::OriginalName("BUNCH_INVALID")] BunchInvalid = 10,
    [pbr::OriginalName("BUNCH_A")] BunchA = 11,
    [pbr::OriginalName("BUNCH_AA")] BunchAa = 12,
    [pbr::OriginalName("BUNCH_AAA")] BunchAaa = 13,
    [pbr::OriginalName("BUNCH_AAAA")] BunchAaaa = 14,
    [pbr::OriginalName("BUNCH_AAAAB")] BunchAaaab = 15,
    [pbr::OriginalName("BUNCH_AAAB")] BunchAaab = 16,
    [pbr::OriginalName("BUNCH_ABC")] BunchAbc = 17,
    /// <summary>
    ///  achievement
    /// </summary>
    [pbr::OriginalName("ACHV_BOMB")] AchvBomb = 10,
    [pbr::OriginalName("ACHV_HEAVEN")] AchvHeaven = 11,
    [pbr::OriginalName("ACHV_HELL")] AchvHell = 12,
    /// <summary>
    ///  game using
    /// </summary>
    [pbr::OriginalName("DEF_MAX_NODES")] DefMaxNodes = 1000,
    [pbr::OriginalName("DEF_MAX_GAMES_PER_NODE")] DefMaxGamesPerNode = 100000,
    /// <summary>
    ///  error
    /// </summary>
    [pbr::OriginalName("ERR_FAILED")] ErrFailed = 100,
    [pbr::OriginalName("ERR_CANCELLED")] ErrCancelled = 101,
    [pbr::OriginalName("ERR_PROTOCOL")] ErrProtocol = 102,
    [pbr::OriginalName("ERR_PARAM")] ErrParam = 103,
    [pbr::OriginalName("ERR_DUPLICATED")] ErrDuplicated = 104,
    [pbr::OriginalName("ERR_UNKNOWN")] ErrUnknown = 999,
  }

  /// <summary>
  ///  -------- messages --------
  /// </summary>
  public enum pb_msg {
    [pbr::OriginalName("MSG_INVALID")] MsgInvalid = 0,
    [pbr::OriginalName("MSG_BEGIN")] MsgBegin = 1000,
    [pbr::OriginalName("MSG_RAW")] MsgRaw = 1001,
    /// <summary>
    /// Client --  Login
    /// </summary>
    [pbr::OriginalName("MSG_CS_BEGIN")] MsgCsBegin = 2000,
    [pbr::OriginalName("MSG_CS_LOGIN")] MsgCsLogin = 2001,
    [pbr::OriginalName("MSG_SC_LOGIN")] MsgScLogin = 2002,
    [pbr::OriginalName("MSG_CS_END")] MsgCsEnd = 3999,
    /// <summary>
    /// Client --  Lobby
    /// </summary>
    [pbr::OriginalName("MSG_CL_BEGIN")] MsgClBegin = 4000,
    [pbr::OriginalName("MSG_CL_ENTER")] MsgClEnter = 4001,
    [pbr::OriginalName("MSG_LC_ENTER")] MsgLcEnter = 4002,
    [pbr::OriginalName("MSG_LC_EXIT")] MsgLcExit = 4003,
    [pbr::OriginalName("MSG_CL_END")] MsgClEnd = 5999,
    /// <summary>
    /// Client --  Node
    /// </summary>
    [pbr::OriginalName("MSG_CN_BEGIN")] MsgCnBegin = 6000,
    [pbr::OriginalName("MSG_CN_ENTER")] MsgCnEnter = 6001,
    [pbr::OriginalName("MSG_NC_ENTER")] MsgNcEnter = 6002,
    [pbr::OriginalName("MSG_CN_CREATE")] MsgCnCreate = 6010,
    [pbr::OriginalName("MSG_NC_CREATE")] MsgNcCreate = 6011,
    [pbr::OriginalName("MSG_CN_JOIN")] MsgCnJoin = 6012,
    [pbr::OriginalName("MSG_NC_JOIN")] MsgNcJoin = 6013,
    [pbr::OriginalName("MSG_NC_START")] MsgNcStart = 6020,
    [pbr::OriginalName("MSG_CN_DISCARD")] MsgCnDiscard = 6021,
    [pbr::OriginalName("MSG_NC_DISCARD")] MsgNcDiscard = 6022,
    [pbr::OriginalName("MSG_CN_MELD")] MsgCnMeld = 6023,
    [pbr::OriginalName("MSG_NC_MELD")] MsgNcMeld = 6024,
    [pbr::OriginalName("MSG_NC_SETTLE")] MsgNcSettle = 6025,
    [pbr::OriginalName("MSG_NC_FINISH")] MsgNcFinish = 6026,
    [pbr::OriginalName("MSG_CN_DISMISS_SYNC")] MsgCnDismissSync = 6030,
    [pbr::OriginalName("MSG_NC_DISMISS_SYNC")] MsgNcDismissSync = 6031,
    [pbr::OriginalName("MSG_CN_DISMISS_ACK")] MsgCnDismissAck = 6032,
    [pbr::OriginalName("MSG_NC_DISMISS_ACK")] MsgNcDismissAck = 6033,
    [pbr::OriginalName("MSG_CN_STATS")] MsgCnStats = 6080,
    [pbr::OriginalName("MSG_CN_END")] MsgCnEnd = 6999,
    [pbr::OriginalName("MSG_END")] MsgEnd = 9999,
  }

  #endregion

  #region Messages
  public sealed partial class key_value : pb::IMessage<key_value> {
    private static readonly pb::MessageParser<key_value> _parser = new pb::MessageParser<key_value>(() => new key_value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<key_value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public key_value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public key_value(key_value other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      ikey_ = other.ikey_;
      ivalue_ = other.ivalue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public key_value Clone() {
      return new key_value(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ikey" field.</summary>
    public const int IkeyFieldNumber = 3;
    private global::Proto3.pb_enum ikey_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Ikey {
      get { return ikey_; }
      set {
        ikey_ = value;
      }
    }

    /// <summary>Field number for the "ivalue" field.</summary>
    public const int IvalueFieldNumber = 4;
    private uint ivalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ivalue {
      get { return ivalue_; }
      set {
        ivalue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as key_value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(key_value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Ikey != other.Ikey) return false;
      if (Ivalue != other.Ivalue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Ikey != 0) hash ^= Ikey.GetHashCode();
      if (Ivalue != 0) hash ^= Ivalue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Ikey != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Ikey);
      }
      if (Ivalue != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Ivalue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Ikey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ikey);
      }
      if (Ivalue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ivalue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(key_value other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Ikey != 0) {
        Ikey = other.Ikey;
      }
      if (other.Ivalue != 0) {
        Ivalue = other.Ivalue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            ikey_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 32: {
            Ivalue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class user_t : pb::IMessage<user_t> {
    private static readonly pb::MessageParser<user_t> _parser = new pb::MessageParser<user_t>(() => new user_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t(user_t other) : this() {
      uid_ = other.uid_;
      flag_ = other.flag_;
      devType_ = other.devType_;
      account_ = other.account_;
      name_ = other.name_;
      pswd_ = other.pswd_;
      gender_ = other.gender_;
      age_ = other.age_;
      udid_ = other.udid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t Clone() {
      return new user_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private uint flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "dev_type" field.</summary>
    public const int DevTypeFieldNumber = 3;
    private global::Proto3.pb_enum devType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum DevType {
      get { return devType_; }
      set {
        devType_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 4;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pswd" field.</summary>
    public const int PswdFieldNumber = 6;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 7;
    private uint gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 8;
    private uint age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 9;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Flag != other.Flag) return false;
      if (DevType != other.DevType) return false;
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      if (Pswd != other.Pswd) return false;
      if (Gender != other.Gender) return false;
      if (Age != other.Age) return false;
      if (Udid != other.Udid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (DevType != 0) hash ^= DevType.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Flag != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flag);
      }
      if (DevType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DevType);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Pswd);
      }
      if (Gender != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Gender);
      }
      if (Age != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Age);
      }
      if (Udid.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Udid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      if (DevType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DevType);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gender);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Age);
      }
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.DevType != 0) {
        DevType = other.DevType;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Flag = input.ReadUInt32();
            break;
          }
          case 24: {
            devType_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 34: {
            Account = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Pswd = input.ReadString();
            break;
          }
          case 56: {
            Gender = input.ReadUInt32();
            break;
          }
          case 64: {
            Age = input.ReadUInt32();
            break;
          }
          case 74: {
            Udid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class player_t : pb::IMessage<player_t> {
    private static readonly pb::MessageParser<player_t> _parser = new pb::MessageParser<player_t>(() => new player_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<player_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t(player_t other) : this() {
      uid_ = other.uid_;
      pid_ = other.pid_;
      level_ = other.level_;
      xp_ = other.xp_;
      currency_ = other.currency_;
      energy_ = other.energy_;
      wins_ = other.wins_.Clone();
      achvs_ = other.achvs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t Clone() {
      return new player_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private uint pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "xp" field.</summary>
    public const int XpFieldNumber = 4;
    private uint xp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Xp {
      get { return xp_; }
      set {
        xp_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 5;
    private uint currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 6;
    private uint energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Proto3.win_t> _repeated_wins_codec
        = pb::FieldCodec.ForMessage(58, global::Proto3.win_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.win_t> wins_ = new pbc::RepeatedField<global::Proto3.win_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.win_t> Wins {
      get { return wins_; }
    }

    /// <summary>Field number for the "achvs" field.</summary>
    public const int AchvsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Proto3.achv_t> _repeated_achvs_codec
        = pb::FieldCodec.ForMessage(66, global::Proto3.achv_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.achv_t> achvs_ = new pbc::RepeatedField<global::Proto3.achv_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.achv_t> Achvs {
      get { return achvs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as player_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(player_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Pid != other.Pid) return false;
      if (Level != other.Level) return false;
      if (Xp != other.Xp) return false;
      if (Currency != other.Currency) return false;
      if (Energy != other.Energy) return false;
      if(!wins_.Equals(other.wins_)) return false;
      if(!achvs_.Equals(other.achvs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Xp != 0) hash ^= Xp.GetHashCode();
      if (Currency != 0) hash ^= Currency.GetHashCode();
      if (Energy != 0) hash ^= Energy.GetHashCode();
      hash ^= wins_.GetHashCode();
      hash ^= achvs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Xp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Xp);
      }
      if (Currency != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Currency);
      }
      if (Energy != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Energy);
      }
      wins_.WriteTo(output, _repeated_wins_codec);
      achvs_.WriteTo(output, _repeated_achvs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Xp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Xp);
      }
      if (Currency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currency);
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Energy);
      }
      size += wins_.CalculateSize(_repeated_wins_codec);
      size += achvs_.CalculateSize(_repeated_achvs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(player_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Xp != 0) {
        Xp = other.Xp;
      }
      if (other.Currency != 0) {
        Currency = other.Currency;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      wins_.Add(other.wins_);
      achvs_.Add(other.achvs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Pid = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Xp = input.ReadUInt32();
            break;
          }
          case 40: {
            Currency = input.ReadUInt32();
            break;
          }
          case 48: {
            Energy = input.ReadUInt32();
            break;
          }
          case 58: {
            wins_.AddEntriesFrom(input, _repeated_wins_codec);
            break;
          }
          case 66: {
            achvs_.AddEntriesFrom(input, _repeated_achvs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class win_t : pb::IMessage<win_t> {
    private static readonly pb::MessageParser<win_t> _parser = new pb::MessageParser<win_t>(() => new win_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<win_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public win_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public win_t(win_t other) : this() {
      uid_ = other.uid_;
      gid_ = other.gid_;
      win_ = other.win_;
      lose_ = other.lose_;
      draw_ = other.draw_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public win_t Clone() {
      return new win_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gid" field.</summary>
    public const int GidFieldNumber = 2;
    private uint gid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gid {
      get { return gid_; }
      set {
        gid_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 3;
    private uint win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "lose" field.</summary>
    public const int LoseFieldNumber = 4;
    private uint lose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lose {
      get { return lose_; }
      set {
        lose_ = value;
      }
    }

    /// <summary>Field number for the "draw" field.</summary>
    public const int DrawFieldNumber = 5;
    private uint draw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Draw {
      get { return draw_; }
      set {
        draw_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as win_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(win_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Gid != other.Gid) return false;
      if (Win != other.Win) return false;
      if (Lose != other.Lose) return false;
      if (Draw != other.Draw) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Gid != 0) hash ^= Gid.GetHashCode();
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Lose != 0) hash ^= Lose.GetHashCode();
      if (Draw != 0) hash ^= Draw.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Gid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Gid);
      }
      if (Win != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Win);
      }
      if (Lose != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lose);
      }
      if (Draw != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Draw);
      }
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Gid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gid);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Win);
      }
      if (Lose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lose);
      }
      if (Draw != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Draw);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(win_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Gid != 0) {
        Gid = other.Gid;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Lose != 0) {
        Lose = other.Lose;
      }
      if (other.Draw != 0) {
        Draw = other.Draw;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Gid = input.ReadUInt32();
            break;
          }
          case 24: {
            Win = input.ReadUInt32();
            break;
          }
          case 32: {
            Lose = input.ReadUInt32();
            break;
          }
          case 40: {
            Draw = input.ReadUInt32();
            break;
          }
          case 48: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class achv_t : pb::IMessage<achv_t> {
    private static readonly pb::MessageParser<achv_t> _parser = new pb::MessageParser<achv_t>(() => new achv_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<achv_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achv_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achv_t(achv_t other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achv_t Clone() {
      return new achv_t(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto3.pb_enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as achv_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(achv_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(achv_t other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class game_t : pb::IMessage<game_t> {
    private static readonly pb::MessageParser<game_t> _parser = new pb::MessageParser<game_t>(() => new game_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<game_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t(game_t other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      ip_ = other.ip_;
      port_ = other.port_;
      occupied_ = other.occupied_;
      capacity_ = other.capacity_;
      desc_ = other.desc_;
      status_ = other.status_;
      openningTime_ = other.openningTime_;
      maintainStart_ = other.maintainStart_;
      maintainEnd_ = other.maintainEnd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t Clone() {
      return new game_t(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "occupied" field.</summary>
    public const int OccupiedFieldNumber = 5;
    private uint occupied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occupied {
      get { return occupied_; }
      set {
        occupied_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 7;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "openning_time" field.</summary>
    public const int OpenningTimeFieldNumber = 9;
    private uint openningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenningTime {
      get { return openningTime_; }
      set {
        openningTime_ = value;
      }
    }

    /// <summary>Field number for the "maintain_start" field.</summary>
    public const int MaintainStartFieldNumber = 10;
    private uint maintainStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainStart {
      get { return maintainStart_; }
      set {
        maintainStart_ = value;
      }
    }

    /// <summary>Field number for the "maintain_end" field.</summary>
    public const int MaintainEndFieldNumber = 11;
    private uint maintainEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainEnd {
      get { return maintainEnd_; }
      set {
        maintainEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as game_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(game_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Occupied != other.Occupied) return false;
      if (Capacity != other.Capacity) return false;
      if (Desc != other.Desc) return false;
      if (Status != other.Status) return false;
      if (OpenningTime != other.OpenningTime) return false;
      if (MaintainStart != other.MaintainStart) return false;
      if (MaintainEnd != other.MaintainEnd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Occupied != 0) hash ^= Occupied.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (OpenningTime != 0) hash ^= OpenningTime.GetHashCode();
      if (MaintainStart != 0) hash ^= MaintainStart.GetHashCode();
      if (MaintainEnd != 0) hash ^= MaintainEnd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Port);
      }
      if (Occupied != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Occupied);
      }
      if (Capacity != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Capacity);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Desc);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Status);
      }
      if (OpenningTime != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(OpenningTime);
      }
      if (MaintainStart != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaintainStart);
      }
      if (MaintainEnd != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MaintainEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Occupied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occupied);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (OpenningTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenningTime);
      }
      if (MaintainStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainStart);
      }
      if (MaintainEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainEnd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(game_t other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Occupied != 0) {
        Occupied = other.Occupied;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.OpenningTime != 0) {
        OpenningTime = other.OpenningTime;
      }
      if (other.MaintainStart != 0) {
        MaintainStart = other.MaintainStart;
      }
      if (other.MaintainEnd != 0) {
        MaintainEnd = other.MaintainEnd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadUInt32();
            break;
          }
          case 40: {
            Occupied = input.ReadUInt32();
            break;
          }
          case 48: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 58: {
            Desc = input.ReadString();
            break;
          }
          case 64: {
            Status = input.ReadUInt32();
            break;
          }
          case 72: {
            OpenningTime = input.ReadUInt32();
            break;
          }
          case 80: {
            MaintainStart = input.ReadUInt32();
            break;
          }
          case 88: {
            MaintainEnd = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class lobby_t : pb::IMessage<lobby_t> {
    private static readonly pb::MessageParser<lobby_t> _parser = new pb::MessageParser<lobby_t>(() => new lobby_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<lobby_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t(lobby_t other) : this() {
      version_ = other.version_;
      ip_ = other.ip_;
      port_ = other.port_;
      occupied_ = other.occupied_;
      capacity_ = other.capacity_;
      desc_ = other.desc_;
      bulletin_ = other.bulletin_;
      status_ = other.status_;
      maintainStart_ = other.maintainStart_;
      maintainEnd_ = other.maintainEnd_;
      timeZone_ = other.timeZone_;
      games_ = other.games_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t Clone() {
      return new lobby_t(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "occupied" field.</summary>
    public const int OccupiedFieldNumber = 4;
    private uint occupied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occupied {
      get { return occupied_; }
      set {
        occupied_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 5;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bulletin" field.</summary>
    public const int BulletinFieldNumber = 7;
    private string bulletin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bulletin {
      get { return bulletin_; }
      set {
        bulletin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "maintain_start" field.</summary>
    public const int MaintainStartFieldNumber = 9;
    private uint maintainStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainStart {
      get { return maintainStart_; }
      set {
        maintainStart_ = value;
      }
    }

    /// <summary>Field number for the "maintain_end" field.</summary>
    public const int MaintainEndFieldNumber = 10;
    private uint maintainEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainEnd {
      get { return maintainEnd_; }
      set {
        maintainEnd_ = value;
      }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 11;
    private uint timeZone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "games" field.</summary>
    public const int GamesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Proto3.game_t> _repeated_games_codec
        = pb::FieldCodec.ForMessage(98, global::Proto3.game_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.game_t> games_ = new pbc::RepeatedField<global::Proto3.game_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.game_t> Games {
      get { return games_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as lobby_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(lobby_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Occupied != other.Occupied) return false;
      if (Capacity != other.Capacity) return false;
      if (Desc != other.Desc) return false;
      if (Bulletin != other.Bulletin) return false;
      if (Status != other.Status) return false;
      if (MaintainStart != other.MaintainStart) return false;
      if (MaintainEnd != other.MaintainEnd) return false;
      if (TimeZone != other.TimeZone) return false;
      if(!games_.Equals(other.games_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Occupied != 0) hash ^= Occupied.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Bulletin.Length != 0) hash ^= Bulletin.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (MaintainStart != 0) hash ^= MaintainStart.GetHashCode();
      if (MaintainEnd != 0) hash ^= MaintainEnd.GetHashCode();
      if (TimeZone != 0) hash ^= TimeZone.GetHashCode();
      hash ^= games_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (Occupied != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Occupied);
      }
      if (Capacity != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Capacity);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (Bulletin.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Bulletin);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Status);
      }
      if (MaintainStart != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MaintainStart);
      }
      if (MaintainEnd != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaintainEnd);
      }
      if (TimeZone != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TimeZone);
      }
      games_.WriteTo(output, _repeated_games_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Occupied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occupied);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Bulletin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bulletin);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (MaintainStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainStart);
      }
      if (MaintainEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainEnd);
      }
      if (TimeZone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeZone);
      }
      size += games_.CalculateSize(_repeated_games_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(lobby_t other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Occupied != 0) {
        Occupied = other.Occupied;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Bulletin.Length != 0) {
        Bulletin = other.Bulletin;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.MaintainStart != 0) {
        MaintainStart = other.MaintainStart;
      }
      if (other.MaintainEnd != 0) {
        MaintainEnd = other.MaintainEnd;
      }
      if (other.TimeZone != 0) {
        TimeZone = other.TimeZone;
      }
      games_.Add(other.games_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
          case 32: {
            Occupied = input.ReadUInt32();
            break;
          }
          case 40: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
          case 58: {
            Bulletin = input.ReadString();
            break;
          }
          case 64: {
            Status = input.ReadUInt32();
            break;
          }
          case 72: {
            MaintainStart = input.ReadUInt32();
            break;
          }
          case 80: {
            MaintainEnd = input.ReadUInt32();
            break;
          }
          case 88: {
            TimeZone = input.ReadUInt32();
            break;
          }
          case 98: {
            games_.AddEntriesFrom(input, _repeated_games_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class pawn_t : pb::IMessage<pawn_t> {
    private static readonly pb::MessageParser<pawn_t> _parser = new pb::MessageParser<pawn_t>(() => new pawn_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pawn_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pawn_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pawn_t(pawn_t other) : this() {
      id_ = other.id_;
      color_ = other.color_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pawn_t Clone() {
      return new pawn_t(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pawn_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pawn_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Color != other.Color) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Color != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Color);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pawn_t other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Color = input.ReadUInt32();
            break;
          }
          case 24: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class bunch_t : pb::IMessage<bunch_t> {
    private static readonly pb::MessageParser<bunch_t> _parser = new pb::MessageParser<bunch_t>(() => new bunch_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bunch_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t(bunch_t other) : this() {
      type_ = other.type_;
      pos_ = other.pos_;
      pawns_ = other.pawns_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t Clone() {
      return new bunch_t(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto3.pb_enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "pawns" field.</summary>
    public const int PawnsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_pawns_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> pawns_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Pawns {
      get { return pawns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bunch_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bunch_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Pos != other.Pos) return false;
      if(!pawns_.Equals(other.pawns_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      hash ^= pawns_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      pawns_.WriteTo(output, _repeated_pawns_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      size += pawns_.CalculateSize(_repeated_pawns_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bunch_t other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      pawns_.Add(other.pawns_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            pawns_.AddEntriesFrom(input, _repeated_pawns_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class game_data_t : pb::IMessage<game_data_t> {
    private static readonly pb::MessageParser<game_data_t> _parser = new pb::MessageParser<game_data_t>(() => new game_data_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<game_data_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_data_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_data_t(game_data_t other) : this() {
      hands_ = other.hands_.Clone();
      discards_ = other.discards_.Clone();
      bunch_ = other.bunch_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_data_t Clone() {
      return new game_data_t(this);
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_hands_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> hands_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "discards" field.</summary>
    public const int DiscardsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_discards_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> discards_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Discards {
      get { return discards_; }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_bunch_codec
        = pb::FieldCodec.ForMessage(26, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> bunch_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Bunch {
      get { return bunch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as game_data_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(game_data_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hands_.Equals(other.hands_)) return false;
      if(!discards_.Equals(other.discards_)) return false;
      if(!bunch_.Equals(other.bunch_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hands_.GetHashCode();
      hash ^= discards_.GetHashCode();
      hash ^= bunch_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hands_.WriteTo(output, _repeated_hands_codec);
      discards_.WriteTo(output, _repeated_discards_codec);
      bunch_.WriteTo(output, _repeated_bunch_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hands_.CalculateSize(_repeated_hands_codec);
      size += discards_.CalculateSize(_repeated_discards_codec);
      size += bunch_.CalculateSize(_repeated_bunch_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(game_data_t other) {
      if (other == null) {
        return;
      }
      hands_.Add(other.hands_);
      discards_.Add(other.discards_);
      bunch_.Add(other.bunch_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 18:
          case 16: {
            discards_.AddEntriesFrom(input, _repeated_discards_codec);
            break;
          }
          case 26: {
            bunch_.AddEntriesFrom(input, _repeated_bunch_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgBase : pb::IMessage<MsgBase> {
    private static readonly pb::MessageParser<MsgBase> _parser = new pb::MessageParser<MsgBase>(() => new MsgBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase(MsgBase other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase Clone() {
      return new MsgBase(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBase other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 	Client	 --  Login
  /// </summary>
  public sealed partial class MsgCSLogin : pb::IMessage<MsgCSLogin> {
    private static readonly pb::MessageParser<MsgCSLogin> _parser = new pb::MessageParser<MsgCSLogin>(() => new MsgCSLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCSLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCSLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCSLogin(MsgCSLogin other) : this() {
      mid_ = other.mid_;
      version_ = other.version_;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCSLogin Clone() {
      return new MsgCSLogin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Proto3.user_t user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.user_t User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCSLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCSLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCSLogin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Proto3.user_t();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Proto3.user_t();
            }
            input.ReadMessage(user_);
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgSCLogin : pb::IMessage<MsgSCLogin> {
    private static readonly pb::MessageParser<MsgSCLogin> _parser = new pb::MessageParser<MsgSCLogin>(() => new MsgSCLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgSCLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSCLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSCLogin(MsgSCLogin other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      version_ = other.version_;
      session_ = other.session_;
      ip_ = other.ip_;
      port_ = other.port_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSCLogin Clone() {
      return new MsgSCLogin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 4;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 5;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 6;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 7;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgSCLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgSCLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Version != other.Version) return false;
      if (Session != other.Session) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Session != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Session);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Port);
      }
      if (Result != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgSCLogin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Session = input.ReadUInt64();
            break;
          }
          case 42: {
            Ip = input.ReadString();
            break;
          }
          case 48: {
            Port = input.ReadUInt32();
            break;
          }
          case 56: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 	Client	 --  Lobby
  /// </summary>
  public sealed partial class MsgCLEnter : pb::IMessage<MsgCLEnter> {
    private static readonly pb::MessageParser<MsgCLEnter> _parser = new pb::MessageParser<MsgCLEnter>(() => new MsgCLEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCLEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLEnter(MsgCLEnter other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      version_ = other.version_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLEnter Clone() {
      return new MsgCLEnter(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 4;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCLEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCLEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Version != other.Version) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Session != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCLEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Session = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgLCEnter : pb::IMessage<MsgLCEnter> {
    private static readonly pb::MessageParser<MsgLCEnter> _parser = new pb::MessageParser<MsgLCEnter>(() => new MsgLCEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLCEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCEnter(MsgLCEnter other) : this() {
      mid_ = other.mid_;
      key_ = other.key_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCEnter Clone() {
      return new MsgLCEnter(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::Proto3.player_t player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.player_t Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 4;
    private global::Proto3.lobby_t lobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.lobby_t Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 5;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLCEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLCEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Key != other.Key) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (!object.Equals(Lobby, other.Lobby)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Key);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (lobby_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Lobby);
      }
      if (Result != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLCEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Proto3.player_t();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Proto3.lobby_t();
        }
        Lobby.MergeFrom(other.Lobby);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Key = input.ReadUInt32();
            break;
          }
          case 26: {
            if (player_ == null) {
              player_ = new global::Proto3.player_t();
            }
            input.ReadMessage(player_);
            break;
          }
          case 34: {
            if (lobby_ == null) {
              lobby_ = new global::Proto3.lobby_t();
            }
            input.ReadMessage(lobby_);
            break;
          }
          case 40: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 	Client	 --  Node
  /// </summary>
  public sealed partial class MsgCNEnter : pb::IMessage<MsgCNEnter> {
    private static readonly pb::MessageParser<MsgCNEnter> _parser = new pb::MessageParser<MsgCNEnter>(() => new MsgCNEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEnter(MsgCNEnter other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      version_ = other.version_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEnter Clone() {
      return new MsgCNEnter(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 4;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Version != other.Version) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Session != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Session = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCEnter : pb::IMessage<MsgNCEnter> {
    private static readonly pb::MessageParser<MsgNCEnter> _parser = new pb::MessageParser<MsgNCEnter>(() => new MsgNCEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEnter(MsgNCEnter other) : this() {
      mid_ = other.mid_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEnter Clone() {
      return new MsgNCEnter(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Proto3.player_t player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.player_t Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Proto3.player_t();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::Proto3.player_t();
            }
            input.ReadMessage(player_);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNCreate : pb::IMessage<MsgCNCreate> {
    private static readonly pb::MessageParser<MsgCNCreate> _parser = new pb::MessageParser<MsgCNCreate>(() => new MsgCNCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate(MsgCNCreate other) : this() {
      mid_ = other.mid_;
      game_ = other.game_;
      option_ = other.option_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate Clone() {
      return new MsgCNCreate(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 2;
    private global::Proto3.pb_enum game_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "option" field.</summary>
    public const int OptionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto3.key_value> _repeated_option_codec
        = pb::FieldCodec.ForMessage(26, global::Proto3.key_value.Parser);
    private readonly pbc::RepeatedField<global::Proto3.key_value> option_ = new pbc::RepeatedField<global::Proto3.key_value>();
    /// <summary>
    /// anti,rounds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.key_value> Option {
      get { return option_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Game != other.Game) return false;
      if(!option_.Equals(other.option_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Game != 0) hash ^= Game.GetHashCode();
      hash ^= option_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Game != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Game);
      }
      option_.WriteTo(output, _repeated_option_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Game);
      }
      size += option_.CalculateSize(_repeated_option_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNCreate other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      option_.Add(other.option_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            game_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 26: {
            option_.AddEntriesFrom(input, _repeated_option_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCCreate : pb::IMessage<MsgNCCreate> {
    private static readonly pb::MessageParser<MsgNCCreate> _parser = new pb::MessageParser<MsgNCCreate>(() => new MsgNCCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate(MsgNCCreate other) : this() {
      mid_ = other.mid_;
      gameId_ = other.gameId_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate Clone() {
      return new MsgNCCreate(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private uint gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (GameId != other.GameId) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameId);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCCreate other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            GameId = input.ReadUInt32();
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNJoin : pb::IMessage<MsgCNJoin> {
    private static readonly pb::MessageParser<MsgCNJoin> _parser = new pb::MessageParser<MsgCNJoin>(() => new MsgCNJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin(MsgCNJoin other) : this() {
      mid_ = other.mid_;
      gameId_ = other.gameId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin Clone() {
      return new MsgCNJoin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private uint gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (GameId != other.GameId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNJoin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            GameId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCJoin : pb::IMessage<MsgNCJoin> {
    private static readonly pb::MessageParser<MsgNCJoin> _parser = new pb::MessageParser<MsgNCJoin>(() => new MsgNCJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin(MsgNCJoin other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin Clone() {
      return new MsgNCJoin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCJoin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCStart : pb::IMessage<MsgNCStart> {
    private static readonly pb::MessageParser<MsgNCStart> _parser = new pb::MessageParser<MsgNCStart>(() => new MsgNCStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCStart(MsgNCStart other) : this() {
      mid_ = other.mid_;
      banker_ = other.banker_;
      pos_ = other.pos_;
      ante_ = other.ante_;
      multiple_ = other.multiple_;
      cards_ = other.cards_.Clone();
      hands_ = other.hands_.Clone();
      bottom_ = other.bottom_.Clone();
      count_ = other.count_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCStart Clone() {
      return new MsgNCStart(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "banker" field.</summary>
    public const int BankerFieldNumber = 2;
    private uint banker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Banker {
      get { return banker_; }
      set {
        banker_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 4;
    private uint ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ante {
      get { return ante_; }
      set {
        ante_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 5;
    private uint multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Proto3.pawn_t> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(50, global::Proto3.pawn_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.pawn_t> cards_ = new pbc::RepeatedField<global::Proto3.pawn_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.pawn_t> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_hands_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> hands_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_bottom_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> bottom_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Bottom {
      get { return bottom_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_count_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> count_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Count {
      get { return count_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 10;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Banker != other.Banker) return false;
      if (Pos != other.Pos) return false;
      if (Ante != other.Ante) return false;
      if (Multiple != other.Multiple) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!hands_.Equals(other.hands_)) return false;
      if(!bottom_.Equals(other.bottom_)) return false;
      if(!count_.Equals(other.count_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Banker != 0) hash ^= Banker.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Ante != 0) hash ^= Ante.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= hands_.GetHashCode();
      hash ^= bottom_.GetHashCode();
      hash ^= count_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Banker != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Banker);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      if (Ante != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Ante);
      }
      if (Multiple != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Multiple);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      hands_.WriteTo(output, _repeated_hands_codec);
      bottom_.WriteTo(output, _repeated_bottom_codec);
      count_.WriteTo(output, _repeated_count_codec);
      if (Result != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Banker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Banker);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (Ante != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ante);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiple);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += hands_.CalculateSize(_repeated_hands_codec);
      size += bottom_.CalculateSize(_repeated_bottom_codec);
      size += count_.CalculateSize(_repeated_count_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCStart other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Banker != 0) {
        Banker = other.Banker;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Ante != 0) {
        Ante = other.Ante;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      cards_.Add(other.cards_);
      hands_.Add(other.hands_);
      bottom_.Add(other.bottom_);
      count_.Add(other.count_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Banker = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 32: {
            Ante = input.ReadUInt32();
            break;
          }
          case 40: {
            Multiple = input.ReadUInt32();
            break;
          }
          case 50: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 58:
          case 56: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 66:
          case 64: {
            bottom_.AddEntriesFrom(input, _repeated_bottom_codec);
            break;
          }
          case 74:
          case 72: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
          case 80: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDiscard : pb::IMessage<MsgCNDiscard> {
    private static readonly pb::MessageParser<MsgCNDiscard> _parser = new pb::MessageParser<MsgCNDiscard>(() => new MsgCNDiscard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDiscard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard(MsgCNDiscard other) : this() {
      mid_ = other.mid_;
      Bunch = other.bunch_ != null ? other.Bunch.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard Clone() {
      return new MsgCNDiscard(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 2;
    private global::Proto3.bunch_t bunch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.bunch_t Bunch {
      get { return bunch_; }
      set {
        bunch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDiscard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDiscard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Bunch, other.Bunch)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (bunch_ != null) hash ^= Bunch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (bunch_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bunch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (bunch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bunch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDiscard other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.bunch_ != null) {
        if (bunch_ == null) {
          bunch_ = new global::Proto3.bunch_t();
        }
        Bunch.MergeFrom(other.Bunch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (bunch_ == null) {
              bunch_ = new global::Proto3.bunch_t();
            }
            input.ReadMessage(bunch_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDiscard : pb::IMessage<MsgNCDiscard> {
    private static readonly pb::MessageParser<MsgNCDiscard> _parser = new pb::MessageParser<MsgNCDiscard>(() => new MsgNCDiscard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDiscard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard(MsgNCDiscard other) : this() {
      mid_ = other.mid_;
      Bunch = other.bunch_ != null ? other.Bunch.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard Clone() {
      return new MsgNCDiscard(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 2;
    private global::Proto3.bunch_t bunch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.bunch_t Bunch {
      get { return bunch_; }
      set {
        bunch_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDiscard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDiscard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Bunch, other.Bunch)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (bunch_ != null) hash ^= Bunch.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (bunch_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bunch);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (bunch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bunch);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDiscard other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.bunch_ != null) {
        if (bunch_ == null) {
          bunch_ = new global::Proto3.bunch_t();
        }
        Bunch.MergeFrom(other.Bunch);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (bunch_ == null) {
              bunch_ = new global::Proto3.bunch_t();
            }
            input.ReadMessage(bunch_);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNMeld : pb::IMessage<MsgCNMeld> {
    private static readonly pb::MessageParser<MsgCNMeld> _parser = new pb::MessageParser<MsgCNMeld>(() => new MsgCNMeld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNMeld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld(MsgCNMeld other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld Clone() {
      return new MsgCNMeld(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNMeld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNMeld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNMeld other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCMeld : pb::IMessage<MsgNCMeld> {
    private static readonly pb::MessageParser<MsgNCMeld> _parser = new pb::MessageParser<MsgNCMeld>(() => new MsgNCMeld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCMeld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld(MsgNCMeld other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld Clone() {
      return new MsgNCMeld(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCMeld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCMeld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCMeld other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDismissSync : pb::IMessage<MsgCNDismissSync> {
    private static readonly pb::MessageParser<MsgCNDismissSync> _parser = new pb::MessageParser<MsgCNDismissSync>(() => new MsgCNDismissSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDismissSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync(MsgCNDismissSync other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync Clone() {
      return new MsgCNDismissSync(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDismissSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDismissSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDismissSync other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDismissSync : pb::IMessage<MsgNCDismissSync> {
    private static readonly pb::MessageParser<MsgNCDismissSync> _parser = new pb::MessageParser<MsgNCDismissSync>(() => new MsgNCDismissSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDismissSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync(MsgNCDismissSync other) : this() {
      mid_ = other.mid_;
      pos_ = other.pos_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync Clone() {
      return new MsgNCDismissSync(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDismissSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDismissSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Pos != other.Pos) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDismissSync other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDismissAck : pb::IMessage<MsgCNDismissAck> {
    private static readonly pb::MessageParser<MsgCNDismissAck> _parser = new pb::MessageParser<MsgCNDismissAck>(() => new MsgCNDismissAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDismissAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck(MsgCNDismissAck other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck Clone() {
      return new MsgCNDismissAck(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDismissAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDismissAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDismissAck other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDismissAck : pb::IMessage<MsgNCDismissAck> {
    private static readonly pb::MessageParser<MsgNCDismissAck> _parser = new pb::MessageParser<MsgNCDismissAck>(() => new MsgNCDismissAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDismissAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck(MsgNCDismissAck other) : this() {
      mid_ = other.mid_;
      pos_ = other.pos_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck Clone() {
      return new MsgNCDismissAck(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDismissAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDismissAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Pos != other.Pos) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDismissAck other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCSettle : pb::IMessage<MsgNCSettle> {
    private static readonly pb::MessageParser<MsgNCSettle> _parser = new pb::MessageParser<MsgNCSettle>(() => new MsgNCSettle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle(MsgNCSettle other) : this() {
      mid_ = other.mid_;
      winner_ = other.winner_;
      play_ = other.play_.Clone();
      hands_ = other.hands_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle Clone() {
      return new MsgNCSettle(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 2;
    private uint winner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto3.player_t> _repeated_play_codec
        = pb::FieldCodec.ForMessage(26, global::Proto3.player_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.player_t> play_ = new pbc::RepeatedField<global::Proto3.player_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.player_t> Play {
      get { return play_; }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_hands_codec
        = pb::FieldCodec.ForMessage(34, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> hands_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 5;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Winner != other.Winner) return false;
      if(!play_.Equals(other.play_)) return false;
      if(!hands_.Equals(other.hands_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Winner != 0) hash ^= Winner.GetHashCode();
      hash ^= play_.GetHashCode();
      hash ^= hands_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Winner != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Winner);
      }
      play_.WriteTo(output, _repeated_play_codec);
      hands_.WriteTo(output, _repeated_hands_codec);
      if (Result != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Winner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Winner);
      }
      size += play_.CalculateSize(_repeated_play_codec);
      size += hands_.CalculateSize(_repeated_hands_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCSettle other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Winner != 0) {
        Winner = other.Winner;
      }
      play_.Add(other.play_);
      hands_.Add(other.hands_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Winner = input.ReadUInt32();
            break;
          }
          case 26: {
            play_.AddEntriesFrom(input, _repeated_play_codec);
            break;
          }
          case 34: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 40: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCFinish : pb::IMessage<MsgNCFinish> {
    private static readonly pb::MessageParser<MsgNCFinish> _parser = new pb::MessageParser<MsgNCFinish>(() => new MsgNCFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish(MsgNCFinish other) : this() {
      mid_ = other.mid_;
      play_ = other.play_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish Clone() {
      return new MsgNCFinish(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.player_t> _repeated_play_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.player_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.player_t> play_ = new pbc::RepeatedField<global::Proto3.player_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.player_t> Play {
      get { return play_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if(!play_.Equals(other.play_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      hash ^= play_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      play_.WriteTo(output, _repeated_play_codec);
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      size += play_.CalculateSize(_repeated_play_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCFinish other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      play_.Add(other.play_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            play_.AddEntriesFrom(input, _repeated_play_codec);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNStats : pb::IMessage<MsgCNStats> {
    private static readonly pb::MessageParser<MsgCNStats> _parser = new pb::MessageParser<MsgCNStats>(() => new MsgCNStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNStats(MsgCNStats other) : this() {
      mid_ = other.mid_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNStats Clone() {
      return new MsgCNStats(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNStats other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
