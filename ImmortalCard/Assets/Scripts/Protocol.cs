// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIGcHJvdG8zIp4BCgZ1c2VyX3QSCwoDdWlkGAEg",
            "ASgJEgwKBGZsYWcYAiABKA0SIQoIZGV2X3R5cGUYAyABKA4yDy5wcm90bzMu",
            "cGJfZW51bRIPCgdhY2NvdW50GAQgASgJEgwKBG5hbWUYBSABKAkSDAoEcHN3",
            "ZBgGIAEoCRIOCgZnZW5kZXIYByABKA0SCwoDYWdlGAggASgNEgwKBHVkaWQY",
            "CSABKAkijgEKCHBsYXllcl90EgsKA3VpZBgBIAEoCRILCgNwaWQYAiABKA0S",
            "DQoFbGV2ZWwYAyABKA0SCgoCeHAYBCABKA0SEAoIY3VycmVuY3kYBSABKA0S",
            "DgoGZW5lcmd5GAYgASgNEisKDGFjaGlldmVtZW50cxgHIAMoCzIVLnByb3Rv",
            "My5hY2hpZXZlbWVudF90IloKBmdhbWVfdBILCgN1aWQYASABKAkSCwoDZ2lk",
            "GAIgASgNEgsKA3dpbhgDIAEoDRIMCgRsb3NlGAQgASgNEgwKBGRyYXcYBSAB",
            "KA0SDQoFc2NvcmUYBiABKA0iSwoNYWNoaWV2ZW1lbnRfdBIdCgR0eXBlGAEg",
            "ASgOMg8ucHJvdG8zLnBiX2VudW0SDAoEbmFtZRgCIAEoCRINCgV2YWx1ZRgD",
            "IAEoDSLOAQoOZ2FtZV9zZXJ2aWNlX3QSCgoCaWQYASABKA0SDwoHdmVyc2lv",
            "bhgCIAEoDRIKCgJpcBgDIAEoCRIMCgRwb3J0GAQgASgNEhAKCG9jY3VwaWVk",
            "GAUgASgNEhAKCGNhcGFjaXR5GAYgASgNEgwKBGRlc2MYByABKAkSDgoGc3Rh",
            "dHVzGAggASgNEhUKDW9wZW5uaW5nX3RpbWUYCSABKA0SFgoObWFpbnRhaW5f",
            "c3RhcnQYCiABKA0SFAoMbWFpbnRhaW5fZW5kGAsgASgNIvABCgdsb2JieV90",
            "Eg8KB3ZlcnNpb24YASABKA0SCgoCaXAYAiABKAkSDAoEcG9ydBgDIAEoDRIQ",
            "CghvY2N1cGllZBgEIAEoDRIQCghjYXBhY2l0eRgFIAEoDRIMCgRkZXNjGAYg",
            "ASgJEhAKCGJ1bGxldGluGAcgASgJEg4KBnN0YXR1cxgIIAEoDRIWCg5tYWlu",
            "dGFpbl9zdGFydBgJIAEoDRIUCgxtYWludGFpbl9lbmQYCiABKA0SEQoJdGlt",
            "ZV96b25lGAsgASgNEiUKBWdhbWVzGAwgAygLMhYucHJvdG8zLmdhbWVfc2Vy",
            "dmljZV90IjIKBnBhd25fdBIKCgJpZBgBIAEoBRINCgVjb2xvchgCIAEoBRIN",
            "CgV2YWx1ZRgDIAEoBSI3CgdidW5jaF90Eh0KBHR5cGUYASABKA4yDy5wcm90",
            "bzMucGJfZW51bRINCgVwYXducxgCIAMoDSJLCglnYW1lX2RhdGESDAoEZGVj",
            "axgBIAMoDRIQCghkaXNjYXJkcxgCIAMoDRIeCgVidW5jaBgDIAMoCzIPLnBy",
            "b3RvMy5idW5jaF90IhYKB01zZ0Jhc2USCwoDbWlkGAEgASgNIkgKCk1zZ0NT",
            "TG9naW4SCwoDbWlkGAEgASgNEg8KB3ZlcnNpb24YAyABKA0SHAoEdXNlchgC",
            "IAEoCzIOLnByb3RvMy51c2VyX3QikAEKCk1zZ1NDTG9naW4SCwoDbWlkGAEg",
            "ASgNEgsKA3VpZBgCIAEoCRIPCgd2ZXJzaW9uGAMgASgNEgsKA2tleRgEIAEo",
            "DRIPCgdzZXNzaW9uGAUgASgEEgoKAmlwGAYgASgJEgwKBHBvcnQYByABKA0S",
            "HwoGcmVzdWx0GAggASgOMg8ucHJvdG8zLnBiX2VudW0iVQoKTXNnQ0xFbnRl",
            "chILCgNtaWQYASABKA0SCwoDdWlkGAIgASgJEg8KB3ZlcnNpb24YAyABKA0S",
            "CwoDa2V5GAQgASgNEg8KB3Nlc3Npb24YBSABKAQifAoKTXNnTENFbnRlchIL",
            "CgNtaWQYASABKA0SIAoGcGxheWVyGAIgASgLMhAucHJvdG8zLnBsYXllcl90",
            "Eh4KBWxvYmJ5GAMgASgLMg8ucHJvdG8zLmxvYmJ5X3QSHwoGcmVzdWx0GAQg",
            "ASgOMg8ucHJvdG8zLnBiX2VudW0idwoKTXNnQ05FbnRlchILCgNtaWQYASAB",
            "KA0SCwoDdWlkGAIgASgJEg8KB3ZlcnNpb24YAyABKA0SCwoDa2V5GAQgASgN",
            "Eg8KB3Nlc3Npb24YBSABKAQSIAoHc2VydmljZRgGIAEoDjIPLnByb3RvMy5w",
            "Yl9lbnVtIl0KCk1zZ05DRW50ZXISCwoDbWlkGAEgASgNEiEKCWdhbWVfaW5m",
            "bxgCIAEoCzIOLnByb3RvMy5nYW1lX3QSHwoGcmVzdWx0GAMgASgOMg8ucHJv",
            "dG8zLnBiX2VudW0iiwEKC01zZ0NOQ3JlYXRlEgsKA21pZBgBIAEoDRIdCgRy",
            "dWxlGAIgASgOMg8ucHJvdG8zLnBiX2VudW0SIQoIY2F0ZWdvcnkYAyABKA4y",
            "Dy5wcm90bzMucGJfZW51bRILCgNrZXkYBCABKA0SDQoFcm9ib3QYBSABKA0S",
            "EQoJcGFyYW1ldGVyGAYgASgNIkwKC01zZ05DQ3JlYXRlEgsKA21pZBgBIAEo",
            "DRIPCgdnYW1lX2lkGAIgASgNEh8KBnJlc3VsdBgDIAEoDjIPLnByb3RvMy5w",
            "Yl9lbnVtIjYKCU1zZ0NOSm9pbhILCgNtaWQYASABKA0SCwoDa2V5GAIgASgN",
            "Eg8KB2dhbWVfaWQYAyABKA0iOQoJTXNnTkNKb2luEgsKA21pZBgBIAEoDRIf",
            "CgZyZXN1bHQYAiABKA4yDy5wcm90bzMucGJfZW51bSI6CgpNc2dOQ1N0YXJ0",
            "EgsKA21pZBgBIAEoDRIfCgZyZXN1bHQYAiABKA4yDy5wcm90bzMucGJfZW51",
            "bSIbCgxNc2dDTkRpc2NhcmQSCwoDbWlkGAEgASgNIjwKDE1zZ05DRGlzY2Fy",
            "ZBILCgNtaWQYASABKA0SHwoGcmVzdWx0GAIgASgOMg8ucHJvdG8zLnBiX2Vu",
            "dW0iGAoJTXNnQ05NZWxkEgsKA21pZBgBIAEoDSI5CglNc2dOQ01lbGQSCwoD",
            "bWlkGAEgASgNEh8KBnJlc3VsdBgCIAEoDjIPLnByb3RvMy5wYl9lbnVtIh8K",
            "EE1zZ0NORGlzbWlzc1N5bmMSCwoDbWlkGAEgASgNIkAKEE1zZ05DRGlzbWlz",
            "c1N5bmMSCwoDbWlkGAEgASgNEh8KBnJlc3VsdBgCIAEoDjIPLnByb3RvMy5w",
            "Yl9lbnVtIh4KD01zZ0NORGlzbWlzc0FjaxILCgNtaWQYASABKA0iPwoPTXNn",
            "TkNEaXNtaXNzQWNrEgsKA21pZBgBIAEoDRIfCgZyZXN1bHQYAiABKA4yDy5w",
            "cm90bzMucGJfZW51bSI7CgtNc2dOQ1NldHRsZRILCgNtaWQYASABKA0SHwoG",
            "cmVzdWx0GAIgASgOMg8ucHJvdG8zLnBiX2VudW0iOwoLTXNnTkNGaW5pc2gS",
            "CwoDbWlkGAEgASgNEh8KBnJlc3VsdBgCIAEoDjIPLnByb3RvMy5wYl9lbnVt",
            "Ko0DCgdwYl9lbnVtEgsKB1VOS05PV04QABIICgROT05FEAASDAoIU1VDQ0VF",
            "U1MQABIKCgZERVZfUEMQABILCgdERVZfUFM0EAESDAoIREVWX1hCT1gQAhIL",
            "CgdERVZfSU9TEAMSDwoLREVWX0FORFJPSUQQBBIQCgxERVZfV0lOUEhPTkUQ",
            "BRINCglHQU1FX0NBUkQQChIOCgpHQU1FX0NIRVNTEAsSDAoIUlVMRV9ERFoQ",
            "FBIMCghSVUxFX1BESxAVEgwKCFJVTEVfUEhaEBYSEwoPQ0FURUdPUllfTk9S",
            "TUFMEDISEQoNQ0FURUdPUllfRUFTWRAzEhEKDUNBVEVHT1JZX0hBUkQQNBIU",
            "ChBBQ0hJRVZFTUVOVF9CRVNUEAoSDgoKRVJSX0ZBSUxFRBBkEhEKDUVSUl9D",
            "QU5DRUxMRUQQZRIQCgxFUlJfUFJPVE9DT0wQZhINCglFUlJfUEFSQU0QZxIS",
            "Cg5FUlJfRFVQTElDQVRFRBBoEhAKC0VSUl9VTktOT1dOEOcHGgIQAUICSANi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto3.pb_enum), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.user_t), global::Proto3.user_t.Parser, new[]{ "Uid", "Flag", "DevType", "Account", "Name", "Pswd", "Gender", "Age", "Udid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.player_t), global::Proto3.player_t.Parser, new[]{ "Uid", "Pid", "Level", "Xp", "Currency", "Energy", "Achievements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.game_t), global::Proto3.game_t.Parser, new[]{ "Uid", "Gid", "Win", "Lose", "Draw", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.achievement_t), global::Proto3.achievement_t.Parser, new[]{ "Type", "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.game_service_t), global::Proto3.game_service_t.Parser, new[]{ "Id", "Version", "Ip", "Port", "Occupied", "Capacity", "Desc", "Status", "OpenningTime", "MaintainStart", "MaintainEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.lobby_t), global::Proto3.lobby_t.Parser, new[]{ "Version", "Ip", "Port", "Occupied", "Capacity", "Desc", "Bulletin", "Status", "MaintainStart", "MaintainEnd", "TimeZone", "Games" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.pawn_t), global::Proto3.pawn_t.Parser, new[]{ "Id", "Color", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.bunch_t), global::Proto3.bunch_t.Parser, new[]{ "Type", "Pawns" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.game_data), global::Proto3.game_data.Parser, new[]{ "Deck", "Discards", "Bunch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgBase), global::Proto3.MsgBase.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCSLogin), global::Proto3.MsgCSLogin.Parser, new[]{ "Mid", "Version", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgSCLogin), global::Proto3.MsgSCLogin.Parser, new[]{ "Mid", "Uid", "Version", "Key", "Session", "Ip", "Port", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCLEnter), global::Proto3.MsgCLEnter.Parser, new[]{ "Mid", "Uid", "Version", "Key", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgLCEnter), global::Proto3.MsgLCEnter.Parser, new[]{ "Mid", "Player", "Lobby", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNEnter), global::Proto3.MsgCNEnter.Parser, new[]{ "Mid", "Uid", "Version", "Key", "Session", "Service" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCEnter), global::Proto3.MsgNCEnter.Parser, new[]{ "Mid", "GameInfo", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNCreate), global::Proto3.MsgCNCreate.Parser, new[]{ "Mid", "Rule", "Category", "Key", "Robot", "Parameter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCCreate), global::Proto3.MsgNCCreate.Parser, new[]{ "Mid", "GameId", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNJoin), global::Proto3.MsgCNJoin.Parser, new[]{ "Mid", "Key", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCJoin), global::Proto3.MsgNCJoin.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCStart), global::Proto3.MsgNCStart.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDiscard), global::Proto3.MsgCNDiscard.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDiscard), global::Proto3.MsgNCDiscard.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNMeld), global::Proto3.MsgCNMeld.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCMeld), global::Proto3.MsgNCMeld.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDismissSync), global::Proto3.MsgCNDismissSync.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDismissSync), global::Proto3.MsgNCDismissSync.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDismissAck), global::Proto3.MsgCNDismissAck.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDismissAck), global::Proto3.MsgNCDismissAck.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCSettle), global::Proto3.MsgNCSettle.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCFinish), global::Proto3.MsgNCFinish.Parser, new[]{ "Mid", "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  -------- data structures --------
  /// </summary>
  public enum pb_enum {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("SUCCEESS")] Succeess = 0,
    /// <summary>
    ///  device type
    /// </summary>
    [pbr::OriginalName("DEV_PC")] DevPc = 0,
    [pbr::OriginalName("DEV_PS4")] DevPs4 = 1,
    [pbr::OriginalName("DEV_XBOX")] DevXbox = 2,
    [pbr::OriginalName("DEV_IOS")] DevIos = 3,
    [pbr::OriginalName("DEV_ANDROID")] DevAndroid = 4,
    [pbr::OriginalName("DEV_WINPHONE")] DevWinphone = 5,
    /// <summary>
    ///  game service
    /// </summary>
    [pbr::OriginalName("GAME_CARD")] GameCard = 10,
    [pbr::OriginalName("GAME_CHESS")] GameChess = 11,
    /// <summary>
    ///  game rule
    /// </summary>
    [pbr::OriginalName("RULE_DDZ")] RuleDdz = 20,
    [pbr::OriginalName("RULE_PDK")] RulePdk = 21,
    [pbr::OriginalName("RULE_PHZ")] RulePhz = 22,
    /// <summary>
    ///  game category
    /// </summary>
    [pbr::OriginalName("CATEGORY_NORMAL")] CategoryNormal = 50,
    [pbr::OriginalName("CATEGORY_EASY")] CategoryEasy = 51,
    [pbr::OriginalName("CATEGORY_HARD")] CategoryHard = 52,
    /// <summary>
    ///  achievement
    /// </summary>
    [pbr::OriginalName("ACHIEVEMENT_BEST")] AchievementBest = 10,
    /// <summary>
    ///  error
    /// </summary>
    [pbr::OriginalName("ERR_FAILED")] ErrFailed = 100,
    [pbr::OriginalName("ERR_CANCELLED")] ErrCancelled = 101,
    [pbr::OriginalName("ERR_PROTOCOL")] ErrProtocol = 102,
    [pbr::OriginalName("ERR_PARAM")] ErrParam = 103,
    [pbr::OriginalName("ERR_DUPLICATED")] ErrDuplicated = 104,
    [pbr::OriginalName("ERR_UNKNOWN")] ErrUnknown = 999,
  }

  #endregion

  #region Messages
  public sealed partial class user_t : pb::IMessage<user_t> {
    private static readonly pb::MessageParser<user_t> _parser = new pb::MessageParser<user_t>(() => new user_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t(user_t other) : this() {
      uid_ = other.uid_;
      flag_ = other.flag_;
      devType_ = other.devType_;
      account_ = other.account_;
      name_ = other.name_;
      pswd_ = other.pswd_;
      gender_ = other.gender_;
      age_ = other.age_;
      udid_ = other.udid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t Clone() {
      return new user_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private uint flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "dev_type" field.</summary>
    public const int DevTypeFieldNumber = 3;
    private global::Proto3.pb_enum devType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum DevType {
      get { return devType_; }
      set {
        devType_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 4;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pswd" field.</summary>
    public const int PswdFieldNumber = 6;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 7;
    private uint gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 8;
    private uint age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 9;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Flag != other.Flag) return false;
      if (DevType != other.DevType) return false;
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      if (Pswd != other.Pswd) return false;
      if (Gender != other.Gender) return false;
      if (Age != other.Age) return false;
      if (Udid != other.Udid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (DevType != 0) hash ^= DevType.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Flag != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flag);
      }
      if (DevType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DevType);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Pswd);
      }
      if (Gender != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Gender);
      }
      if (Age != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Age);
      }
      if (Udid.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Udid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      if (DevType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DevType);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gender);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Age);
      }
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.DevType != 0) {
        DevType = other.DevType;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Flag = input.ReadUInt32();
            break;
          }
          case 24: {
            devType_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 34: {
            Account = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Pswd = input.ReadString();
            break;
          }
          case 56: {
            Gender = input.ReadUInt32();
            break;
          }
          case 64: {
            Age = input.ReadUInt32();
            break;
          }
          case 74: {
            Udid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class player_t : pb::IMessage<player_t> {
    private static readonly pb::MessageParser<player_t> _parser = new pb::MessageParser<player_t>(() => new player_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<player_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t(player_t other) : this() {
      uid_ = other.uid_;
      pid_ = other.pid_;
      level_ = other.level_;
      xp_ = other.xp_;
      currency_ = other.currency_;
      energy_ = other.energy_;
      achievements_ = other.achievements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t Clone() {
      return new player_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private uint pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "xp" field.</summary>
    public const int XpFieldNumber = 4;
    private uint xp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Xp {
      get { return xp_; }
      set {
        xp_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 5;
    private uint currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 6;
    private uint energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "achievements" field.</summary>
    public const int AchievementsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Proto3.achievement_t> _repeated_achievements_codec
        = pb::FieldCodec.ForMessage(58, global::Proto3.achievement_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.achievement_t> achievements_ = new pbc::RepeatedField<global::Proto3.achievement_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.achievement_t> Achievements {
      get { return achievements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as player_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(player_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Pid != other.Pid) return false;
      if (Level != other.Level) return false;
      if (Xp != other.Xp) return false;
      if (Currency != other.Currency) return false;
      if (Energy != other.Energy) return false;
      if(!achievements_.Equals(other.achievements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Xp != 0) hash ^= Xp.GetHashCode();
      if (Currency != 0) hash ^= Currency.GetHashCode();
      if (Energy != 0) hash ^= Energy.GetHashCode();
      hash ^= achievements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Xp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Xp);
      }
      if (Currency != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Currency);
      }
      if (Energy != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Energy);
      }
      achievements_.WriteTo(output, _repeated_achievements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Xp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Xp);
      }
      if (Currency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currency);
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Energy);
      }
      size += achievements_.CalculateSize(_repeated_achievements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(player_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Xp != 0) {
        Xp = other.Xp;
      }
      if (other.Currency != 0) {
        Currency = other.Currency;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      achievements_.Add(other.achievements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Pid = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Xp = input.ReadUInt32();
            break;
          }
          case 40: {
            Currency = input.ReadUInt32();
            break;
          }
          case 48: {
            Energy = input.ReadUInt32();
            break;
          }
          case 58: {
            achievements_.AddEntriesFrom(input, _repeated_achievements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class game_t : pb::IMessage<game_t> {
    private static readonly pb::MessageParser<game_t> _parser = new pb::MessageParser<game_t>(() => new game_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<game_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t(game_t other) : this() {
      uid_ = other.uid_;
      gid_ = other.gid_;
      win_ = other.win_;
      lose_ = other.lose_;
      draw_ = other.draw_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t Clone() {
      return new game_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gid" field.</summary>
    public const int GidFieldNumber = 2;
    private uint gid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gid {
      get { return gid_; }
      set {
        gid_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 3;
    private uint win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "lose" field.</summary>
    public const int LoseFieldNumber = 4;
    private uint lose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lose {
      get { return lose_; }
      set {
        lose_ = value;
      }
    }

    /// <summary>Field number for the "draw" field.</summary>
    public const int DrawFieldNumber = 5;
    private uint draw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Draw {
      get { return draw_; }
      set {
        draw_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as game_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(game_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Gid != other.Gid) return false;
      if (Win != other.Win) return false;
      if (Lose != other.Lose) return false;
      if (Draw != other.Draw) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Gid != 0) hash ^= Gid.GetHashCode();
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Lose != 0) hash ^= Lose.GetHashCode();
      if (Draw != 0) hash ^= Draw.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Gid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Gid);
      }
      if (Win != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Win);
      }
      if (Lose != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lose);
      }
      if (Draw != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Draw);
      }
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Gid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gid);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Win);
      }
      if (Lose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lose);
      }
      if (Draw != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Draw);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(game_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Gid != 0) {
        Gid = other.Gid;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Lose != 0) {
        Lose = other.Lose;
      }
      if (other.Draw != 0) {
        Draw = other.Draw;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Gid = input.ReadUInt32();
            break;
          }
          case 24: {
            Win = input.ReadUInt32();
            break;
          }
          case 32: {
            Lose = input.ReadUInt32();
            break;
          }
          case 40: {
            Draw = input.ReadUInt32();
            break;
          }
          case 48: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class achievement_t : pb::IMessage<achievement_t> {
    private static readonly pb::MessageParser<achievement_t> _parser = new pb::MessageParser<achievement_t>(() => new achievement_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<achievement_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievement_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievement_t(achievement_t other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achievement_t Clone() {
      return new achievement_t(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto3.pb_enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as achievement_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(achievement_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(achievement_t other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class game_service_t : pb::IMessage<game_service_t> {
    private static readonly pb::MessageParser<game_service_t> _parser = new pb::MessageParser<game_service_t>(() => new game_service_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<game_service_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_service_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_service_t(game_service_t other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      ip_ = other.ip_;
      port_ = other.port_;
      occupied_ = other.occupied_;
      capacity_ = other.capacity_;
      desc_ = other.desc_;
      status_ = other.status_;
      openningTime_ = other.openningTime_;
      maintainStart_ = other.maintainStart_;
      maintainEnd_ = other.maintainEnd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_service_t Clone() {
      return new game_service_t(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "occupied" field.</summary>
    public const int OccupiedFieldNumber = 5;
    private uint occupied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occupied {
      get { return occupied_; }
      set {
        occupied_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 7;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "openning_time" field.</summary>
    public const int OpenningTimeFieldNumber = 9;
    private uint openningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenningTime {
      get { return openningTime_; }
      set {
        openningTime_ = value;
      }
    }

    /// <summary>Field number for the "maintain_start" field.</summary>
    public const int MaintainStartFieldNumber = 10;
    private uint maintainStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainStart {
      get { return maintainStart_; }
      set {
        maintainStart_ = value;
      }
    }

    /// <summary>Field number for the "maintain_end" field.</summary>
    public const int MaintainEndFieldNumber = 11;
    private uint maintainEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainEnd {
      get { return maintainEnd_; }
      set {
        maintainEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as game_service_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(game_service_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Occupied != other.Occupied) return false;
      if (Capacity != other.Capacity) return false;
      if (Desc != other.Desc) return false;
      if (Status != other.Status) return false;
      if (OpenningTime != other.OpenningTime) return false;
      if (MaintainStart != other.MaintainStart) return false;
      if (MaintainEnd != other.MaintainEnd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Occupied != 0) hash ^= Occupied.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (OpenningTime != 0) hash ^= OpenningTime.GetHashCode();
      if (MaintainStart != 0) hash ^= MaintainStart.GetHashCode();
      if (MaintainEnd != 0) hash ^= MaintainEnd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Port);
      }
      if (Occupied != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Occupied);
      }
      if (Capacity != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Capacity);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Desc);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Status);
      }
      if (OpenningTime != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(OpenningTime);
      }
      if (MaintainStart != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaintainStart);
      }
      if (MaintainEnd != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MaintainEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Occupied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occupied);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (OpenningTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenningTime);
      }
      if (MaintainStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainStart);
      }
      if (MaintainEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainEnd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(game_service_t other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Occupied != 0) {
        Occupied = other.Occupied;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.OpenningTime != 0) {
        OpenningTime = other.OpenningTime;
      }
      if (other.MaintainStart != 0) {
        MaintainStart = other.MaintainStart;
      }
      if (other.MaintainEnd != 0) {
        MaintainEnd = other.MaintainEnd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadUInt32();
            break;
          }
          case 40: {
            Occupied = input.ReadUInt32();
            break;
          }
          case 48: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 58: {
            Desc = input.ReadString();
            break;
          }
          case 64: {
            Status = input.ReadUInt32();
            break;
          }
          case 72: {
            OpenningTime = input.ReadUInt32();
            break;
          }
          case 80: {
            MaintainStart = input.ReadUInt32();
            break;
          }
          case 88: {
            MaintainEnd = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class lobby_t : pb::IMessage<lobby_t> {
    private static readonly pb::MessageParser<lobby_t> _parser = new pb::MessageParser<lobby_t>(() => new lobby_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<lobby_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t(lobby_t other) : this() {
      version_ = other.version_;
      ip_ = other.ip_;
      port_ = other.port_;
      occupied_ = other.occupied_;
      capacity_ = other.capacity_;
      desc_ = other.desc_;
      bulletin_ = other.bulletin_;
      status_ = other.status_;
      maintainStart_ = other.maintainStart_;
      maintainEnd_ = other.maintainEnd_;
      timeZone_ = other.timeZone_;
      games_ = other.games_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t Clone() {
      return new lobby_t(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "occupied" field.</summary>
    public const int OccupiedFieldNumber = 4;
    private uint occupied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occupied {
      get { return occupied_; }
      set {
        occupied_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 5;
    private uint capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bulletin" field.</summary>
    public const int BulletinFieldNumber = 7;
    private string bulletin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bulletin {
      get { return bulletin_; }
      set {
        bulletin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "maintain_start" field.</summary>
    public const int MaintainStartFieldNumber = 9;
    private uint maintainStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainStart {
      get { return maintainStart_; }
      set {
        maintainStart_ = value;
      }
    }

    /// <summary>Field number for the "maintain_end" field.</summary>
    public const int MaintainEndFieldNumber = 10;
    private uint maintainEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainEnd {
      get { return maintainEnd_; }
      set {
        maintainEnd_ = value;
      }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 11;
    private uint timeZone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "games" field.</summary>
    public const int GamesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Proto3.game_service_t> _repeated_games_codec
        = pb::FieldCodec.ForMessage(98, global::Proto3.game_service_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.game_service_t> games_ = new pbc::RepeatedField<global::Proto3.game_service_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.game_service_t> Games {
      get { return games_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as lobby_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(lobby_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Occupied != other.Occupied) return false;
      if (Capacity != other.Capacity) return false;
      if (Desc != other.Desc) return false;
      if (Bulletin != other.Bulletin) return false;
      if (Status != other.Status) return false;
      if (MaintainStart != other.MaintainStart) return false;
      if (MaintainEnd != other.MaintainEnd) return false;
      if (TimeZone != other.TimeZone) return false;
      if(!games_.Equals(other.games_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Occupied != 0) hash ^= Occupied.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Bulletin.Length != 0) hash ^= Bulletin.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (MaintainStart != 0) hash ^= MaintainStart.GetHashCode();
      if (MaintainEnd != 0) hash ^= MaintainEnd.GetHashCode();
      if (TimeZone != 0) hash ^= TimeZone.GetHashCode();
      hash ^= games_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (Occupied != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Occupied);
      }
      if (Capacity != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Capacity);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (Bulletin.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Bulletin);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Status);
      }
      if (MaintainStart != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MaintainStart);
      }
      if (MaintainEnd != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaintainEnd);
      }
      if (TimeZone != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TimeZone);
      }
      games_.WriteTo(output, _repeated_games_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Occupied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occupied);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Bulletin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bulletin);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (MaintainStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainStart);
      }
      if (MaintainEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainEnd);
      }
      if (TimeZone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeZone);
      }
      size += games_.CalculateSize(_repeated_games_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(lobby_t other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Occupied != 0) {
        Occupied = other.Occupied;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Bulletin.Length != 0) {
        Bulletin = other.Bulletin;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.MaintainStart != 0) {
        MaintainStart = other.MaintainStart;
      }
      if (other.MaintainEnd != 0) {
        MaintainEnd = other.MaintainEnd;
      }
      if (other.TimeZone != 0) {
        TimeZone = other.TimeZone;
      }
      games_.Add(other.games_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
          case 32: {
            Occupied = input.ReadUInt32();
            break;
          }
          case 40: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
          case 58: {
            Bulletin = input.ReadString();
            break;
          }
          case 64: {
            Status = input.ReadUInt32();
            break;
          }
          case 72: {
            MaintainStart = input.ReadUInt32();
            break;
          }
          case 80: {
            MaintainEnd = input.ReadUInt32();
            break;
          }
          case 88: {
            TimeZone = input.ReadUInt32();
            break;
          }
          case 98: {
            games_.AddEntriesFrom(input, _repeated_games_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class pawn_t : pb::IMessage<pawn_t> {
    private static readonly pb::MessageParser<pawn_t> _parser = new pb::MessageParser<pawn_t>(() => new pawn_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pawn_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pawn_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pawn_t(pawn_t other) : this() {
      id_ = other.id_;
      color_ = other.color_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pawn_t Clone() {
      return new pawn_t(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private int color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pawn_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pawn_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Color != other.Color) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Color != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Color);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pawn_t other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Color = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class bunch_t : pb::IMessage<bunch_t> {
    private static readonly pb::MessageParser<bunch_t> _parser = new pb::MessageParser<bunch_t>(() => new bunch_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bunch_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t(bunch_t other) : this() {
      type_ = other.type_;
      pawns_ = other.pawns_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t Clone() {
      return new bunch_t(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto3.pb_enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pawns" field.</summary>
    public const int PawnsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_pawns_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> pawns_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Pawns {
      get { return pawns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bunch_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bunch_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!pawns_.Equals(other.pawns_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= pawns_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      pawns_.WriteTo(output, _repeated_pawns_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += pawns_.CalculateSize(_repeated_pawns_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bunch_t other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      pawns_.Add(other.pawns_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            pawns_.AddEntriesFrom(input, _repeated_pawns_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class game_data : pb::IMessage<game_data> {
    private static readonly pb::MessageParser<game_data> _parser = new pb::MessageParser<game_data>(() => new game_data());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<game_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_data(game_data other) : this() {
      deck_ = other.deck_.Clone();
      discards_ = other.discards_.Clone();
      bunch_ = other.bunch_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_data Clone() {
      return new game_data(this);
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_deck_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> deck_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Deck {
      get { return deck_; }
    }

    /// <summary>Field number for the "discards" field.</summary>
    public const int DiscardsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_discards_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> discards_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Discards {
      get { return discards_; }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_bunch_codec
        = pb::FieldCodec.ForMessage(26, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> bunch_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Bunch {
      get { return bunch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as game_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(game_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deck_.Equals(other.deck_)) return false;
      if(!discards_.Equals(other.discards_)) return false;
      if(!bunch_.Equals(other.bunch_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deck_.GetHashCode();
      hash ^= discards_.GetHashCode();
      hash ^= bunch_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deck_.WriteTo(output, _repeated_deck_codec);
      discards_.WriteTo(output, _repeated_discards_codec);
      bunch_.WriteTo(output, _repeated_bunch_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deck_.CalculateSize(_repeated_deck_codec);
      size += discards_.CalculateSize(_repeated_discards_codec);
      size += bunch_.CalculateSize(_repeated_bunch_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(game_data other) {
      if (other == null) {
        return;
      }
      deck_.Add(other.deck_);
      discards_.Add(other.discards_);
      bunch_.Add(other.bunch_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            deck_.AddEntriesFrom(input, _repeated_deck_codec);
            break;
          }
          case 18:
          case 16: {
            discards_.AddEntriesFrom(input, _repeated_discards_codec);
            break;
          }
          case 26: {
            bunch_.AddEntriesFrom(input, _repeated_bunch_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgBase : pb::IMessage<MsgBase> {
    private static readonly pb::MessageParser<MsgBase> _parser = new pb::MessageParser<MsgBase>(() => new MsgBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase(MsgBase other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase Clone() {
      return new MsgBase(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBase other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 	Client	---------------- Login
  /// </summary>
  public sealed partial class MsgCSLogin : pb::IMessage<MsgCSLogin> {
    private static readonly pb::MessageParser<MsgCSLogin> _parser = new pb::MessageParser<MsgCSLogin>(() => new MsgCSLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCSLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCSLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCSLogin(MsgCSLogin other) : this() {
      mid_ = other.mid_;
      version_ = other.version_;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCSLogin Clone() {
      return new MsgCSLogin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Proto3.user_t user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.user_t User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCSLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCSLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCSLogin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Proto3.user_t();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Proto3.user_t();
            }
            input.ReadMessage(user_);
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgSCLogin : pb::IMessage<MsgSCLogin> {
    private static readonly pb::MessageParser<MsgSCLogin> _parser = new pb::MessageParser<MsgSCLogin>(() => new MsgSCLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgSCLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSCLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSCLogin(MsgSCLogin other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      version_ = other.version_;
      key_ = other.key_;
      session_ = other.session_;
      ip_ = other.ip_;
      port_ = other.port_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSCLogin Clone() {
      return new MsgSCLogin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 5;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 6;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 7;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 8;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgSCLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgSCLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Version != other.Version) return false;
      if (Key != other.Key) return false;
      if (Session != other.Session) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Key != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Key);
      }
      if (Session != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Session);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Port);
      }
      if (Result != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgSCLogin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Key = input.ReadUInt32();
            break;
          }
          case 40: {
            Session = input.ReadUInt64();
            break;
          }
          case 50: {
            Ip = input.ReadString();
            break;
          }
          case 56: {
            Port = input.ReadUInt32();
            break;
          }
          case 64: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 	Client	---------------- Lobby
  /// </summary>
  public sealed partial class MsgCLEnter : pb::IMessage<MsgCLEnter> {
    private static readonly pb::MessageParser<MsgCLEnter> _parser = new pb::MessageParser<MsgCLEnter>(() => new MsgCLEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCLEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLEnter(MsgCLEnter other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      version_ = other.version_;
      key_ = other.key_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLEnter Clone() {
      return new MsgCLEnter(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 5;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCLEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCLEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Version != other.Version) return false;
      if (Key != other.Key) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Key != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Key);
      }
      if (Session != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCLEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Key = input.ReadUInt32();
            break;
          }
          case 40: {
            Session = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgLCEnter : pb::IMessage<MsgLCEnter> {
    private static readonly pb::MessageParser<MsgLCEnter> _parser = new pb::MessageParser<MsgLCEnter>(() => new MsgLCEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLCEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCEnter(MsgLCEnter other) : this() {
      mid_ = other.mid_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCEnter Clone() {
      return new MsgLCEnter(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Proto3.player_t player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.player_t Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 3;
    private global::Proto3.lobby_t lobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.lobby_t Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLCEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLCEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (!object.Equals(Lobby, other.Lobby)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (lobby_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Lobby);
      }
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLCEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Proto3.player_t();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Proto3.lobby_t();
        }
        Lobby.MergeFrom(other.Lobby);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::Proto3.player_t();
            }
            input.ReadMessage(player_);
            break;
          }
          case 26: {
            if (lobby_ == null) {
              lobby_ = new global::Proto3.lobby_t();
            }
            input.ReadMessage(lobby_);
            break;
          }
          case 32: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 	Client	---------------- Lobby
  /// </summary>
  public sealed partial class MsgCNEnter : pb::IMessage<MsgCNEnter> {
    private static readonly pb::MessageParser<MsgCNEnter> _parser = new pb::MessageParser<MsgCNEnter>(() => new MsgCNEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEnter(MsgCNEnter other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      version_ = other.version_;
      key_ = other.key_;
      session_ = other.session_;
      service_ = other.service_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEnter Clone() {
      return new MsgCNEnter(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 5;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 6;
    private global::Proto3.pb_enum service_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Version != other.Version) return false;
      if (Key != other.Key) return false;
      if (Session != other.Session) return false;
      if (Service != other.Service) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (Service != 0) hash ^= Service.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Key != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Key);
      }
      if (Session != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Session);
      }
      if (Service != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Service);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (Service != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Service);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.Service != 0) {
        Service = other.Service;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Key = input.ReadUInt32();
            break;
          }
          case 40: {
            Session = input.ReadUInt64();
            break;
          }
          case 48: {
            service_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCEnter : pb::IMessage<MsgNCEnter> {
    private static readonly pb::MessageParser<MsgNCEnter> _parser = new pb::MessageParser<MsgNCEnter>(() => new MsgNCEnter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEnter(MsgNCEnter other) : this() {
      mid_ = other.mid_;
      GameInfo = other.gameInfo_ != null ? other.GameInfo.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEnter Clone() {
      return new MsgNCEnter(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game_info" field.</summary>
    public const int GameInfoFieldNumber = 2;
    private global::Proto3.game_t gameInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.game_t GameInfo {
      get { return gameInfo_; }
      set {
        gameInfo_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(GameInfo, other.GameInfo)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (gameInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameInfo);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (gameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCEnter other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.gameInfo_ != null) {
        if (gameInfo_ == null) {
          gameInfo_ = new global::Proto3.game_t();
        }
        GameInfo.MergeFrom(other.GameInfo);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (gameInfo_ == null) {
              gameInfo_ = new global::Proto3.game_t();
            }
            input.ReadMessage(gameInfo_);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNCreate : pb::IMessage<MsgCNCreate> {
    private static readonly pb::MessageParser<MsgCNCreate> _parser = new pb::MessageParser<MsgCNCreate>(() => new MsgCNCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate(MsgCNCreate other) : this() {
      mid_ = other.mid_;
      rule_ = other.rule_;
      category_ = other.category_;
      key_ = other.key_;
      robot_ = other.robot_;
      parameter_ = other.parameter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate Clone() {
      return new MsgCNCreate(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 2;
    private global::Proto3.pb_enum rule_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Rule {
      get { return rule_; }
      set {
        rule_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 3;
    private global::Proto3.pb_enum category_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "robot" field.</summary>
    public const int RobotFieldNumber = 5;
    private uint robot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Robot {
      get { return robot_; }
      set {
        robot_ = value;
      }
    }

    /// <summary>Field number for the "parameter" field.</summary>
    public const int ParameterFieldNumber = 6;
    private uint parameter_;
    /// <summary>
    /// anti
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Parameter {
      get { return parameter_; }
      set {
        parameter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Rule != other.Rule) return false;
      if (Category != other.Category) return false;
      if (Key != other.Key) return false;
      if (Robot != other.Robot) return false;
      if (Parameter != other.Parameter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Rule != 0) hash ^= Rule.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Robot != 0) hash ^= Robot.GetHashCode();
      if (Parameter != 0) hash ^= Parameter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Rule != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Rule);
      }
      if (Category != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Category);
      }
      if (Key != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Key);
      }
      if (Robot != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Robot);
      }
      if (Parameter != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Parameter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Rule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rule);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (Robot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Robot);
      }
      if (Parameter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Parameter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNCreate other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Rule != 0) {
        Rule = other.Rule;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Robot != 0) {
        Robot = other.Robot;
      }
      if (other.Parameter != 0) {
        Parameter = other.Parameter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            rule_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 24: {
            category_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 32: {
            Key = input.ReadUInt32();
            break;
          }
          case 40: {
            Robot = input.ReadUInt32();
            break;
          }
          case 48: {
            Parameter = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCCreate : pb::IMessage<MsgNCCreate> {
    private static readonly pb::MessageParser<MsgNCCreate> _parser = new pb::MessageParser<MsgNCCreate>(() => new MsgNCCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate(MsgNCCreate other) : this() {
      mid_ = other.mid_;
      gameId_ = other.gameId_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate Clone() {
      return new MsgNCCreate(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private uint gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (GameId != other.GameId) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameId);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCCreate other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            GameId = input.ReadUInt32();
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNJoin : pb::IMessage<MsgCNJoin> {
    private static readonly pb::MessageParser<MsgCNJoin> _parser = new pb::MessageParser<MsgCNJoin>(() => new MsgCNJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin(MsgCNJoin other) : this() {
      mid_ = other.mid_;
      key_ = other.key_;
      gameId_ = other.gameId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin Clone() {
      return new MsgCNJoin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private uint gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Key != other.Key) return false;
      if (GameId != other.GameId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Key);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNJoin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            Key = input.ReadUInt32();
            break;
          }
          case 24: {
            GameId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCJoin : pb::IMessage<MsgNCJoin> {
    private static readonly pb::MessageParser<MsgNCJoin> _parser = new pb::MessageParser<MsgNCJoin>(() => new MsgNCJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin(MsgNCJoin other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin Clone() {
      return new MsgNCJoin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCJoin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCStart : pb::IMessage<MsgNCStart> {
    private static readonly pb::MessageParser<MsgNCStart> _parser = new pb::MessageParser<MsgNCStart>(() => new MsgNCStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCStart(MsgNCStart other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCStart Clone() {
      return new MsgNCStart(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCStart other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDiscard : pb::IMessage<MsgCNDiscard> {
    private static readonly pb::MessageParser<MsgCNDiscard> _parser = new pb::MessageParser<MsgCNDiscard>(() => new MsgCNDiscard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDiscard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard(MsgCNDiscard other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard Clone() {
      return new MsgCNDiscard(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDiscard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDiscard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDiscard other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDiscard : pb::IMessage<MsgNCDiscard> {
    private static readonly pb::MessageParser<MsgNCDiscard> _parser = new pb::MessageParser<MsgNCDiscard>(() => new MsgNCDiscard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDiscard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard(MsgNCDiscard other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard Clone() {
      return new MsgNCDiscard(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDiscard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDiscard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDiscard other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNMeld : pb::IMessage<MsgCNMeld> {
    private static readonly pb::MessageParser<MsgCNMeld> _parser = new pb::MessageParser<MsgCNMeld>(() => new MsgCNMeld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNMeld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld(MsgCNMeld other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld Clone() {
      return new MsgCNMeld(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNMeld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNMeld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNMeld other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCMeld : pb::IMessage<MsgNCMeld> {
    private static readonly pb::MessageParser<MsgNCMeld> _parser = new pb::MessageParser<MsgNCMeld>(() => new MsgNCMeld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCMeld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld(MsgNCMeld other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld Clone() {
      return new MsgNCMeld(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCMeld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCMeld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCMeld other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDismissSync : pb::IMessage<MsgCNDismissSync> {
    private static readonly pb::MessageParser<MsgCNDismissSync> _parser = new pb::MessageParser<MsgCNDismissSync>(() => new MsgCNDismissSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDismissSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync(MsgCNDismissSync other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync Clone() {
      return new MsgCNDismissSync(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDismissSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDismissSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDismissSync other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDismissSync : pb::IMessage<MsgNCDismissSync> {
    private static readonly pb::MessageParser<MsgNCDismissSync> _parser = new pb::MessageParser<MsgNCDismissSync>(() => new MsgNCDismissSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDismissSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync(MsgNCDismissSync other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync Clone() {
      return new MsgNCDismissSync(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDismissSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDismissSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDismissSync other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDismissAck : pb::IMessage<MsgCNDismissAck> {
    private static readonly pb::MessageParser<MsgCNDismissAck> _parser = new pb::MessageParser<MsgCNDismissAck>(() => new MsgCNDismissAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDismissAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck(MsgCNDismissAck other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck Clone() {
      return new MsgCNDismissAck(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDismissAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDismissAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDismissAck other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDismissAck : pb::IMessage<MsgNCDismissAck> {
    private static readonly pb::MessageParser<MsgNCDismissAck> _parser = new pb::MessageParser<MsgNCDismissAck>(() => new MsgNCDismissAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDismissAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck(MsgNCDismissAck other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck Clone() {
      return new MsgNCDismissAck(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDismissAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDismissAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDismissAck other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCSettle : pb::IMessage<MsgNCSettle> {
    private static readonly pb::MessageParser<MsgNCSettle> _parser = new pb::MessageParser<MsgNCSettle>(() => new MsgNCSettle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle(MsgNCSettle other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle Clone() {
      return new MsgNCSettle(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCSettle other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCFinish : pb::IMessage<MsgNCFinish> {
    private static readonly pb::MessageParser<MsgNCFinish> _parser = new pb::MessageParser<MsgNCFinish>(() => new MsgNCFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish(MsgNCFinish other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish Clone() {
      return new MsgNCFinish(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private uint mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCFinish other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mid = input.ReadUInt32();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
