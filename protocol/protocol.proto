syntax = "proto3";

//import "google/protobuf/unittest_import.proto";

package proto3;

// Protos optimized for SPEED use a strict superset of the generated code
// of equivalent ones optimized for CODE_SIZE, so we should optimize all our
// tests for speed unless explicitly testing code size optimization.
// option optimize_for = SPEED;
option optimize_for = LITE_RUNTIME;

// -------- data structures --------
enum pb_enum{
option allow_alias      =true;

UNKNOWN                 =0;
NONE                    =0;
SUCCEESS                =0;

// device type
DEV_PC                  =0;
DEV_PS4                 =1;
DEV_XBOX                =2;
DEV_IOS                 =3;
DEV_ANDROID             =4;
DEV_WINPHONE            =5;

// game service
GAME_CARD               =10;
GAME_CHESS              =11;

// game rule
RULE_DDZ                =20;
RULE_PDK                =21;
RULE_PHZ                =22;

// game category
CATEGORY_NORMAL         =50;
CATEGORY_EASY           =51;
CATEGORY_HARD           =52;

// game operation
OP_PASS                 =0;
OP_DISCARD              =1;

// achievement
ACHV_BOMB               =10;
ACHV_HEAVEN             =10;
ACHV_HELL               =10;

// game using
DEF_MAX_NODES           =1000;
DEF_MAX_GAMES_PER_NODE  =100000;

// error
ERR_FAILED              =100;
ERR_CANCELLED           =101;
ERR_PROTOCOL            =102;
ERR_PARAM               =103;
ERR_DUPLICATED          =104;
ERR_UNKNOWN             =999;
};

message user_t{

string uid				=1;
uint32 flag             =2;
pb_enum dev_type        =3;
string account			=4;
string name				=5;
string pswd				=6;
uint32 gender			=7;
uint32 age              =8;
string udid				=9;
};

message player_t{

string uid				=1;
uint32 pid              =2;
uint32 level            =3;
uint32 xp               =4;
uint32 currency         =5;
uint32 energy           =6;
repeated win_t wins     =7;
repeated achv_t achvs   =8;
};

message win_t{

string uid				=1;
uint32 gid              =2;
uint32 win              =3;
uint32 lose             =4;
uint32 draw             =5;
uint32 score            =6;
};

message achv_t{

pb_enum type            =1;
string name             =2;
uint32 value            =3;
};

message game_service_t{

uint32 id               = 1;
uint32 version          = 2;
string ip               = 3;
uint32 port             = 4;
uint32 occupied         = 5;
uint32 capacity         = 6;
string desc             = 7;
uint32 status           = 8;
uint32 openning_time    = 9;
uint32 maintain_start   = 10;
uint32 maintain_end     = 11;
};

message lobby_t{

uint32 version          = 1;
string ip               = 2;
uint32 port             = 3;
uint32 occupied         = 4;
uint32 capacity         = 5;
string desc             = 6;
string bulletin         = 7;
uint32 status           = 8;
uint32 maintain_start   = 9;
uint32 maintain_end     = 10;
uint32 time_zone        = 11;
repeated game_service_t games  =12;
};

message pawn_t{

uint32 id               =1;
uint32 color            =2;
uint32 value            =3;
};

message bunch_t{

pb_enum type            =1;
uint32 pos              =2;
repeated uint32 pawns   =3;
};

message game_data_t{

repeated uint32 hands   =1;
repeated uint32 discards=2;
repeated bunch_t bunch  =3;
};
// -------- messages --------
enum pb_msg{

MSG_INVALID             =0;
MSG_BEGIN               =1000;
MSG_RAW                 =1001;

//Client --  Login
MSG_CS_BEGIN            =2000;
MSG_CS_LOGIN            =2001;
MSG_SC_LOGIN            =2002;

MSG_CS_END              =3999;
//Client --  Lobby
MSG_CL_BEGIN            =4000;
MSG_CL_ENTER            =4001;
MSG_LC_ENTER            =4002;
MSG_LC_EXIT             =4003;

MSG_CL_END              =5999;
//Client --  Node
MSG_CN_BEGIN            =6000;
MSG_CN_ENTER            =6001;
MSG_NC_ENTER            =6002;
MSG_CN_CREATE           =6010;
MSG_NC_CREATE           =6011;
MSG_CN_JOIN             =6012;
MSG_NC_JOIN             =6013;
MSG_NC_START            =6020;
MSG_CN_DISCARD          =6021;
MSG_NC_DISCARD          =6022;
MSG_CN_MELD             =6023;
MSG_NC_MELD             =6024;
MSG_NC_SETTLE           =6025;
MSG_NC_FINISH           =6026;
MSG_CN_DISMISS_SYNC     =6030;
MSG_NC_DISMISS_SYNC     =6031;
MSG_CN_DISMISS_ACK      =6032;
MSG_NC_DISMISS_ACK      =6033;
MSG_CN_STATS            =6080;

MSG_CN_END              =6999;
MSG_END                 =9999;
};

message MsgBase{
pb_msg mid              =1;
};
//	Client	 --  Login
message MsgCSLogin{

pb_msg mid				=1;
uint32 version          =3;
user_t user             =2;
};

message MsgSCLogin{

pb_msg mid				=1;
string uid				=2;
uint32 version			=3;
uint64 session          =4;
string ip				=5;
uint32 port             =6;
pb_enum result			=7;
};

//	Client	 --  Lobby
message MsgCLEnter{

pb_msg mid				=1;
string uid				=2;
uint32 version			=3;
uint64 session          =4;
};

message MsgLCEnter{

pb_msg mid				=1;
uint32 key              =2;
player_t player         =3;
lobby_t lobby           =4;
pb_enum result			=5;
};

//	Client	 --  Node
message MsgCNEnter{

pb_msg mid				=1;
string uid				=2;
uint32 version			=3;
uint64 session          =4;
pb_enum service         =5;
};

message MsgNCEnter{

pb_msg mid				=1;
player_t player         =2;
pb_enum result			=3;
};

message MsgCNCreate{

pb_msg mid              =1;
pb_enum rule            =2;
pb_enum category        =3;
uint32 robot            =4;
uint32 parameter        =5; //anti
};

message MsgNCCreate{

pb_msg mid				=1;
uint32 game_id			=2;
pb_enum result			=3;
};

message MsgCNJoin{

pb_msg mid              =1;
uint32 game_id			=2;
};

message MsgNCJoin{

pb_msg mid				=1;
pb_enum result			=2;
};

message MsgNCStart{

pb_msg mid              =1;
uint32 banker           =2;
uint32 pos              =3;
uint32 ante             =4;
uint32 multiple         =5;
repeated pawn_t cards   =6;
repeated uint32 hands   =7;
repeated uint32 bottom  =8;
repeated uint32 count   =9;
pb_enum result			=10;
};

message MsgCNDiscard{

pb_msg mid				=1;
bunch_t bunch           =2;
};

message MsgNCDiscard{

pb_msg mid				=1;
bunch_t bunch           =2;
pb_enum result			=3;
};

message MsgCNMeld{

pb_msg mid				=1;
};

message MsgNCMeld{

pb_msg mid				=1;
pb_enum result			=2;
};

message MsgCNDismissSync{

pb_msg mid				=1;
};

message MsgNCDismissSync{

pb_msg mid				=1;
uint32 pos              =2;
pb_enum result			=3;
};

message MsgCNDismissAck{

pb_msg mid				=1;
};

message MsgNCDismissAck{

pb_msg mid				=1;
uint32 pos              =2;
pb_enum result			=3;
};

message MsgNCSettle{

pb_msg mid				=1;
uint32 winner           =2;
repeated player_t play  =3;
repeated bunch_t hands  =4;
pb_enum result			=5;
};

message MsgNCFinish{

pb_msg mid				=1;
repeated player_t play  =2;
pb_enum result			=3;
};

message MsgCNStats{

pb_msg mid				=1;
string key              =2;
string value            =3;
};
