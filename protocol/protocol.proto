syntax = "proto3";

//import "google/protobuf/unittest_import.proto";

package proto3;

// Protos optimized for SPEED use a strict superset of the generated code
// of equivalent ones optimized for CODE_SIZE, so we should optimize all our
// tests for speed unless explicitly testing code size optimization.
// option optimize_for = SPEED;
option optimize_for = LITE_RUNTIME;

// ----------------------------------------------------------------
// enum
// ----------------------------------------------------------------
enum pb_enum{
option allow_alias      =true;

UNKNOWN                 =0;
NONE                    =0;
SUCCEESS                =0;

// device type
DEV_PC                  =0;
DEV_PS4                 =1;
DEV_XBOX                =2;
DEV_IOS                 =3;
DEV_ANDROID             =4;
DEV_WINPHONE            =5;

// game rule
GAME_PHZ                =10;
GAME_DDZ                =20;
GAME_PDK                =21;

GAME_MJ                 =50;
GAME_MJ_AOMEN           =51;
GAME_MJ_BEIJING         =52;
GAME_MJ_CHANGCHUN       =53;
GAME_MJ_CHANGSHA        =54;
GAME_MJ_CHENGDU         =55;
GAME_MJ_CHONGQIN        =56;
GAME_MJ_FUZHOU          =57;
GAME_MJ_GUANGZHOU       =58;
GAME_MJ_GUIYANG         =59;
GAME_MJ_HAERBIN         =60;
GAME_MJ_HAIKOU          =61;
GAME_MJ_HANGZHOU        =62;
GAME_MJ_HEFEI           =63;
GAME_MJ_HUHEHAOTE       =64;
GAME_MJ_JINAN           =65;
GAME_MJ_KUNMING         =66;
GAME_MJ_LANZHOU         =67;
GAME_MJ_LASA            =68;
GAME_MJ_NANCHANG        =69;
GAME_MJ_NANJING         =70;
GAME_MJ_NANNING         =71;
GAME_MJ_SHANGHAI        =72;
GAME_MJ_SHENGYANG       =73;
GAME_MJ_SHIJIAZHUANG    =74;
GAME_MJ_TAIBEI          =75;
GAME_MJ_TAIYUAN         =76;
GAME_MJ_TIANJIN         =77;
GAME_MJ_WUHAN           =78;
GAME_MJ_WULUMUQI        =79;
GAME_MJ_XIAN            =80;
GAME_MJ_XIANGGANG       =81;
GAME_MJ_XINING          =82;
GAME_MJ_YINCHUAN        =83;
GAME_MJ_ZHENGZHOU       =84;

// game options
OPTION_ROUND            =10;
OPTION_ANTI             =11;
OPTION_CATEGORY         =12;
OPTION_DEFINED_CARDS    =13;

// game category
CATEGORY_EASY           =10;
CATEGORY_NORMAL         =11;
CATEGORY_HARD           =12;

PHZ_SY                  =0;	//邵阳字牌
PHZ_SYBP                =1;	//邵阳剥皮
PHZ_LD                  =2;//娄底放炮

PHZ_HH                  =3;//怀化红拐弯
PHZ_CD_QMT              =4;	//常德全名堂
PHZ_CD_HHD              =5;	//常德红黑点

PHZ_CS                  =6;//长沙
PHZ_XX_GHZ              =7;	//湘乡告胡子
PHZ_HY                  =8;//衡阳六条枪

PHZ_YZ_SBW              =9; //永州双霸王
PHZ_PEGHZ               =10;	//碰胡子
PHZ_SC_EQS              =11; //四川二七十

PHZ_CZ                  =12;//郴州跑胡子
PHZ_GX                  =13;//广西跑胡子

PHZ_MAX                 =14;

DDZ_CLASIC              =20;
DDZ_FOR4                =21;

MJ_SICHUAN              =40;
MJ_GUANGDONG            =41;
MJ_HUNAN                =42;
MJ_HAINAN               =43;
MJ_ZHEJIANG             =44;
MJ_NANJING              =45;
MJ_TIANJIN              =46;
MJ_WUHAN                =47;
MJ_YUNNAN               =48;
MJ_FUJIAN               =49;
MJ_XUEZHAN              =50;

// game operation
OP_PASS                 =0;
OP_DISCARD              =1;

// bunch type
BUNCH_INVALID           =10;
BUNCH_A                 =11;
BUNCH_AA                =12;
BUNCH_AAA               =13;
BUNCH_AAAA              =14;
BUNCH_AAAAB             =15;
BUNCH_AAAB              =16;
BUNCH_ABC               =17;

PHZ_AA                  =12;  //jiang
PHZ_ABC                 =18;  //ju,jiao
PHZ_BBB                 =20;	//peng  BB_B
PHZ_AAA                 =21;	//kan
PHZ_AAAwei              =22;	//wei   AA_A
PHZ_AAAchou             =23;	//chou wei  AAA_
PHZ_BBB_B               =24;	//pao
PHZ_BBBBdesk            =25;	//wei=>pao(desk pao)  AAA_A
PHZ_B4B3                =26;	//peng=>pao(desk pao)
PHZ_AAAAdesk            =27;	//desk ti   _AAAA
PHZ_AAAA                =28;	//ti
PHZ_AAAAstart           =29;	//startup ti    AAAA_

BUNCH_WIN               =100;

//WIN_Normal              =0; //ping hu
WIN_First               =1; //tian hu
WIN_Second              =2; //di hu
//WIN_Last                =3; //hai di hu
//WIN_Pair                =4; //dui hu
WIN_Middle              =5; //zhong zhang
WIN_MenFlush            =6; //men qing
WIN_Flush               =7; //qing yi se
//WIN_7Pair               =8; //7 dui
WIN_MajorPair           =9; //jiang dui
WIN_FlushPair           =10; //qing dui
WIN_Dragon7Pair         =11; //long 7 dui
WIN_19                  =12; //yao jiu
WIN_Flush7Pair          =13; //qing 7 dui
WIN_Major7Pair          =14; //jiang 7 dui
WIN_FlushDragon7Pair    =15; //qing long 7 dui
WIN_Flush19             =16; //qing 19

WIN_NORMAL =0           ;
WIN_TIAN                =1;	//天胡
WIN_DI                  =2;		//地胡
WIN_LAST                =3;	//海胡
WIN_TING                =4;	//听胡

WIN_13RED               =5;	//乌红
WIN_RED                 =6;	//红胡
WIN_BLACK               =7;	//黑胡
WIN_BIG                 =8;	//大胡
WIN_SMALL               =9;	//小胡

WIN_SINGLE              =10;	//点胡
WIN_PAIR                =11;	//对胡
WIN_MONKEY              =12;	//耍猴
WIN_YELLOW              =13;	//黄番
WIN_SELF                =14;	//自摸

WIN_30                  =15;		//30胡               =1;15
WIN_20                  =16;		//20胡
WIN_FIRE                =17;	//放炮
WIN_PLATE               =18;	//一块匾
WIN_2RED                =19;	//二比

WIN_3RED                =20;	//三比               =1;20
WIN_4RED                =21;	//四比
WIN_DOUBLE              =22;	//双飘    2RED_
WIN_10RED               =23;	//十红，针对湘乡

WIN_5FU                 =24;	//五福，碰胡子用
WIN_RUNDUAL             =25;//跑双
WIN_7PAIR               =26;	//小七对
WIN_DUALDRA             =27;//双龙
WIN_REPEAT              =28;	//连胡

WIN_MAX                 =29;

//碰胡子标示胡牌类型
WINWEI          =0;//偎胡
WINTI          =1;//提胡
WINSAND          =2;//三大胡
WINSID          =3;//四大胡
WINPENG          =4;//碰胡
WINWPAO          =5;//偎坎跑胡
WINPPAO          =6;//碰跑胡
WINPING          =7;//平胡
_WINMAX          =8;


// achievement
ACHV_BOMB               =10;
ACHV_HEAVEN             =11;
ACHV_HELL               =12;

// achievement key type
ACHV_KEY_POINT          =0;
ACHV_KEY_CHUNK          =1;
ACHV_KEY_SCORE          =2;
ACHV_KEY_MULTIPLE       =3;

// game using
DEF_MAX_NODES           =1000;
DEF_MAX_GAMES_PER_NODE  =100000;

// error
ERR_FAILED              =100;
ERR_CANCELLED           =101;
ERR_PROTOCOL            =102;
ERR_PARAM               =103;
ERR_DUPLICATED          =104;
ERR_NOTEXISTS           =105;
ERR_NOENOUGH            =106;
ERR_VERSION             =107;
ERR_SESSION             =108;
ERR_DB                  =109;
ERR_CHEAT               =110;
ERR_UNKNOWN             =999;
};

message key_value{
string key				=1;
string value            =2;
pb_enum ikey            =3;
int32 ivalue            =4;
}
// ----------------------------------------------------------------
// struct
// ----------------------------------------------------------------
message user_t{

string uid				=1;
int32 flag              =2;
pb_enum dev_type        =3;
string account			=4;
string name				=5;
string pswd				=6;
int32 gender			=7;
int32 age               =8;
string udid				=9;
};

message player_t{

string uid				=1;
uint32 pid              =2;
int32 level             =3;
int32 xp                =4;
int32 silver            =5;
int32 gold              =6;
int32 energy            =7;
repeated win_t wins     =8;
repeated achv_t achvs   =9;
};

message win_t{

string uid				=1;
int32 gid               =2;
int32 win               =3;
int32 lose              =4;
int32 draw              =5;
int32 score             =6;
};

message achv_t{

pb_enum type            =1;
string name             =2;
int32 key               =3;
int32 value             =4;
};

message game_t{

int32 rule              = 1;    //rule+category
int32 available         = 2;
int32 price             = 3;
int32 rounds            = 4;
int32 free              = 5;
int32 event             = 6;
string name             = 7;
string desc             = 8;
};

message lobby_t{

uint32 version          = 1;
string ip               = 2;
uint32 port             = 3;
int32 occupied          = 4;
int32 capacity          = 5;
string desc             = 6;
string bulletin         = 7;
int32 status            = 8;
uint32 maintain_start   = 9;
uint32 maintain_end     = 10;
uint32 time_zone        = 11;
repeated game_t games   =12;
};

message bunch_t{

pb_enum type            =1;
int32 pos               =2; //easy to use -1
repeated int32 pawns    =3;
repeated bunch_t child  =4; //to build bunch tree
};

message play_t{

player_t player         =1;
repeated int32 hands    =2;
repeated int32 discards =3;
repeated bunch_t bunch  =4;
int32 engagement        =5; //engagement parameter at startup
int32 win               =6; //win sequence,minus means lose
repeated int32 winby    =7; //others were win by me
int32 point             =8;
int32 chunk             =9;
int32 multiple          =10;
int32 score             =11;
int32 total             =12;
int32 seat              =13;
repeated achv_t achvs   =14;
};

message charge_t{
string phone            =1;
string uid              =2;
uint32 time             =3;
int32 amount            =4;
}

message replay_item{

int32 gameId            =1;
pb_enum gameCategory    =2;
int32 rounds            =3;
int32 max_round         =4;
repeated key_value total    =5; //total score [name,score]
repeated int32 round_scores =6; //size should be total.count * rounds
uint32 timestamp        =7;
}

message replay_data{

int32 gameId            =1;
int32 banker            =2;
int32 round             =3;
repeated int32 piles    =4;
repeated int32 bottom   =5;
repeated bunch_t hands  =6;
repeated int32 engage   =7;
repeated bunch_t ops    =8;
uint32 timestamp        =9;
}
// ----------------------------------------------------------------
// messages
// ----------------------------------------------------------------
enum pb_msg{

MSG_INVALID             =0;
MSG_BEGIN               =1000;
MSG_RAW                 =1001;

//Client --  Lobby
MSG_CL_BEGIN            =4000;
MSG_CL_LOGIN            =4001;  //odd for in,even for out
MSG_LC_LOGIN            =4002;
MSG_CL_LOBBY            =4003;
MSG_LC_LOBBY            =4004;
MSG_CL_REPLAYS          =4011;
MSG_LC_REPLAYS          =4012;
MSG_CL_REPLAY           =4013;
MSG_LC_REPLAY           =4014;
MSG_LC_EXIT             =4050;

MSG_CL_END              =4999;
//Client --  Charge
MSG_CP_BEGIN            =5000;
MSG_CP_LOGIN            =5001;
MSG_PC_LOGIN            =5002;
MSG_CP_ORDER            =5021;
MSG_PC_ORDER            =5022;
MSG_CP_VERIFY           =5023;
MSG_PC_VERIFY           =5024;
//deprecated
MSG_CH_REGISTER         =5003;
MSG_HC_REGISTER         =5004;
MSG_CH_CHARGE           =5005;
MSG_HC_CHARGE           =5006;
MSG_CH_QUERY            =5007;
MSG_HC_QUERY            =5008;
MSG_CH_FORGET           =5009;
MSG_HC_FORGET           =5010;
MSG_CH_RESET_PSWD       =5011;
MSG_HC_RESET_PSWD       =5012;

MSG_CP_END              =5999;
//Client --  Node
MSG_CN_BEGIN            =6000;
MSG_CN_CONNECT          =6001;
MSG_NC_CONNECT          =6002;
MSG_CN_REVIVE           =6003;
MSG_NC_REVIVE           =6004;

MSG_CN_CREATE           =6011;
MSG_NC_CREATE           =6012;
MSG_CN_JOIN             =6013;
MSG_NC_JOIN             =6014;
MSG_CN_DISMISS_SYNC     =6021;
MSG_NC_DISMISS_SYNC     =6022;
MSG_CN_DISMISS_ACK      =6023;
MSG_NC_DISMISS_ACK      =6024;

MSG_CN_READY            =6031;
MSG_NC_READY            =6032;
MSG_CN_ENGAGE           =6033;
MSG_NC_ENGAGE           =6034;
MSG_NC_DEAL             =6035;
MSG_NC_SETTLE           =6036;
MSG_NC_FINISH           =6038;

MSG_CN_DISCARD          =6051;
MSG_NC_DISCARD          =6052;
MSG_CN_MELD             =6053;
MSG_NC_MELD             =6054;
MSG_NC_DRAW             =6055;

//some special gameplay
MSG_NC_BEFORE_STARTUP   =6062;

MSG_CN_STATS            =6081;

MSG_CN_END              =6999;
MSG_END                 =9999;
};

message MsgBase{
pb_msg mid              =1;
};
// ----------------------------------------------------------------
// Lobby
message MsgCLLogin{

pb_msg mid				=1;
uint32 version          =3;
user_t user             =2;
};

message MsgLCLogin{

pb_msg mid				=1;
uint32 version			=2;
uint64 session          =3;
player_t player         =4;
string redir			=5; //redirection uri
string assets			=6; //assets uri
pb_enum result			=7;
};

message MsgCLLobby{

pb_msg mid				=1;
string uid				=2;
uint32 version			=3;
uint64 session          =4;
};

message MsgLCLobby{

pb_msg mid				=1;
lobby_t lobby           =2;
int32 key               =3;
pb_enum result			=4;
};

message MsgCLReplays{

pb_msg mid				=1;
string uid              =2;
uint64 session          =3;
};

message MsgLCReplays{

pb_msg mid                  =1;
repeated replay_item all    =2;
pb_enum result              =3;
};

message MsgCLReplay{

pb_msg mid				=1;
uint32 gameId           =2;
int32 round             =3;
uint64 session          =4;
};

message MsgLCReplay{

pb_msg mid				=1;
replay_data data        =2;
pb_enum result			=3;
};
// ----------------------------------------------------------------
// Payment
message MsgCPLogin{

pb_msg mid				=1;
uint32 version          =2;
user_t user             =3;
};

message MsgPCLogin{

pb_msg mid				=1;
uint32 version			=2;
uint64 session          =3;
player_t player         =4;
string redir			=5; //redirection uri
string assets			=6; //assets uri
pb_enum result			=7;
};

message MsgCPOrder{

pb_msg mid				=1;
uint64 session          =2;
uint32 amount           =3;
string uid              =4;
bool pkcs8              =5;
};

message MsgPCOrder{

pb_msg mid				=1;
string appScheme        =2;
string orderString      =3;
pb_enum result			=4;
};

message MsgCPVerify{

pb_msg mid				=1;
uint64 session          =2;
string app_id           =3;
string seller_id        =4;
string out_trade_no     =5;
uint32 total_amount     =6;
string uid              =7;
};

message MsgPCVerify{

pb_msg mid				=1;
player_t player         =2;
pb_enum result			=3;
};

//deprecated below
message MsgCHRegister{

pb_msg mid				=1;
string uid              =2;
string phone			=3;
string pswd             =4;
string name             =5;
string address			=6;
string idcard			=7;
string wechat			=8;
string alipay			=9;
string verifycode		=10;
};

message MsgHCRegister{

pb_msg mid				=1;
pb_enum result			=2;
};

message MsgCHCharge{

pb_msg mid				=1;
uint64 session          =2;
string uid              =3;
int32 amount            =4;
};

message MsgHCCharge{

pb_msg mid				=1;
pb_enum result			=5;
};

message MsgCHQuery{

pb_msg mid				=1;
uint64 session          =2;
string uid				=3;
};

message MsgHCQuery{

pb_msg mid				=1;
repeated charge_t log   =2;
pb_enum result			=3;
};
// ----------------------------------------------------------------
// Node
message MsgCNConnect{

pb_msg mid				=1;
string uid				=2;
uint32 version			=3;
uint64 session          =4;
};

message MsgNCConnect{

pb_msg mid				=1;
uint32 version			=2;
player_t player         =3;
pb_enum result			=4;
};

message MsgCNCreate{

pb_msg mid                  =1;
pb_enum game                =2;
repeated key_value options  =3; //anti,rounds
};

message MsgNCCreate{

pb_msg mid				=1;
int32 game_id			=2;
pb_enum result			=3;
};

message MsgCNJoin{

pb_msg mid              =1;
int32 game_id			=2;
};

message MsgNCJoin{

pb_msg mid              =1;
pb_enum game            =2;
pb_enum category        =3;
int32 max_round         =4;
repeated player_t players   =5;
pb_enum result          =6;
};

message MsgCNReady{

pb_msg mid              =1;
}

message MsgNCReady{

pb_msg mid              =1;
int32 pos               =2;
pb_enum result          =3;
}

message MsgCNRevive{

pb_msg mid				=1;
int32 game              =2;
uint64 session          =3;
};

message MsgNCRevive{

pb_msg mid				=1;
int32 round             =2;
int32 max_round         =3;
MsgNCDeal deal          =4;
repeated play_t play    =5;
pb_enum result			=6;
};

message MsgNCDeal{

pb_msg mid              =1;
int32 banker            =2;
int32 pos               =3;
int32 ante              =4;
int32 multiple          =5;
repeated int32 hands    =6;
repeated int32 bottom   =7;
repeated int32 count    =8; //hands count
int32 piles             =9; //cards in pile
pb_enum result			=10;
};

message MsgCNEngage{

pb_msg mid              =1;
int32 key               =2;
}

message MsgNCEngage{

pb_msg mid              =1;
repeated int32 keys     =2;
pb_enum result          =3;
}

message MsgCNDiscard{

pb_msg mid				=1;
bunch_t bunch           =2;
};

message MsgNCDiscard{

pb_msg mid				=1;
bunch_t bunch           =2;
pb_enum result			=3;
};

message MsgCNMeld{

pb_msg mid				=1;
bunch_t bunch           =2;
repeated bunch_t extra  =3;
};

message MsgNCMeld{

pb_msg mid				=1;
bunch_t bunch           =2;
int32 from              =3;
pb_enum result			=4;
};

message MsgNCDraw{

pb_msg mid				=1;
int32 pos               =2;
int32 card             =3;
};

message MsgCNDismissSync{

pb_msg mid				=1;
};

message MsgNCDismissSync{

pb_msg mid				=1;
int32 pos               =2;
pb_enum result			=3;
};

message MsgCNDismissAck{

pb_msg mid				=1;
pb_enum ops             =2;
};

message MsgNCDismissAck{

pb_msg mid				=1;
int32 pos               =2;
pb_enum result			=3;
};

message MsgNCSettle{

pb_msg mid				=1;
repeated play_t play    =2;
repeated int32 pile     =3;
pb_enum result			=4;
};

message MsgNCFinish{

pb_msg mid				=1;
repeated play_t play    =2;
pb_enum result			=3;
};

message MsgCNStats{

pb_msg mid				=1;
string key              =2;
string value            =3;
};

message MsgNcBeforeStartup{

pb_msg mid				=1;
repeated bunch_t bunch  =2;
pb_enum result			=3;
};
