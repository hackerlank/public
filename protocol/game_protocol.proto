syntax = "proto3";

//import "google/protobuf/unittest_import.proto";

package proto3;

// Protos optimized for SPEED use a strict superset of the generated code
// of equivalent ones optimized for CODE_SIZE, so we should optimize all our
// tests for speed unless explicitly testing code size optimization.
// option optimize_for = SPEED;
option optimize_for = LITE_RUNTIME;

// -------- data structures --------
enum pb_enum{
option allow_alias      =true;

UNKNOWN                 =0;
NONE                    =0;
SUCCEESS                =0;

// device type
DEV_PC                  =0;
DEV_PS4                 =1;
DEV_XBOX                =2;
DEV_IOS                 =3;
DEV_ANDROID             =4;
DEV_WINPHONE            =5;

// game service
GAME_CARD               =10;
GAME_CHESS              =11;

// game rule
RULE_DDZ                =20;
RULE_PDK                =21;
RULE_PHZ                =22;

// game category
CATEGORY_NORMAL         =50;
CATEGORY_EASY           =51;
CATEGORY_HARD           =52;

// achievement
ACHIEVEMENT_BEST        =10;

// error
ERR_FAILED              =100;
ERR_CANCELLED           =101;
ERR_PROTOCOL            =102;
ERR_PARAM               =103;
ERR_DUPLICATED          =104;
ERR_UNKNOWN             =999;
};

message user_t{

string uid				=1;
uint32 flag             =2;
pb_enum dev_type        =3;
string account			=4;
string name				=5;
string pswd				=6;
uint32 gender			=7;
uint32 age              =8;
string udid				=9;
};

message player_t{

string uid				=1;
uint32 pid              =2;
uint32 level            =3;
uint32 xp               =4;
uint32 currency         =5;
uint32 energy           =6;
repeated achievement_t achievements   =7;
};

message game_t{

string uid				=1;
uint32 gid              =2;
uint32 win              =3;
uint32 lose             =4;
uint32 draw             =5;
uint32 score            =6;
};

message achievement_t{

pb_enum type            =1;
string name             =2;
uint32 value            =3;
};

message game_service_t{

uint32 id               = 1;
uint32 version          = 2;
string ip               = 3;
uint32 port             = 4;
uint32 occupied         = 5;
uint32 capacity         = 6;
string desc             = 7;
uint32 status           = 8;
uint32 openning_time    = 9;
uint32 maintain_start   = 10;
uint32 maintain_end     = 11;
};

message lobby_t{

uint32 version          = 1;
string ip               = 2;
uint32 port             = 3;
uint32 occupied         = 4;
uint32 capacity         = 5;
string desc             = 6;
string bulletin         = 7;
uint32 status           = 8;
uint32 maintain_start   = 9;
uint32 maintain_end     = 10;
uint32 time_zone        = 11;
repeated game_service_t games  =12;
};

// -------- messages --------

message MsgBase{
uint32 mid              =1;
};
//	Client	---------------- Login
message MsgCSLogin{

uint32 mid				=1;
uint32 version          =3;
user_t user             =2;
};

message MsgSCLogin{

uint32 mid				=1;
string uid				=2;
uint32 version			=3;
uint32 key              =4;
uint64 session          =5;
string ip				=6;
uint32 port             =7;
pb_enum result			=8;
};

//	Client	---------------- Lobby
message MsgCLEnter{

uint32 mid				=1;
string uid				=2;
uint32 version			=3;
uint32 key              =4;
uint64 session          =5;
};

message MsgLCEnter{

uint32 mid				=1;
player_t player         =2;
lobby_t lobby           =3;
pb_enum result			=4;
};

//	Client	---------------- Lobby
message MsgCNEnter{

uint32 mid				=1;
string uid				=2;
uint32 version			=3;
uint32 key              =4;
uint64 session          =5;
pb_enum service         =6;
};

message MsgNCEnter{

uint32 mid				=1;
game_t game_info        =2;
pb_enum result			=3;
};

message MsgCNCreate{

uint32 mid                  =1;
pb_enum rule                =2;
pb_enum category            =3;
uint32 key                  =4;
uint32 robot                =5;
uint32 parameter            =6; //anti
};

message MsgNCCreate{

uint32 mid				=1;
uint32 game_id			=2;
pb_enum result			=3;
};

message MsgCNJoin{

uint32 mid              =1;
uint32 key              =2;
uint32 game_id			=3;
};

message MsgNCJoin{

uint32 mid				=1;
pb_enum result			=2;
};

message MsgNCStart{

uint32 mid              =1;
pb_enum result			=2;
};

message MsgCNDiscard{

uint32 mid				=1;
};

message MsgNCDiscard{

uint32 mid				=1;
pb_enum result			=2;
};

message MsgCNMeld{

uint32 mid				=1;
};

message MsgNCMeld{

uint32 mid				=1;
pb_enum result			=2;
};

message MsgCNDismissA{

uint32 mid				=1;
};

message MsgNCDismissA{

uint32 mid				=1;
pb_enum result			=2;
};

message MsgCNDismissB{

uint32 mid				=1;
};

message MsgNCDismissB{

uint32 mid				=1;
pb_enum result			=2;
};

message MsgNCSettle{

uint32 mid				=1;
pb_enum result			=2;
};

message MsgNCFinish{

uint32 mid				=1;
pb_enum result			=2;
};
