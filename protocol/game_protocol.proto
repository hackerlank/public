syntax = "proto3";

//import "google/protobuf/unittest_import.proto";

package proto3;

// Protos optimized for SPEED use a strict superset of the generated code
// of equivalent ones optimized for CODE_SIZE, so we should optimize all our
// tests for speed unless explicitly testing code size optimization.
// option optimize_for = SPEED;
option optimize_for = LITE_RUNTIME;

//  *** Data ---------------- Struct Define Begin *** 

enum AccountType{
	PC		=0;
	PS4		=1;
	XBOX	=2;
};

message ZoneInfo{
	uint32 id			= 1;
	uint32 version		= 2;
	string ip			= 3;
	uint32 port			= 4;
	uint32 occupied		= 5;
	uint32 capacity		= 6;
	string desc			= 7;
	uint32 status		= 8;				// 服务器状态 0 运行中 1 停机维护中
	uint32 timeZone		= 12;			// 服务器时区
	uint32 now			= 13;				// 服务器当前时间   
	uint32 openTime		= 9;			// 开服时间
	uint32 maintainStart= 10;	// 维护开始时间
	uint32 maintainEnd	= 11;	// 维护结束时间
};

message PlaceInfo{
	uint32 zid			= 1;	// zone
	uint32 nMapId		= 2;	// mapid
	float x				= 3;	// x
	float y				= 4;	// y              
	float z				= 5;	// z
	float Roll			= 6;	// roation x	Roll
	float Pitch			= 7;	// roation y	Pitch
	float Yaw			= 8;	// roation z	Yaw
	uint32 orientation	= 9;	// in degree
	float fMoveSpeed	= 10;	// CharacterMovement移动速度
	uint32 CHARACTER_STATE = 11;		// 角色状态定义(带动作的,同时只能存在一个),int值,可以到客户端CommonDefine.h查找对应状态
	uint32 CHARACTER_SUB_STATE	= 12;	// 角色子状态定义(CHARACTER_STATE的从属关系),int值,可以到客户端CommonDefine.h查找对应状态
	eMoveType moveType			= 13;	// 对应角色Character Movement
};

message PlayerInfo{			// 该服务器下的角色信息, 如果没有创建过角色该字段为空
	uint32 id	= 1;		// 多角色ID
	string uid	= 4;		// user id
	string name = 2;		// 角色名
	uint32 level = 3;		// 角色等级     
	uint32 energy = 5;				// 角色当前体力
	uint32 energyTime = 6;			// 最近一次更新体力的时间
	//uint32 energyLimit = 7;		// 玩家当前体力上限
	uint32 exp = 9;				// 玩家当前经验
	uint32 gold = 10;				// 玩家当前钻石
	uint32 money = 11;				// 玩家当前金币
	uint32 honor = 12;				// 玩家当前荣誉
	PlaceInfo lastPlace = 13;

	string CurrentTitle = 21;		// 当前称号
	string ArenaRank = 22;			// 竞技场军衔
	string ArenaHonor = 23;			// 竞技场荣誉值	
	uint32 HuashanRanking = 25;		// 华山论剑排名
	PlayerExtraInfo extra	= 30;
	
	uint32 HP = 50;					// 角色当前生命
	uint32 MP = 51;					// 角色当前魔法
	uint32 MaxHP = 52;				// 角色最大生命
	uint32 MaxMP = 53;				// 角色最大魔法

	uint32 MartialclubID = 54;			// 武馆ID
	uint32 nBreak = 55;					// 基础打断值
};

message PlayerExtraInfo{				// 该服务器下的角色信息, 如果没有创建过角色该字段为空
	message BattleSkill{			//上阵技能
	};
	repeated BattleSkill battleskill = 15;

	message DragonScroll{			//神龙秘籍
	};
	repeated DragonScroll dragonscroll = 16;

	message OccultUnderstanding{	//秘术领悟
	};
	repeated OccultUnderstanding occultunderstanding = 17;

	message SkillTreeId{			//技能树解锁状况
	};
	repeated SkillTreeId skilltreeid = 18;

	uint32 KuangfuHouseId = 14;		// 武馆ID
	uint32 KuangfuHouseContribution = 19;	// 武馆贡献

	message KuangfuHouseSkill{		// 武馆技能
	};
	repeated KuangfuHouseSkill kuangfuhouseskill = 20;
};

message TeamInfo{
	string uid					=11;
	string title				=1;
	uint32 levelLimit			=2;
	uint32 professionLimit		=3;
	uint32 dungeonId			=4;
	uint32 difficulty			=5;
	uint32 capacity				=6;
	repeated PlayerInfo members	=7;	// the 1st should be team leader
	repeated PlayerInfo recruits=8;	// 招募队列
	repeated PlayerInfo joins	=9;	// 申请队列
}

// Server Data <==> 好友列表,在User中拆分出来的数据
message User_FriendList{
};

// Server Data <==> 所有拥有的称号(称谓),同上
message User_Title{
};

// info_NPC数据表.xlsx
// NpcBaseData(C++ Server Struct) <==> FsPANpcBaseData(Unreal Server Struct)
message NPCBaseData{
	uint32 nID = 1;			//NPCid
	uint32 nNameId = 2;				//npc名称_id
	string nCharacterBPId = 3;		//模型BP_id
	string nAnimBPId = 4;			//动画BP_id
	uint32 nDialogeId = 5;			//对话ID
	uint32 nTaskId = 6;				//任务ID
	uint32 nIntroductionId = 7;		//介绍文本_id
};

// info_userLevel_角色升级经验表.xlsx
// UserUpgradeBaseData(C++ Server Struct) <==> FsPAUserUpgradeBaseData(Unreal Server Struct)
message UserUpgradeBaseData{
	uint32 nID = 1;					// 玩家等级
	uint32 nExperience = 2;			// 升级经验
	uint32 nSumExperience = 3;		// 需要总经验
	uint32 nPower = 4;			// 体力上限
	uint32 nSkillPoint = 5;		// 悟性值上限
	
};

// info_monsterHero_怪物属性数据表.xlsx
// MonsterBaseData(C++ Server Struct) <==> FsPAMonsterHeroBaseData(Unreal Server Struct)
message MonsterHeroBaseData{
	uint32 nID = 1;
	uint32 nNameId = 2;
	uint32 nSign = 3;
	uint32 nType = 4;

	uint32 nStageChange_NextMonsterID = 5;
	uint32 nStageChange_AnimId = 6;
	uint32 nStageChange_EffectId = 7;
	uint32 nStageChange_SoundId = 8;

	uint32 nAITreeId = 9;
	uint32 nCharacterBPId = 10;
	uint32 nAnimBPId = 11;

	float fModelScale = 12;

	uint32 nNPCId = 13;
	uint32 nTaskID = 14;

	uint32 nAvatar = 15;
	uint32 nVocation = 16;

	uint32 nEquip_1 = 17;
	uint32 nEquip_2 = 18;
	uint32 nEquip_3 = 19;
	uint32 nEquip_4 = 20;
	uint32 nEquip_5 = 21;
	uint32 nEquip_6 = 22;
	uint32 nEquip_7 = 23;
	uint32 nEquip_8 = 24;
	uint32 nWeapon_1 = 25;
	uint32 nWeapon_2 = 26;

	float fWalkSpeed = 27;
	float fRunSpeed = 28;
	float fJumpHeight = 29;
	float fBodyConstitution = 30;	
	float fHP = 31;
	float fMAX_HP = 32;
	float fMP = 33;
	float fMAX_MP = 34;
	float fArmor = 35;
	float fMAX_Armor = 36;
	float fNormalAttack = 37;
	float fNormalDefend = 38;
	float fDodge = 39;
	float fCrit = 40;
	float fCritHurt = 41;
	float fBlock = 42;
	float fAttackResistance = 43;
	float fAttackMulti = 44;
	uint32 fSkillTreeId = 45;
	uint32 nIntroductionId = 46;
	float PatrolRadius = 47;
	float WanderDistance = 48;
	float HearingRadius = 49;
	float ChaseRadius = 50;
	float SprintRadius = 51;
};

// info_userHero_角色属性数据表.xlsx
// UserHeroBaseData(C++ Server Struct) <==> FsPAPlayerHeroBaseData(Unreal Server Struct)
message UserHeroBaseData{
	uint32 nID = 1;
	uint32 nNameId = 2;
	uint32 nSign = 3;
	uint32 nType = 4;

	uint32 nStageChange_NextHeroID = 5;
	uint32 nStageChange_AnimId = 6;
	uint32 nStageChange_EffectId = 7;
	uint32 nStageChange_SoundId = 8;
	
	uint32 nAITreeId = 9;
	uint32 nCharacterBPId = 10;
	uint32 nAnimBPId = 11;

	float fModelScale = 12;

	uint32 nTaskID = 13;

	uint32 nAvatar = 14;
	uint32 nVocation = 15;

	uint32 nEquip_1 = 16;
	uint32 nEquip_2 = 17;
	uint32 nEquip_3 = 18;
	uint32 nEquip_4 = 19;
	uint32 nEquip_5 = 20;
	uint32 nEquip_6 = 21;
	uint32 nEquip_7 = 22;
	uint32 nEquip_8 = 23;
	uint32 nWeapon_1 = 24;
	uint32 nWeapon_2 = 25;	
	
	float fWalkSpeed = 26;
	float fRunSpeed = 27;
	float fJumpHeight = 28;
	float fHP = 29;
	float fMAX_HP = 30;
	float fMP = 31;
	float fMAX_MP = 32;
	float fArmor = 33;
	float fMAX_Armor = 34;
	float fNormalAttack = 35;
	float fNormalDefend = 36;
	float fDodge = 37;
	float fCrit = 38;
	float fCritHurt = 39;
	float fBlock = 40;
	float fAttackResistance = 41;
	float fAttackMulti = 42;
	uint32 nLandSkillId = 43;
	uint32 nSkillTreeId = 44;
	uint32 nSkySkillId = 45;
	uint32 nIntroductionId = 46;
	repeated string tArrRacialTalent = 47;
};

// 副本组数据表.xls
message ChapterData{
	uint32 nID = 1;				//副本组id
	uint32 nNameId = 2;		//副本组名称
	uint32 nType = 3;			//类型
	uint32 nDescId = 4;			//副本组描述
	uint32 nLevel = 5;			//副本等级
};

// 副本数据表.xls
message StageData{
	uint32 nID = 1;				//副本id
	uint32 nNameId = 2;		//副本名称
	uint32 nGroupId = 3;		//副本组id	
	uint32 nLevel = 4;			//副本等级
	uint32 nDifficulty = 5;			//副本难度
	uint32 nNeedMobility = 6;		//消费体力
	uint32 nMapId = 7;				//地图资源组
	uint32 nRewardExp = 8;			//通关奖励经验（暂时不用）
	uint32 nRewardGold = 9;			//通关奖励金币（暂时不用）
	uint32 nRewardExploit = 10;			//增加战功（不使用）
	uint32 nRewardCourage = 11;			//增加勇气点
	uint32 nRewardJustice = 12;			//增加正义点

	uint32 nRewardPackId = 13;			//掉落包id	
	uint32 nNextInstanceIds = 14;				//通关后激活下个关卡id	
	uint32 nActivateInstanceId = 15;			//上一关	
	uint32 nFreeTimes = 16;				//进入次数	
	uint32 nCanBuyTimes = 17;			//购买次数	
	uint32 nPrice = 18;			//价格	
	uint32 nStar = 19;			//副本评价
};

// 副本英雄组表.xls
message StageMonsterPositionData
{
	uint32 nID = 1;					//副本id
	uint32 nMonsterArrayID = 2;		//怪物组id
	message tArrPositions{			//站位
	};
	repeated tArrPositions tarrpositions = 3;
};

// 副本掉落表.xlsx
message StageLootRewardData{
	uint32 nID = 1;							//掉落ID
	uint32 nNameId = 2;						//名称

	uint32 nRewardType_Normal = 3;							//掉落种类(怪物类型)_普通
	message nItemId_Normal{};
	repeated nItemId_Normal nitemid_normal = 4;				//道具ID(怪物类型)_普通
	message nLoot_random_Normal{};
	repeated nLoot_random_Normal nloot_random_normal = 5;	//掉落几率(怪物类型)_普通

	uint32 nRewardType_Elite = 6;							//掉落种类(怪物类型)_精英
	message nItemId_Elite{};
	repeated nItemId_Elite nitemid_elite = 7;				//道具ID(怪物类型)_精英
	message nLoot_random_Elite{};
	repeated nLoot_random_Elite nloot_random_elite = 8;		//掉落几率(怪物类型)_精英

	uint32 nRewardType_BOSS = 9;							//掉落种类(怪物类型)_BOSS
	message nItemId_BOSS{};
	repeated nItemId_BOSS nitemid_boss = 10;				//道具ID(怪物类型)_BOSS
	message nLoot_random_BOSS{};
	repeated nLoot_random_BOSS nloot_random_boss = 11;	//掉落几率(怪物类型)_BOSS

	uint32 nRewardType_Activity = 12;								//掉落种类(怪物类型)_活动
	message nItemId_Activity{};
	repeated nItemId_Activity nitemid_activity = 13;				//道具ID(怪物类型)_活动
	message nLoot_random_Activity{};
	repeated nLoot_random_Activity nloot_random_activity = 14;		//掉落几率(怪物类型)_活动

	uint32 nRewardType_Task = 15;							//掉落种类(怪物类型)_任务
	message nItemId_Task{};
	repeated nItemId_Task nitemid_task = 16;				//道具ID(怪物类型)_任务
	message nLoot_random_Task{};
	repeated nLoot_random_Task nloot_random_task = 17;		//掉落几率(怪物类型)_任务
};

// 任务数据表
message TaskInfoData{
	
	uint32  NextTaskId = 1;			/** 前置任务ID*/
	uint32  LevelLimit = 2;			/** 限制等级*/
	uint32  RecommendLevel = 3;		/** 推荐等级*/
	string TaskName = 4;			/** 任务名称*/
	
	uint32 TaskType = 5;		/** 任务类型*/
	
	uint32 TriggerType = 6;		/** 任务触发类型*/
	
	uint32 LimitTime = 7;		/** 任务限制时间*/
	
	uint32 AcceptNPCID = 8;		/** 领取NPCID*/
	
	uint32 ConsignNPCID = 9;	/** 交付NPCID*/
	
	uint32 TargetID = 10;		/** 目标ID*/
	
	uint32 SceneID = 11;			/** 副本ID*/
	
	uint32 TargetNum = 12;		/** 目标数量*/
	
	uint32 RewardGold = 13;		/** 奖励金币*/
	
	uint32 RewardEXP = 14;		/** 奖励经验*/
	
	repeated uint32 RewardItemID = 15;		/** 奖励道具数组*/
	
	repeated uint32 TalkContentID = 16;	/** 领取对话ID 数组*/
	
	uint32 ConsignDialogID = 17;		/** 交付对话ID 数组*/
	
	uint32 FailedDialogID = 18;		/** 失败对话ID 数组*/
	
	uint32 DoingDialogID = 19;		/** 执行中对话ID 数组*/
	//////////////////////////////////////////////////////////////////////////
	uint32 DescriptionID = 20;		/** 任务描述ID */
};

enum eResult{
	SUCCEESS		=0;
	FAILED			=100;
	CANCELLED		=101;
	ERR_PROTOCOL	=102;
	ERR_PARAM		=103;
	ERR_DUPLICATED	=104;
	UNKNOWN			=999;
};

enum eMoveType{
	WALK			=0;
	FLY				=1;
	JUMP			=2;
	SWIM			=3;
	TELEPORT		=4;
	FALLING			=5;
};

enum eTeamOp{
	CREATE			=0;
	DISMISS			=1;
	APPLY			=2;
	INVITE			=5;
	LEAVE			=3;
	KICK			=4;
	EDIT			=7;
	BROADCAST		=6;
};
// *** Data ---------------- Struct Define End *** 

message MsgBase{
	uint32 mid		= 1;
};
//	Client	---------------- Gateway
message MsgCGLogin{
	uint32 mid				=1;
	string id				=2;
	AccountType type		=3;
	string udid				=4;
	string account			=5;
	string pswd				=6;
	string name				=7;
	uint32 zid				=8;		//last zone id
	uint32 clientVersion	=9;
	//uint32 lastLogin		=9;		//seconds from 1970
	//string lastIP			=10;
};

message MsgGCLogin{
	uint32 mid				= 1;
	uint32 version			= 2;
	uint64 sid				= 3;	// session id
	repeated ZoneInfo zoneInfo	= 4;
	string name				=7;		// only for testing
	eResult result			= 5;
};

//	Client	---------------- Zone
message MsgCZEnter{
	uint32 mid				= 1;
	uint64 sid				= 2;	// session id
	string uid				= 3;	// account
};

message MsgZCEnter{
	uint32 mid						= 1;
	uint32 activePlayer				= 2;
	repeated PlayerInfo playerInfo	= 3;
	eResult result					= 4;
};

message MsgZCExit{
	uint32 mid				= 1;
	PlayerInfo player		= 3;
	eResult result			= 4;
};

message MsgCZCreatePlayer{
	uint32 mid				= 1;
	PlayerInfo playerInfo	= 2;
};

message MsgZCCreatePlayer{
	uint32 mid				= 1;
	uint32 activePlayer		= 2;
	PlayerInfo playerInfo	= 3;
	eResult result			= 4;
};

message MsgCZUpdatePlayer{
	uint32 mid				= 1;
	uint32 activePlayer		= 2;
	PlayerInfo playerInfo	= 3;
};

message MsgZCUpdatePlayer{
	uint32 mid				= 1;
	uint32 activePlayer		= 2;
	PlayerInfo playerInfo	= 3;
	eResult result			= 4;
};

message MsgCZRemovePlayer{
	uint32 mid				= 1;
	uint32 pid				= 2;
};

message MsgZCRemovePlayer{
	uint32 mid				= 1;
	eResult result			= 2;
};

message MsgCZGetPlayerExtra{
	uint32 mid				= 1;
	uint32 epid				= 2;
};

message MsgCZUpdatePlayerExtra{
	uint32 mid				= 1;
	uint32 epid				= 2;
	PlayerExtraInfo extra	= 3;
};

message MsgZCUpdatePlayerExtra{
	uint32 mid				= 1;
	PlayerExtraInfo extra	= 2;
	eResult result			= 3;
};

message MsgCZMove{
	uint32 mid				= 1;
	eMoveType type			= 2;
	repeated PlaceInfo to	= 3;			
};

message MsgZCMove{
	uint32 mid				= 1;
	eMoveType type			= 2;
	repeated PlaceInfo to	= 3;			
	eResult result			= 4;
};

message MsgZCBroadcastPlayer{
	uint32 mid					= 1;
	PlayerInfo player			= 2;
}

message MsgZCSyncPlayers{
	uint32 mid					= 1;
	repeated PlayerInfo players	= 2;
}

message MsgCZUpdateName{	//test
	uint32 mid				= 1;
	string uid				= 2;
	string name				= 3;
};

message MsgZCUpdateName{	//test
	uint32 mid				= 1;
	eResult result			= 2;
};

message MsgCZEnterArena{
	uint32 mid		= 1;
	uint32 aid		= 2;	// arena id
};

message MsgZCEnterArena{
	uint32 mid		= 1;
	eResult result	= 2;
	uint32 aid		= 3;	// arena id
	string key		= 4;
	string host		= 5;
	uint32 port		= 6;
	string level	= 7;
};
//pvp相关
message MsgCZChallengeCreate{
	uint32 mid					= 1;
	repeated string challengers	= 2;	//挑战者
	repeated string opposites	= 3;	//被挑战者
}

message MsgZCChallengeInvite{
	uint32 mid					= 1;
	repeated string challengers	= 2;
	repeated string opposites	= 3;
}

message MsgCZChallengeAgree{
	uint32 mid					= 1;
	repeated string challengers	= 2;
	string opposites			= 3;
	eResult result				= 4;
}

message MsgZCChallengeStart{
	uint32 mid					= 1;
	repeated string challengers	= 2;
	repeated string opposites	= 3;
	uint32 nmapid				= 4;
	eResult result				= 5;
}
//
message MsgZCTeamBroadcast{
	uint32 mid				= 1;
	repeated TeamInfo team	= 2;
};

// 创建队伍
message MsgCZTeamCreate{
	uint32 mid			= 1;
	uint32 reason		= 2;
	TeamInfo team		= 3;
};

// 编辑队伍信息
message MsgCZTeamEdit{
	uint32 mid			= 1;
	uint32 reason		= 2;
	TeamInfo team		= 3;
};

// 队伍数据更新
message MsgZCTeamUpdate{
	uint32 mid			= 1;
	TeamInfo team		= 2;
	eTeamOp op			= 3;
	eResult result		= 4;
};

// 解散队伍,解散接口不再使用.
message MsgCZTeamDismiss{
	uint32 mid			= 1;
	TeamInfo team		= 3;
};

// 踢出队伍
message MsgCZTeamKick{
	uint32 mid			= 1;
	TeamInfo team		= 3;
	PlayerInfo targets	= 4;	
};

// 离开队伍,TeamInfo只传ID
message MsgCZTeamLeave{
	uint32 mid			= 1;
	uint32 reason		= 2;
	TeamInfo team		= 3;
};

// 招募人员，邀请人员
message MsgCZTeamRecruitStart{
	uint32 mid					= 1;
	uint32 reason				= 2;
	TeamInfo team				= 3;
	repeated PlayerInfo targets	= 4;	
};

message MsgZCTeamRecruitAsk{
	uint32 mid			= 1;
	TeamInfo team		= 2;
};

message MsgCZTeamRecruitReply{
	uint32 mid			= 1;
	TeamInfo team		= 2;
	eResult result		= 3;		//SUCCEESS, CANCELLED
};

message MsgCZTeamJoinStart{
	uint32 mid			= 1;
	TeamInfo team		= 2;
};

message MsgZCTeamJoinAsk{
	uint32 mid			= 1;
	TeamInfo team		= 2;
//	PlayerInfo applicant= 2;
};

message MsgCZTeamJoinReply{
	uint32 mid			= 1;
	PlayerInfo applicant= 2;
	eResult result		= 3;
};
//	Client	---------------- Arena
message MsgCAEnter{
	uint32 mid		= 1;
	uint64 sid		= 2;	// session id
	string key		= 3;
	PlayerInfo playerInfo	= 4;
	PlayerExtraInfo extra	= 5;
};

message MsgACEnter{
	uint32 mid		= 1;
	eResult result	= 2;
};

//	Zone	---------------- Gateway
message MsgZGConnect{
	uint32 mid		= 1;
	uint32 zid		= 2;	// zone id
};

message MsgGZConnect{
	uint32 mid		= 1;
	eResult result	= 2;
};

//	Zone	---------------- World
message MsgZWConnect{
	uint32 mid		= 1;
	uint32 zid		= 2;
};

message MsgWZConnect{
	uint32 mid		= 1;
	eResult result	= 2;
};

//	Zone	---------------- Arena
message MsgAZConnect{
	uint32 mid		= 1;
	uint32 aid		= 2;	// arena id
};

message MsgZAConnect{
	uint32 mid		= 1;
	uint32 zid		= 2;	// zone id
	eResult result	= 3;
};

message MsgZAClientEnter{
	uint32 mid				= 1;
	repeated uint32 keys	= 2;
};

message MsgAZClientEnter{
	uint32 mid				= 1;
	uint32 aid				= 2;	// arena id
	repeated uint64 sid		= 3;
};

//单个道具
message game_ItemInfo{
	uint32 mid					= 1;
	uint32 itemId			    = 2;	//
	uint32 itemDataId			= 3;	//
};

//同步所有道具
message game_itemInfos{
	uint32 mid						 = 1;
	repeated game_ItemInfo itemInfos = 2;//道具数组
};