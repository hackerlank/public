// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto3 {

void protobuf_ShutdownFile_game_5fprotocol_2eproto() {
  delete ZoneInfo::default_instance_;
  delete PlaceInfo::default_instance_;
  delete PlayerInfo::default_instance_;
  delete PlayerExtraInfo::default_instance_;
  delete PlayerExtraInfo_BattleSkill::default_instance_;
  delete PlayerExtraInfo_DragonScroll::default_instance_;
  delete PlayerExtraInfo_OccultUnderstanding::default_instance_;
  delete PlayerExtraInfo_SkillTreeId::default_instance_;
  delete PlayerExtraInfo_KuangfuHouseSkill::default_instance_;
  delete TeamInfo::default_instance_;
  delete User_FriendList::default_instance_;
  delete User_Title::default_instance_;
  delete NPCBaseData::default_instance_;
  delete UserUpgradeBaseData::default_instance_;
  delete MonsterHeroBaseData::default_instance_;
  delete UserHeroBaseData::default_instance_;
  delete ChapterData::default_instance_;
  delete StageData::default_instance_;
  delete StageMonsterPositionData::default_instance_;
  delete StageMonsterPositionData_tArrPositions::default_instance_;
  delete StageLootRewardData::default_instance_;
  delete StageLootRewardData_nItemId_Normal::default_instance_;
  delete StageLootRewardData_nLoot_random_Normal::default_instance_;
  delete StageLootRewardData_nItemId_Elite::default_instance_;
  delete StageLootRewardData_nLoot_random_Elite::default_instance_;
  delete StageLootRewardData_nItemId_BOSS::default_instance_;
  delete StageLootRewardData_nLoot_random_BOSS::default_instance_;
  delete StageLootRewardData_nItemId_Activity::default_instance_;
  delete StageLootRewardData_nLoot_random_Activity::default_instance_;
  delete StageLootRewardData_nItemId_Task::default_instance_;
  delete StageLootRewardData_nLoot_random_Task::default_instance_;
  delete TaskInfoData::default_instance_;
  delete MsgBase::default_instance_;
  delete MsgCGLogin::default_instance_;
  delete MsgGCLogin::default_instance_;
  delete MsgCZEnter::default_instance_;
  delete MsgZCEnter::default_instance_;
  delete MsgZCExit::default_instance_;
  delete MsgCZCreatePlayer::default_instance_;
  delete MsgZCCreatePlayer::default_instance_;
  delete MsgCZUpdatePlayer::default_instance_;
  delete MsgZCUpdatePlayer::default_instance_;
  delete MsgCZRemovePlayer::default_instance_;
  delete MsgZCRemovePlayer::default_instance_;
  delete MsgCZGetPlayerExtra::default_instance_;
  delete MsgCZUpdatePlayerExtra::default_instance_;
  delete MsgZCUpdatePlayerExtra::default_instance_;
  delete MsgCZMove::default_instance_;
  delete MsgZCMove::default_instance_;
  delete MsgZCBroadcastPlayer::default_instance_;
  delete MsgZCSyncPlayers::default_instance_;
  delete MsgCZUpdateName::default_instance_;
  delete MsgZCUpdateName::default_instance_;
  delete MsgCZEnterArena::default_instance_;
  delete MsgZCEnterArena::default_instance_;
  delete MsgCZChallengeCreate::default_instance_;
  delete MsgZCChallengeInvite::default_instance_;
  delete MsgCZChallengeAgree::default_instance_;
  delete MsgZCChallengeStart::default_instance_;
  delete MsgZCTeamBroadcast::default_instance_;
  delete MsgCZTeamCreate::default_instance_;
  delete MsgCZTeamEdit::default_instance_;
  delete MsgZCTeamUpdate::default_instance_;
  delete MsgCZTeamDismiss::default_instance_;
  delete MsgCZTeamKick::default_instance_;
  delete MsgCZTeamLeave::default_instance_;
  delete MsgCZTeamRecruitStart::default_instance_;
  delete MsgZCTeamRecruitAsk::default_instance_;
  delete MsgCZTeamRecruitReply::default_instance_;
  delete MsgCZTeamJoinStart::default_instance_;
  delete MsgZCTeamJoinAsk::default_instance_;
  delete MsgCZTeamJoinReply::default_instance_;
  delete MsgCAEnter::default_instance_;
  delete MsgACEnter::default_instance_;
  delete MsgZGConnect::default_instance_;
  delete MsgGZConnect::default_instance_;
  delete MsgZWConnect::default_instance_;
  delete MsgWZConnect::default_instance_;
  delete MsgAZConnect::default_instance_;
  delete MsgZAConnect::default_instance_;
  delete MsgZAClientEnter::default_instance_;
  delete MsgAZClientEnter::default_instance_;
  delete game_ItemInfo::default_instance_;
  delete game_itemInfos::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_game_5fprotocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_game_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ZoneInfo::default_instance_ = new ZoneInfo();
  PlaceInfo::default_instance_ = new PlaceInfo();
  PlayerInfo::default_instance_ = new PlayerInfo();
  PlayerExtraInfo::default_instance_ = new PlayerExtraInfo();
  PlayerExtraInfo_BattleSkill::default_instance_ = new PlayerExtraInfo_BattleSkill();
  PlayerExtraInfo_DragonScroll::default_instance_ = new PlayerExtraInfo_DragonScroll();
  PlayerExtraInfo_OccultUnderstanding::default_instance_ = new PlayerExtraInfo_OccultUnderstanding();
  PlayerExtraInfo_SkillTreeId::default_instance_ = new PlayerExtraInfo_SkillTreeId();
  PlayerExtraInfo_KuangfuHouseSkill::default_instance_ = new PlayerExtraInfo_KuangfuHouseSkill();
  TeamInfo::default_instance_ = new TeamInfo();
  User_FriendList::default_instance_ = new User_FriendList();
  User_Title::default_instance_ = new User_Title();
  NPCBaseData::default_instance_ = new NPCBaseData();
  UserUpgradeBaseData::default_instance_ = new UserUpgradeBaseData();
  MonsterHeroBaseData::default_instance_ = new MonsterHeroBaseData();
  UserHeroBaseData::default_instance_ = new UserHeroBaseData();
  ChapterData::default_instance_ = new ChapterData();
  StageData::default_instance_ = new StageData();
  StageMonsterPositionData::default_instance_ = new StageMonsterPositionData();
  StageMonsterPositionData_tArrPositions::default_instance_ = new StageMonsterPositionData_tArrPositions();
  StageLootRewardData::default_instance_ = new StageLootRewardData();
  StageLootRewardData_nItemId_Normal::default_instance_ = new StageLootRewardData_nItemId_Normal();
  StageLootRewardData_nLoot_random_Normal::default_instance_ = new StageLootRewardData_nLoot_random_Normal();
  StageLootRewardData_nItemId_Elite::default_instance_ = new StageLootRewardData_nItemId_Elite();
  StageLootRewardData_nLoot_random_Elite::default_instance_ = new StageLootRewardData_nLoot_random_Elite();
  StageLootRewardData_nItemId_BOSS::default_instance_ = new StageLootRewardData_nItemId_BOSS();
  StageLootRewardData_nLoot_random_BOSS::default_instance_ = new StageLootRewardData_nLoot_random_BOSS();
  StageLootRewardData_nItemId_Activity::default_instance_ = new StageLootRewardData_nItemId_Activity();
  StageLootRewardData_nLoot_random_Activity::default_instance_ = new StageLootRewardData_nLoot_random_Activity();
  StageLootRewardData_nItemId_Task::default_instance_ = new StageLootRewardData_nItemId_Task();
  StageLootRewardData_nLoot_random_Task::default_instance_ = new StageLootRewardData_nLoot_random_Task();
  TaskInfoData::default_instance_ = new TaskInfoData();
  MsgBase::default_instance_ = new MsgBase();
  MsgCGLogin::default_instance_ = new MsgCGLogin();
  MsgGCLogin::default_instance_ = new MsgGCLogin();
  MsgCZEnter::default_instance_ = new MsgCZEnter();
  MsgZCEnter::default_instance_ = new MsgZCEnter();
  MsgZCExit::default_instance_ = new MsgZCExit();
  MsgCZCreatePlayer::default_instance_ = new MsgCZCreatePlayer();
  MsgZCCreatePlayer::default_instance_ = new MsgZCCreatePlayer();
  MsgCZUpdatePlayer::default_instance_ = new MsgCZUpdatePlayer();
  MsgZCUpdatePlayer::default_instance_ = new MsgZCUpdatePlayer();
  MsgCZRemovePlayer::default_instance_ = new MsgCZRemovePlayer();
  MsgZCRemovePlayer::default_instance_ = new MsgZCRemovePlayer();
  MsgCZGetPlayerExtra::default_instance_ = new MsgCZGetPlayerExtra();
  MsgCZUpdatePlayerExtra::default_instance_ = new MsgCZUpdatePlayerExtra();
  MsgZCUpdatePlayerExtra::default_instance_ = new MsgZCUpdatePlayerExtra();
  MsgCZMove::default_instance_ = new MsgCZMove();
  MsgZCMove::default_instance_ = new MsgZCMove();
  MsgZCBroadcastPlayer::default_instance_ = new MsgZCBroadcastPlayer();
  MsgZCSyncPlayers::default_instance_ = new MsgZCSyncPlayers();
  MsgCZUpdateName::default_instance_ = new MsgCZUpdateName();
  MsgZCUpdateName::default_instance_ = new MsgZCUpdateName();
  MsgCZEnterArena::default_instance_ = new MsgCZEnterArena();
  MsgZCEnterArena::default_instance_ = new MsgZCEnterArena();
  MsgCZChallengeCreate::default_instance_ = new MsgCZChallengeCreate();
  MsgZCChallengeInvite::default_instance_ = new MsgZCChallengeInvite();
  MsgCZChallengeAgree::default_instance_ = new MsgCZChallengeAgree();
  MsgZCChallengeStart::default_instance_ = new MsgZCChallengeStart();
  MsgZCTeamBroadcast::default_instance_ = new MsgZCTeamBroadcast();
  MsgCZTeamCreate::default_instance_ = new MsgCZTeamCreate();
  MsgCZTeamEdit::default_instance_ = new MsgCZTeamEdit();
  MsgZCTeamUpdate::default_instance_ = new MsgZCTeamUpdate();
  MsgCZTeamDismiss::default_instance_ = new MsgCZTeamDismiss();
  MsgCZTeamKick::default_instance_ = new MsgCZTeamKick();
  MsgCZTeamLeave::default_instance_ = new MsgCZTeamLeave();
  MsgCZTeamRecruitStart::default_instance_ = new MsgCZTeamRecruitStart();
  MsgZCTeamRecruitAsk::default_instance_ = new MsgZCTeamRecruitAsk();
  MsgCZTeamRecruitReply::default_instance_ = new MsgCZTeamRecruitReply();
  MsgCZTeamJoinStart::default_instance_ = new MsgCZTeamJoinStart();
  MsgZCTeamJoinAsk::default_instance_ = new MsgZCTeamJoinAsk();
  MsgCZTeamJoinReply::default_instance_ = new MsgCZTeamJoinReply();
  MsgCAEnter::default_instance_ = new MsgCAEnter();
  MsgACEnter::default_instance_ = new MsgACEnter();
  MsgZGConnect::default_instance_ = new MsgZGConnect();
  MsgGZConnect::default_instance_ = new MsgGZConnect();
  MsgZWConnect::default_instance_ = new MsgZWConnect();
  MsgWZConnect::default_instance_ = new MsgWZConnect();
  MsgAZConnect::default_instance_ = new MsgAZConnect();
  MsgZAConnect::default_instance_ = new MsgZAConnect();
  MsgZAClientEnter::default_instance_ = new MsgZAClientEnter();
  MsgAZClientEnter::default_instance_ = new MsgAZClientEnter();
  game_ItemInfo::default_instance_ = new game_ItemInfo();
  game_itemInfos::default_instance_ = new game_itemInfos();
  ZoneInfo::default_instance_->InitAsDefaultInstance();
  PlaceInfo::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  PlayerExtraInfo::default_instance_->InitAsDefaultInstance();
  PlayerExtraInfo_BattleSkill::default_instance_->InitAsDefaultInstance();
  PlayerExtraInfo_DragonScroll::default_instance_->InitAsDefaultInstance();
  PlayerExtraInfo_OccultUnderstanding::default_instance_->InitAsDefaultInstance();
  PlayerExtraInfo_SkillTreeId::default_instance_->InitAsDefaultInstance();
  PlayerExtraInfo_KuangfuHouseSkill::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  User_FriendList::default_instance_->InitAsDefaultInstance();
  User_Title::default_instance_->InitAsDefaultInstance();
  NPCBaseData::default_instance_->InitAsDefaultInstance();
  UserUpgradeBaseData::default_instance_->InitAsDefaultInstance();
  MonsterHeroBaseData::default_instance_->InitAsDefaultInstance();
  UserHeroBaseData::default_instance_->InitAsDefaultInstance();
  ChapterData::default_instance_->InitAsDefaultInstance();
  StageData::default_instance_->InitAsDefaultInstance();
  StageMonsterPositionData::default_instance_->InitAsDefaultInstance();
  StageMonsterPositionData_tArrPositions::default_instance_->InitAsDefaultInstance();
  StageLootRewardData::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nItemId_Normal::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nLoot_random_Normal::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nItemId_Elite::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nLoot_random_Elite::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nItemId_BOSS::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nLoot_random_BOSS::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nItemId_Activity::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nLoot_random_Activity::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nItemId_Task::default_instance_->InitAsDefaultInstance();
  StageLootRewardData_nLoot_random_Task::default_instance_->InitAsDefaultInstance();
  TaskInfoData::default_instance_->InitAsDefaultInstance();
  MsgBase::default_instance_->InitAsDefaultInstance();
  MsgCGLogin::default_instance_->InitAsDefaultInstance();
  MsgGCLogin::default_instance_->InitAsDefaultInstance();
  MsgCZEnter::default_instance_->InitAsDefaultInstance();
  MsgZCEnter::default_instance_->InitAsDefaultInstance();
  MsgZCExit::default_instance_->InitAsDefaultInstance();
  MsgCZCreatePlayer::default_instance_->InitAsDefaultInstance();
  MsgZCCreatePlayer::default_instance_->InitAsDefaultInstance();
  MsgCZUpdatePlayer::default_instance_->InitAsDefaultInstance();
  MsgZCUpdatePlayer::default_instance_->InitAsDefaultInstance();
  MsgCZRemovePlayer::default_instance_->InitAsDefaultInstance();
  MsgZCRemovePlayer::default_instance_->InitAsDefaultInstance();
  MsgCZGetPlayerExtra::default_instance_->InitAsDefaultInstance();
  MsgCZUpdatePlayerExtra::default_instance_->InitAsDefaultInstance();
  MsgZCUpdatePlayerExtra::default_instance_->InitAsDefaultInstance();
  MsgCZMove::default_instance_->InitAsDefaultInstance();
  MsgZCMove::default_instance_->InitAsDefaultInstance();
  MsgZCBroadcastPlayer::default_instance_->InitAsDefaultInstance();
  MsgZCSyncPlayers::default_instance_->InitAsDefaultInstance();
  MsgCZUpdateName::default_instance_->InitAsDefaultInstance();
  MsgZCUpdateName::default_instance_->InitAsDefaultInstance();
  MsgCZEnterArena::default_instance_->InitAsDefaultInstance();
  MsgZCEnterArena::default_instance_->InitAsDefaultInstance();
  MsgCZChallengeCreate::default_instance_->InitAsDefaultInstance();
  MsgZCChallengeInvite::default_instance_->InitAsDefaultInstance();
  MsgCZChallengeAgree::default_instance_->InitAsDefaultInstance();
  MsgZCChallengeStart::default_instance_->InitAsDefaultInstance();
  MsgZCTeamBroadcast::default_instance_->InitAsDefaultInstance();
  MsgCZTeamCreate::default_instance_->InitAsDefaultInstance();
  MsgCZTeamEdit::default_instance_->InitAsDefaultInstance();
  MsgZCTeamUpdate::default_instance_->InitAsDefaultInstance();
  MsgCZTeamDismiss::default_instance_->InitAsDefaultInstance();
  MsgCZTeamKick::default_instance_->InitAsDefaultInstance();
  MsgCZTeamLeave::default_instance_->InitAsDefaultInstance();
  MsgCZTeamRecruitStart::default_instance_->InitAsDefaultInstance();
  MsgZCTeamRecruitAsk::default_instance_->InitAsDefaultInstance();
  MsgCZTeamRecruitReply::default_instance_->InitAsDefaultInstance();
  MsgCZTeamJoinStart::default_instance_->InitAsDefaultInstance();
  MsgZCTeamJoinAsk::default_instance_->InitAsDefaultInstance();
  MsgCZTeamJoinReply::default_instance_->InitAsDefaultInstance();
  MsgCAEnter::default_instance_->InitAsDefaultInstance();
  MsgACEnter::default_instance_->InitAsDefaultInstance();
  MsgZGConnect::default_instance_->InitAsDefaultInstance();
  MsgGZConnect::default_instance_->InitAsDefaultInstance();
  MsgZWConnect::default_instance_->InitAsDefaultInstance();
  MsgWZConnect::default_instance_->InitAsDefaultInstance();
  MsgAZConnect::default_instance_->InitAsDefaultInstance();
  MsgZAConnect::default_instance_->InitAsDefaultInstance();
  MsgZAClientEnter::default_instance_->InitAsDefaultInstance();
  MsgAZClientEnter::default_instance_->InitAsDefaultInstance();
  game_ItemInfo::default_instance_->InitAsDefaultInstance();
  game_itemInfos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fprotocol_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_game_5fprotocol_2eproto_once_);
void protobuf_AddDesc_game_5fprotocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_game_5fprotocol_2eproto_once_,
                 &protobuf_AddDesc_game_5fprotocol_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fprotocol_2eproto_;
#endif
bool AccountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool eResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 999:
      return true;
    default:
      return false;
  }
}

bool eMoveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool eTeamOp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZoneInfo::kIdFieldNumber;
const int ZoneInfo::kVersionFieldNumber;
const int ZoneInfo::kIpFieldNumber;
const int ZoneInfo::kPortFieldNumber;
const int ZoneInfo::kOccupiedFieldNumber;
const int ZoneInfo::kCapacityFieldNumber;
const int ZoneInfo::kDescFieldNumber;
const int ZoneInfo::kStatusFieldNumber;
const int ZoneInfo::kTimeZoneFieldNumber;
const int ZoneInfo::kNowFieldNumber;
const int ZoneInfo::kOpenTimeFieldNumber;
const int ZoneInfo::kMaintainStartFieldNumber;
const int ZoneInfo::kMaintainEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZoneInfo::ZoneInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.ZoneInfo)
}

void ZoneInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ZoneInfo::ZoneInfo(const ZoneInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.ZoneInfo)
}

void ZoneInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  version_ = 0u;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  occupied_ = 0u;
  capacity_ = 0u;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  timezone_ = 0u;
  now_ = 0u;
  opentime_ = 0u;
  maintainstart_ = 0u;
  maintainend_ = 0u;
}

ZoneInfo::~ZoneInfo() {
  // @@protoc_insertion_point(destructor:proto3.ZoneInfo)
  SharedDtor();
}

void ZoneInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ZoneInfo& ZoneInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

ZoneInfo* ZoneInfo::default_instance_ = NULL;

ZoneInfo* ZoneInfo::New(::google::protobuf::Arena* arena) const {
  ZoneInfo* n = new ZoneInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZoneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.ZoneInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ZoneInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ZoneInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, version_);
  ZR_(port_, occupied_);
  ZR_(capacity_, status_);
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(timezone_, maintainend_);

#undef ZR_HELPER_
#undef ZR_

}

bool ZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.ZoneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.ZoneInfo.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_occupied;
        break;
      }

      // optional uint32 occupied = 5;
      case 5: {
        if (tag == 40) {
         parse_occupied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupied_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_capacity;
        break;
      }

      // optional uint32 capacity = 6;
      case 6: {
        if (tag == 48) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_desc;
        break;
      }

      // optional string desc = 7;
      case 7: {
        if (tag == 58) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.ZoneInfo.desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (tag == 64) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_openTime;
        break;
      }

      // optional uint32 openTime = 9;
      case 9: {
        if (tag == 72) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maintainStart;
        break;
      }

      // optional uint32 maintainStart = 10;
      case 10: {
        if (tag == 80) {
         parse_maintainStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintainstart_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maintainEnd;
        break;
      }

      // optional uint32 maintainEnd = 11;
      case 11: {
        if (tag == 88) {
         parse_maintainEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintainend_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_timeZone;
        break;
      }

      // optional uint32 timeZone = 12;
      case 12: {
        if (tag == 96) {
         parse_timeZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timezone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_now;
        break;
      }

      // optional uint32 now = 13;
      case 13: {
        if (tag == 104) {
         parse_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &now_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.ZoneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.ZoneInfo)
  return false;
#undef DO_
}

void ZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.ZoneInfo)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.ZoneInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional uint32 occupied = 5;
  if (this->occupied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->occupied(), output);
  }

  // optional uint32 capacity = 6;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->capacity(), output);
  }

  // optional string desc = 7;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.ZoneInfo.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->desc(), output);
  }

  // optional uint32 status = 8;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional uint32 openTime = 9;
  if (this->opentime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->opentime(), output);
  }

  // optional uint32 maintainStart = 10;
  if (this->maintainstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maintainstart(), output);
  }

  // optional uint32 maintainEnd = 11;
  if (this->maintainend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maintainend(), output);
  }

  // optional uint32 timeZone = 12;
  if (this->timezone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timezone(), output);
  }

  // optional uint32 now = 13;
  if (this->now() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->now(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.ZoneInfo)
}

int ZoneInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.ZoneInfo)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional uint32 occupied = 5;
  if (this->occupied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->occupied());
  }

  // optional uint32 capacity = 6;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capacity());
  }

  // optional string desc = 7;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // optional uint32 status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 timeZone = 12;
  if (this->timezone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timezone());
  }

  // optional uint32 now = 13;
  if (this->now() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->now());
  }

  // optional uint32 openTime = 9;
  if (this->opentime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opentime());
  }

  // optional uint32 maintainStart = 10;
  if (this->maintainstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintainstart());
  }

  // optional uint32 maintainEnd = 11;
  if (this->maintainend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintainend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ZoneInfo*>(&from));
}

void ZoneInfo::MergeFrom(const ZoneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.ZoneInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.occupied() != 0) {
    set_occupied(from.occupied());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.timezone() != 0) {
    set_timezone(from.timezone());
  }
  if (from.now() != 0) {
    set_now(from.now());
  }
  if (from.opentime() != 0) {
    set_opentime(from.opentime());
  }
  if (from.maintainstart() != 0) {
    set_maintainstart(from.maintainstart());
  }
  if (from.maintainend() != 0) {
    set_maintainend(from.maintainend());
  }
}

void ZoneInfo::CopyFrom(const ZoneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.ZoneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneInfo::IsInitialized() const {

  return true;
}

void ZoneInfo::Swap(ZoneInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZoneInfo::InternalSwap(ZoneInfo* other) {
  std::swap(id_, other->id_);
  std::swap(version_, other->version_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(occupied_, other->occupied_);
  std::swap(capacity_, other->capacity_);
  desc_.Swap(&other->desc_);
  std::swap(status_, other->status_);
  std::swap(timezone_, other->timezone_);
  std::swap(now_, other->now_);
  std::swap(opentime_, other->opentime_);
  std::swap(maintainstart_, other->maintainstart_);
  std::swap(maintainend_, other->maintainend_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ZoneInfo::GetTypeName() const {
  return "proto3.ZoneInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ZoneInfo

// optional uint32 id = 1;
void ZoneInfo::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::id() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.id)
  return id_;
}
 void ZoneInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.id)
}

// optional uint32 version = 2;
void ZoneInfo::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::version() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.version)
  return version_;
}
 void ZoneInfo::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.version)
}

// optional string ip = 3;
void ZoneInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ZoneInfo::ip() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ZoneInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.ip)
}
 void ZoneInfo::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.ZoneInfo.ip)
}
 void ZoneInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.ZoneInfo.ip)
}
 ::std::string* ZoneInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto3.ZoneInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ZoneInfo::release_ip() {
  // @@protoc_insertion_point(field_release:proto3.ZoneInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ZoneInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto3.ZoneInfo.ip)
}

// optional uint32 port = 4;
void ZoneInfo::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::port() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.port)
  return port_;
}
 void ZoneInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.port)
}

// optional uint32 occupied = 5;
void ZoneInfo::clear_occupied() {
  occupied_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::occupied() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.occupied)
  return occupied_;
}
 void ZoneInfo::set_occupied(::google::protobuf::uint32 value) {
  
  occupied_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.occupied)
}

// optional uint32 capacity = 6;
void ZoneInfo::clear_capacity() {
  capacity_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::capacity() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.capacity)
  return capacity_;
}
 void ZoneInfo::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.capacity)
}

// optional string desc = 7;
void ZoneInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ZoneInfo::desc() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ZoneInfo::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.desc)
}
 void ZoneInfo::set_desc(const char* value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.ZoneInfo.desc)
}
 void ZoneInfo::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.ZoneInfo.desc)
}
 ::std::string* ZoneInfo::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:proto3.ZoneInfo.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ZoneInfo::release_desc() {
  // @@protoc_insertion_point(field_release:proto3.ZoneInfo.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ZoneInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:proto3.ZoneInfo.desc)
}

// optional uint32 status = 8;
void ZoneInfo::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::status() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.status)
  return status_;
}
 void ZoneInfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.status)
}

// optional uint32 timeZone = 12;
void ZoneInfo::clear_timezone() {
  timezone_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::timezone() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.timeZone)
  return timezone_;
}
 void ZoneInfo::set_timezone(::google::protobuf::uint32 value) {
  
  timezone_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.timeZone)
}

// optional uint32 now = 13;
void ZoneInfo::clear_now() {
  now_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::now() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.now)
  return now_;
}
 void ZoneInfo::set_now(::google::protobuf::uint32 value) {
  
  now_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.now)
}

// optional uint32 openTime = 9;
void ZoneInfo::clear_opentime() {
  opentime_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::opentime() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.openTime)
  return opentime_;
}
 void ZoneInfo::set_opentime(::google::protobuf::uint32 value) {
  
  opentime_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.openTime)
}

// optional uint32 maintainStart = 10;
void ZoneInfo::clear_maintainstart() {
  maintainstart_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::maintainstart() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.maintainStart)
  return maintainstart_;
}
 void ZoneInfo::set_maintainstart(::google::protobuf::uint32 value) {
  
  maintainstart_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.maintainStart)
}

// optional uint32 maintainEnd = 11;
void ZoneInfo::clear_maintainend() {
  maintainend_ = 0u;
}
 ::google::protobuf::uint32 ZoneInfo::maintainend() const {
  // @@protoc_insertion_point(field_get:proto3.ZoneInfo.maintainEnd)
  return maintainend_;
}
 void ZoneInfo::set_maintainend(::google::protobuf::uint32 value) {
  
  maintainend_ = value;
  // @@protoc_insertion_point(field_set:proto3.ZoneInfo.maintainEnd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaceInfo::kZidFieldNumber;
const int PlaceInfo::kNMapIdFieldNumber;
const int PlaceInfo::kXFieldNumber;
const int PlaceInfo::kYFieldNumber;
const int PlaceInfo::kZFieldNumber;
const int PlaceInfo::kRollFieldNumber;
const int PlaceInfo::kPitchFieldNumber;
const int PlaceInfo::kYawFieldNumber;
const int PlaceInfo::kOrientationFieldNumber;
const int PlaceInfo::kFMoveSpeedFieldNumber;
const int PlaceInfo::kCHARACTERSTATEFieldNumber;
const int PlaceInfo::kCHARACTERSUBSTATEFieldNumber;
const int PlaceInfo::kMoveTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaceInfo::PlaceInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.PlaceInfo)
}

void PlaceInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlaceInfo::PlaceInfo(const PlaceInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.PlaceInfo)
}

void PlaceInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  zid_ = 0u;
  nmapid_ = 0u;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  orientation_ = 0u;
  fmovespeed_ = 0;
  character_state_ = 0u;
  character_sub_state_ = 0u;
  movetype_ = 0;
}

PlaceInfo::~PlaceInfo() {
  // @@protoc_insertion_point(destructor:proto3.PlaceInfo)
  SharedDtor();
}

void PlaceInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlaceInfo& PlaceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

PlaceInfo* PlaceInfo::default_instance_ = NULL;

PlaceInfo* PlaceInfo::New(::google::protobuf::Arena* arena) const {
  PlaceInfo* n = new PlaceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.PlaceInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlaceInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlaceInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(zid_, yaw_);
  ZR_(orientation_, movetype_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.PlaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nMapId;
        break;
      }

      // optional uint32 nMapId = 2;
      case 2: {
        if (tag == 16) {
         parse_nMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmapid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // optional float x = 3;
      case 3: {
        if (tag == 29) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // optional float y = 4;
      case 4: {
        if (tag == 37) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_z;
        break;
      }

      // optional float z = 5;
      case 5: {
        if (tag == 45) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_Roll;
        break;
      }

      // optional float Roll = 6;
      case 6: {
        if (tag == 53) {
         parse_Roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_Pitch;
        break;
      }

      // optional float Pitch = 7;
      case 7: {
        if (tag == 61) {
         parse_Pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_Yaw;
        break;
      }

      // optional float Yaw = 8;
      case 8: {
        if (tag == 69) {
         parse_Yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_orientation;
        break;
      }

      // optional uint32 orientation = 9;
      case 9: {
        if (tag == 72) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orientation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_fMoveSpeed;
        break;
      }

      // optional float fMoveSpeed = 10;
      case 10: {
        if (tag == 85) {
         parse_fMoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmovespeed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_CHARACTER_STATE;
        break;
      }

      // optional uint32 CHARACTER_STATE = 11;
      case 11: {
        if (tag == 88) {
         parse_CHARACTER_STATE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_CHARACTER_SUB_STATE;
        break;
      }

      // optional uint32 CHARACTER_SUB_STATE = 12;
      case 12: {
        if (tag == 96) {
         parse_CHARACTER_SUB_STATE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_sub_state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_moveType;
        break;
      }

      // optional .proto3.eMoveType moveType = 13;
      case 13: {
        if (tag == 104) {
         parse_moveType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_movetype(static_cast< ::proto3::eMoveType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.PlaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.PlaceInfo)
  return false;
#undef DO_
}

void PlaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.PlaceInfo)
  // optional uint32 zid = 1;
  if (this->zid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // optional uint32 nMapId = 2;
  if (this->nmapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nmapid(), output);
  }

  // optional float x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // optional float Roll = 6;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->roll(), output);
  }

  // optional float Pitch = 7;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pitch(), output);
  }

  // optional float Yaw = 8;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->yaw(), output);
  }

  // optional uint32 orientation = 9;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->orientation(), output);
  }

  // optional float fMoveSpeed = 10;
  if (this->fmovespeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fmovespeed(), output);
  }

  // optional uint32 CHARACTER_STATE = 11;
  if (this->character_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->character_state(), output);
  }

  // optional uint32 CHARACTER_SUB_STATE = 12;
  if (this->character_sub_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->character_sub_state(), output);
  }

  // optional .proto3.eMoveType moveType = 13;
  if (this->movetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->movetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.PlaceInfo)
}

int PlaceInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.PlaceInfo)
  int total_size = 0;

  // optional uint32 zid = 1;
  if (this->zid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zid());
  }

  // optional uint32 nMapId = 2;
  if (this->nmapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nmapid());
  }

  // optional float x = 3;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 4;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 5;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float Roll = 6;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // optional float Pitch = 7;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // optional float Yaw = 8;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 orientation = 9;
  if (this->orientation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->orientation());
  }

  // optional float fMoveSpeed = 10;
  if (this->fmovespeed() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 CHARACTER_STATE = 11;
  if (this->character_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->character_state());
  }

  // optional uint32 CHARACTER_SUB_STATE = 12;
  if (this->character_sub_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->character_sub_state());
  }

  // optional .proto3.eMoveType moveType = 13;
  if (this->movetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->movetype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlaceInfo*>(&from));
}

void PlaceInfo::MergeFrom(const PlaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.PlaceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.zid() != 0) {
    set_zid(from.zid());
  }
  if (from.nmapid() != 0) {
    set_nmapid(from.nmapid());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
  if (from.fmovespeed() != 0) {
    set_fmovespeed(from.fmovespeed());
  }
  if (from.character_state() != 0) {
    set_character_state(from.character_state());
  }
  if (from.character_sub_state() != 0) {
    set_character_sub_state(from.character_sub_state());
  }
  if (from.movetype() != 0) {
    set_movetype(from.movetype());
  }
}

void PlaceInfo::CopyFrom(const PlaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.PlaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceInfo::IsInitialized() const {

  return true;
}

void PlaceInfo::Swap(PlaceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceInfo::InternalSwap(PlaceInfo* other) {
  std::swap(zid_, other->zid_);
  std::swap(nmapid_, other->nmapid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(orientation_, other->orientation_);
  std::swap(fmovespeed_, other->fmovespeed_);
  std::swap(character_state_, other->character_state_);
  std::swap(character_sub_state_, other->character_sub_state_);
  std::swap(movetype_, other->movetype_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlaceInfo::GetTypeName() const {
  return "proto3.PlaceInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceInfo

// optional uint32 zid = 1;
void PlaceInfo::clear_zid() {
  zid_ = 0u;
}
 ::google::protobuf::uint32 PlaceInfo::zid() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.zid)
  return zid_;
}
 void PlaceInfo::set_zid(::google::protobuf::uint32 value) {
  
  zid_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.zid)
}

// optional uint32 nMapId = 2;
void PlaceInfo::clear_nmapid() {
  nmapid_ = 0u;
}
 ::google::protobuf::uint32 PlaceInfo::nmapid() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.nMapId)
  return nmapid_;
}
 void PlaceInfo::set_nmapid(::google::protobuf::uint32 value) {
  
  nmapid_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.nMapId)
}

// optional float x = 3;
void PlaceInfo::clear_x() {
  x_ = 0;
}
 float PlaceInfo::x() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.x)
  return x_;
}
 void PlaceInfo::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.x)
}

// optional float y = 4;
void PlaceInfo::clear_y() {
  y_ = 0;
}
 float PlaceInfo::y() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.y)
  return y_;
}
 void PlaceInfo::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.y)
}

// optional float z = 5;
void PlaceInfo::clear_z() {
  z_ = 0;
}
 float PlaceInfo::z() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.z)
  return z_;
}
 void PlaceInfo::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.z)
}

// optional float Roll = 6;
void PlaceInfo::clear_roll() {
  roll_ = 0;
}
 float PlaceInfo::roll() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.Roll)
  return roll_;
}
 void PlaceInfo::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.Roll)
}

// optional float Pitch = 7;
void PlaceInfo::clear_pitch() {
  pitch_ = 0;
}
 float PlaceInfo::pitch() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.Pitch)
  return pitch_;
}
 void PlaceInfo::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.Pitch)
}

// optional float Yaw = 8;
void PlaceInfo::clear_yaw() {
  yaw_ = 0;
}
 float PlaceInfo::yaw() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.Yaw)
  return yaw_;
}
 void PlaceInfo::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.Yaw)
}

// optional uint32 orientation = 9;
void PlaceInfo::clear_orientation() {
  orientation_ = 0u;
}
 ::google::protobuf::uint32 PlaceInfo::orientation() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.orientation)
  return orientation_;
}
 void PlaceInfo::set_orientation(::google::protobuf::uint32 value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.orientation)
}

// optional float fMoveSpeed = 10;
void PlaceInfo::clear_fmovespeed() {
  fmovespeed_ = 0;
}
 float PlaceInfo::fmovespeed() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.fMoveSpeed)
  return fmovespeed_;
}
 void PlaceInfo::set_fmovespeed(float value) {
  
  fmovespeed_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.fMoveSpeed)
}

// optional uint32 CHARACTER_STATE = 11;
void PlaceInfo::clear_character_state() {
  character_state_ = 0u;
}
 ::google::protobuf::uint32 PlaceInfo::character_state() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.CHARACTER_STATE)
  return character_state_;
}
 void PlaceInfo::set_character_state(::google::protobuf::uint32 value) {
  
  character_state_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.CHARACTER_STATE)
}

// optional uint32 CHARACTER_SUB_STATE = 12;
void PlaceInfo::clear_character_sub_state() {
  character_sub_state_ = 0u;
}
 ::google::protobuf::uint32 PlaceInfo::character_sub_state() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.CHARACTER_SUB_STATE)
  return character_sub_state_;
}
 void PlaceInfo::set_character_sub_state(::google::protobuf::uint32 value) {
  
  character_sub_state_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.CHARACTER_SUB_STATE)
}

// optional .proto3.eMoveType moveType = 13;
void PlaceInfo::clear_movetype() {
  movetype_ = 0;
}
 ::proto3::eMoveType PlaceInfo::movetype() const {
  // @@protoc_insertion_point(field_get:proto3.PlaceInfo.moveType)
  return static_cast< ::proto3::eMoveType >(movetype_);
}
 void PlaceInfo::set_movetype(::proto3::eMoveType value) {
  
  movetype_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlaceInfo.moveType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kIdFieldNumber;
const int PlayerInfo::kUidFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kLevelFieldNumber;
const int PlayerInfo::kEnergyFieldNumber;
const int PlayerInfo::kEnergyTimeFieldNumber;
const int PlayerInfo::kExpFieldNumber;
const int PlayerInfo::kGoldFieldNumber;
const int PlayerInfo::kMoneyFieldNumber;
const int PlayerInfo::kHonorFieldNumber;
const int PlayerInfo::kLastPlaceFieldNumber;
const int PlayerInfo::kCurrentTitleFieldNumber;
const int PlayerInfo::kArenaRankFieldNumber;
const int PlayerInfo::kArenaHonorFieldNumber;
const int PlayerInfo::kHuashanRankingFieldNumber;
const int PlayerInfo::kExtraFieldNumber;
const int PlayerInfo::kHPFieldNumber;
const int PlayerInfo::kMPFieldNumber;
const int PlayerInfo::kMaxHPFieldNumber;
const int PlayerInfo::kMaxMPFieldNumber;
const int PlayerInfo::kMartialclubIDFieldNumber;
const int PlayerInfo::kNBreakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  lastplace_ = const_cast< ::proto3::PlaceInfo*>(
      ::proto3::PlaceInfo::internal_default_instance());
#else
  lastplace_ = const_cast< ::proto3::PlaceInfo*>(&::proto3::PlaceInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  extra_ = const_cast< ::proto3::PlayerExtraInfo*>(
      ::proto3::PlayerExtraInfo::internal_default_instance());
#else
  extra_ = const_cast< ::proto3::PlayerExtraInfo*>(&::proto3::PlayerExtraInfo::default_instance());
#endif
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  energy_ = 0u;
  energytime_ = 0u;
  exp_ = 0u;
  gold_ = 0u;
  money_ = 0u;
  honor_ = 0u;
  lastplace_ = NULL;
  currenttitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arenarank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arenahonor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  huashanranking_ = 0u;
  extra_ = NULL;
  hp_ = 0u;
  mp_ = 0u;
  maxhp_ = 0u;
  maxmp_ = 0u;
  martialclubid_ = 0u;
  nbreak_ = 0u;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:proto3.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currenttitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arenarank_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arenahonor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete lastplace_;
    delete extra_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerInfo& PlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.PlayerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, level_);
  ZR_(energy_, gold_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(money_, honor_);
  if (GetArenaNoVirtual() == NULL && lastplace_ != NULL) delete lastplace_;
  lastplace_ = NULL;
  currenttitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arenarank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arenahonor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  huashanranking_ = 0u;
  if (GetArenaNoVirtual() == NULL && extra_ != NULL) delete extra_;
  extra_ = NULL;
  ZR_(hp_, nbreak_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.PlayerInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (tag == 34) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.PlayerInfo.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 5;
      case 5: {
        if (tag == 40) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_energyTime;
        break;
      }

      // optional uint32 energyTime = 6;
      case 6: {
        if (tag == 48) {
         parse_energyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energytime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 9;
      case 9: {
        if (tag == 72) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 10;
      case 10: {
        if (tag == 80) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_money;
        break;
      }

      // optional uint32 money = 11;
      case 11: {
        if (tag == 88) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 12;
      case 12: {
        if (tag == 96) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_lastPlace;
        break;
      }

      // optional .proto3.PlaceInfo lastPlace = 13;
      case 13: {
        if (tag == 106) {
         parse_lastPlace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastplace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_CurrentTitle;
        break;
      }

      // optional string CurrentTitle = 21;
      case 21: {
        if (tag == 170) {
         parse_CurrentTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currenttitle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currenttitle().data(), this->currenttitle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.PlayerInfo.CurrentTitle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_ArenaRank;
        break;
      }

      // optional string ArenaRank = 22;
      case 22: {
        if (tag == 178) {
         parse_ArenaRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arenarank()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arenarank().data(), this->arenarank().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.PlayerInfo.ArenaRank"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_ArenaHonor;
        break;
      }

      // optional string ArenaHonor = 23;
      case 23: {
        if (tag == 186) {
         parse_ArenaHonor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arenahonor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arenahonor().data(), this->arenahonor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.PlayerInfo.ArenaHonor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_HuashanRanking;
        break;
      }

      // optional uint32 HuashanRanking = 25;
      case 25: {
        if (tag == 200) {
         parse_HuashanRanking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &huashanranking_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_extra;
        break;
      }

      // optional .proto3.PlayerExtraInfo extra = 30;
      case 30: {
        if (tag == 242) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_HP;
        break;
      }

      // optional uint32 HP = 50;
      case 50: {
        if (tag == 400) {
         parse_HP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_MP;
        break;
      }

      // optional uint32 MP = 51;
      case 51: {
        if (tag == 408) {
         parse_MP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_MaxHP;
        break;
      }

      // optional uint32 MaxHP = 52;
      case 52: {
        if (tag == 416) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_MaxMP;
        break;
      }

      // optional uint32 MaxMP = 53;
      case 53: {
        if (tag == 424) {
         parse_MaxMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_MartialclubID;
        break;
      }

      // optional uint32 MartialclubID = 54;
      case 54: {
        if (tag == 432) {
         parse_MartialclubID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &martialclubid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_nBreak;
        break;
      }

      // optional uint32 nBreak = 55;
      case 55: {
        if (tag == 440) {
         parse_nBreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbreak_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.PlayerInfo)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional string uid = 4;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.PlayerInfo.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid(), output);
  }

  // optional uint32 energy = 5;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->energy(), output);
  }

  // optional uint32 energyTime = 6;
  if (this->energytime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->energytime(), output);
  }

  // optional uint32 exp = 9;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exp(), output);
  }

  // optional uint32 gold = 10;
  if (this->gold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gold(), output);
  }

  // optional uint32 money = 11;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->money(), output);
  }

  // optional uint32 honor = 12;
  if (this->honor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->honor(), output);
  }

  // optional .proto3.PlaceInfo lastPlace = 13;
  if (this->has_lastplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->lastplace_, output);
  }

  // optional string CurrentTitle = 21;
  if (this->currenttitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currenttitle().data(), this->currenttitle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.PlayerInfo.CurrentTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->currenttitle(), output);
  }

  // optional string ArenaRank = 22;
  if (this->arenarank().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arenarank().data(), this->arenarank().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.PlayerInfo.ArenaRank");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->arenarank(), output);
  }

  // optional string ArenaHonor = 23;
  if (this->arenahonor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arenahonor().data(), this->arenahonor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.PlayerInfo.ArenaHonor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->arenahonor(), output);
  }

  // optional uint32 HuashanRanking = 25;
  if (this->huashanranking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->huashanranking(), output);
  }

  // optional .proto3.PlayerExtraInfo extra = 30;
  if (this->has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, *this->extra_, output);
  }

  // optional uint32 HP = 50;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->hp(), output);
  }

  // optional uint32 MP = 51;
  if (this->mp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->mp(), output);
  }

  // optional uint32 MaxHP = 52;
  if (this->maxhp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->maxhp(), output);
  }

  // optional uint32 MaxMP = 53;
  if (this->maxmp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->maxmp(), output);
  }

  // optional uint32 MartialclubID = 54;
  if (this->martialclubid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->martialclubid(), output);
  }

  // optional uint32 nBreak = 55;
  if (this->nbreak() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->nbreak(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.PlayerInfo)
}

int PlayerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.PlayerInfo)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional string uid = 4;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 energy = 5;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->energy());
  }

  // optional uint32 energyTime = 6;
  if (this->energytime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->energytime());
  }

  // optional uint32 exp = 9;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // optional uint32 gold = 10;
  if (this->gold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gold());
  }

  // optional uint32 money = 11;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->money());
  }

  // optional uint32 honor = 12;
  if (this->honor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->honor());
  }

  // optional .proto3.PlaceInfo lastPlace = 13;
  if (this->has_lastplace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lastplace_);
  }

  // optional string CurrentTitle = 21;
  if (this->currenttitle().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currenttitle());
  }

  // optional string ArenaRank = 22;
  if (this->arenarank().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arenarank());
  }

  // optional string ArenaHonor = 23;
  if (this->arenahonor().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arenahonor());
  }

  // optional uint32 HuashanRanking = 25;
  if (this->huashanranking() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->huashanranking());
  }

  // optional .proto3.PlayerExtraInfo extra = 30;
  if (this->has_extra()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extra_);
  }

  // optional uint32 HP = 50;
  if (this->hp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  // optional uint32 MP = 51;
  if (this->mp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mp());
  }

  // optional uint32 MaxHP = 52;
  if (this->maxhp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxhp());
  }

  // optional uint32 MaxMP = 53;
  if (this->maxmp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxmp());
  }

  // optional uint32 MartialclubID = 54;
  if (this->martialclubid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->martialclubid());
  }

  // optional uint32 nBreak = 55;
  if (this->nbreak() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nbreak());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfo*>(&from));
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
  if (from.energytime() != 0) {
    set_energytime(from.energytime());
  }
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.gold() != 0) {
    set_gold(from.gold());
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.honor() != 0) {
    set_honor(from.honor());
  }
  if (from.has_lastplace()) {
    mutable_lastplace()->::proto3::PlaceInfo::MergeFrom(from.lastplace());
  }
  if (from.currenttitle().size() > 0) {

    currenttitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currenttitle_);
  }
  if (from.arenarank().size() > 0) {

    arenarank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arenarank_);
  }
  if (from.arenahonor().size() > 0) {

    arenahonor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arenahonor_);
  }
  if (from.huashanranking() != 0) {
    set_huashanranking(from.huashanranking());
  }
  if (from.has_extra()) {
    mutable_extra()->::proto3::PlayerExtraInfo::MergeFrom(from.extra());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.mp() != 0) {
    set_mp(from.mp());
  }
  if (from.maxhp() != 0) {
    set_maxhp(from.maxhp());
  }
  if (from.maxmp() != 0) {
    set_maxmp(from.maxmp());
  }
  if (from.martialclubid() != 0) {
    set_martialclubid(from.martialclubid());
  }
  if (from.nbreak() != 0) {
    set_nbreak(from.nbreak());
  }
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  std::swap(id_, other->id_);
  uid_.Swap(&other->uid_);
  name_.Swap(&other->name_);
  std::swap(level_, other->level_);
  std::swap(energy_, other->energy_);
  std::swap(energytime_, other->energytime_);
  std::swap(exp_, other->exp_);
  std::swap(gold_, other->gold_);
  std::swap(money_, other->money_);
  std::swap(honor_, other->honor_);
  std::swap(lastplace_, other->lastplace_);
  currenttitle_.Swap(&other->currenttitle_);
  arenarank_.Swap(&other->arenarank_);
  arenahonor_.Swap(&other->arenahonor_);
  std::swap(huashanranking_, other->huashanranking_);
  std::swap(extra_, other->extra_);
  std::swap(hp_, other->hp_);
  std::swap(mp_, other->mp_);
  std::swap(maxhp_, other->maxhp_);
  std::swap(maxmp_, other->maxmp_);
  std::swap(martialclubid_, other->martialclubid_);
  std::swap(nbreak_, other->nbreak_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerInfo::GetTypeName() const {
  return "proto3.PlayerInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional uint32 id = 1;
void PlayerInfo::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.id)
  return id_;
}
 void PlayerInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.id)
}

// optional string uid = 4;
void PlayerInfo::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.uid)
}
 void PlayerInfo::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.PlayerInfo.uid)
}
 void PlayerInfo::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.PlayerInfo.uid)
}
 ::std::string* PlayerInfo::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.PlayerInfo.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.PlayerInfo.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.PlayerInfo.uid)
}

// optional string name = 2;
void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.name)
}
 void PlayerInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.PlayerInfo.name)
}
 void PlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.PlayerInfo.name)
}
 ::std::string* PlayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto3.PlayerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.PlayerInfo.name)
}

// optional uint32 level = 3;
void PlayerInfo::clear_level() {
  level_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.level)
  return level_;
}
 void PlayerInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.level)
}

// optional uint32 energy = 5;
void PlayerInfo::clear_energy() {
  energy_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::energy() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.energy)
  return energy_;
}
 void PlayerInfo::set_energy(::google::protobuf::uint32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.energy)
}

// optional uint32 energyTime = 6;
void PlayerInfo::clear_energytime() {
  energytime_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::energytime() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.energyTime)
  return energytime_;
}
 void PlayerInfo::set_energytime(::google::protobuf::uint32 value) {
  
  energytime_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.energyTime)
}

// optional uint32 exp = 9;
void PlayerInfo::clear_exp() {
  exp_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::exp() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.exp)
  return exp_;
}
 void PlayerInfo::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.exp)
}

// optional uint32 gold = 10;
void PlayerInfo::clear_gold() {
  gold_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::gold() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.gold)
  return gold_;
}
 void PlayerInfo::set_gold(::google::protobuf::uint32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.gold)
}

// optional uint32 money = 11;
void PlayerInfo::clear_money() {
  money_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::money() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.money)
  return money_;
}
 void PlayerInfo::set_money(::google::protobuf::uint32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.money)
}

// optional uint32 honor = 12;
void PlayerInfo::clear_honor() {
  honor_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::honor() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.honor)
  return honor_;
}
 void PlayerInfo::set_honor(::google::protobuf::uint32 value) {
  
  honor_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.honor)
}

// optional .proto3.PlaceInfo lastPlace = 13;
bool PlayerInfo::has_lastplace() const {
  return !_is_default_instance_ && lastplace_ != NULL;
}
void PlayerInfo::clear_lastplace() {
  if (GetArenaNoVirtual() == NULL && lastplace_ != NULL) delete lastplace_;
  lastplace_ = NULL;
}
const ::proto3::PlaceInfo& PlayerInfo::lastplace() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.lastPlace)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return lastplace_ != NULL ? *lastplace_ : *default_instance().lastplace_;
#else
  return lastplace_ != NULL ? *lastplace_ : *default_instance_->lastplace_;
#endif
}
::proto3::PlaceInfo* PlayerInfo::mutable_lastplace() {
  
  if (lastplace_ == NULL) {
    lastplace_ = new ::proto3::PlaceInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.PlayerInfo.lastPlace)
  return lastplace_;
}
::proto3::PlaceInfo* PlayerInfo::release_lastplace() {
  // @@protoc_insertion_point(field_release:proto3.PlayerInfo.lastPlace)
  
  ::proto3::PlaceInfo* temp = lastplace_;
  lastplace_ = NULL;
  return temp;
}
void PlayerInfo::set_allocated_lastplace(::proto3::PlaceInfo* lastplace) {
  delete lastplace_;
  lastplace_ = lastplace;
  if (lastplace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.PlayerInfo.lastPlace)
}

// optional string CurrentTitle = 21;
void PlayerInfo::clear_currenttitle() {
  currenttitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::currenttitle() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.CurrentTitle)
  return currenttitle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_currenttitle(const ::std::string& value) {
  
  currenttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.CurrentTitle)
}
 void PlayerInfo::set_currenttitle(const char* value) {
  
  currenttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.PlayerInfo.CurrentTitle)
}
 void PlayerInfo::set_currenttitle(const char* value, size_t size) {
  
  currenttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.PlayerInfo.CurrentTitle)
}
 ::std::string* PlayerInfo::mutable_currenttitle() {
  
  // @@protoc_insertion_point(field_mutable:proto3.PlayerInfo.CurrentTitle)
  return currenttitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_currenttitle() {
  // @@protoc_insertion_point(field_release:proto3.PlayerInfo.CurrentTitle)
  
  return currenttitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_currenttitle(::std::string* currenttitle) {
  if (currenttitle != NULL) {
    
  } else {
    
  }
  currenttitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currenttitle);
  // @@protoc_insertion_point(field_set_allocated:proto3.PlayerInfo.CurrentTitle)
}

// optional string ArenaRank = 22;
void PlayerInfo::clear_arenarank() {
  arenarank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::arenarank() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.ArenaRank)
  return arenarank_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_arenarank(const ::std::string& value) {
  
  arenarank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.ArenaRank)
}
 void PlayerInfo::set_arenarank(const char* value) {
  
  arenarank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.PlayerInfo.ArenaRank)
}
 void PlayerInfo::set_arenarank(const char* value, size_t size) {
  
  arenarank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.PlayerInfo.ArenaRank)
}
 ::std::string* PlayerInfo::mutable_arenarank() {
  
  // @@protoc_insertion_point(field_mutable:proto3.PlayerInfo.ArenaRank)
  return arenarank_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_arenarank() {
  // @@protoc_insertion_point(field_release:proto3.PlayerInfo.ArenaRank)
  
  return arenarank_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_arenarank(::std::string* arenarank) {
  if (arenarank != NULL) {
    
  } else {
    
  }
  arenarank_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arenarank);
  // @@protoc_insertion_point(field_set_allocated:proto3.PlayerInfo.ArenaRank)
}

// optional string ArenaHonor = 23;
void PlayerInfo::clear_arenahonor() {
  arenahonor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::arenahonor() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.ArenaHonor)
  return arenahonor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_arenahonor(const ::std::string& value) {
  
  arenahonor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.ArenaHonor)
}
 void PlayerInfo::set_arenahonor(const char* value) {
  
  arenahonor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.PlayerInfo.ArenaHonor)
}
 void PlayerInfo::set_arenahonor(const char* value, size_t size) {
  
  arenahonor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.PlayerInfo.ArenaHonor)
}
 ::std::string* PlayerInfo::mutable_arenahonor() {
  
  // @@protoc_insertion_point(field_mutable:proto3.PlayerInfo.ArenaHonor)
  return arenahonor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_arenahonor() {
  // @@protoc_insertion_point(field_release:proto3.PlayerInfo.ArenaHonor)
  
  return arenahonor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_arenahonor(::std::string* arenahonor) {
  if (arenahonor != NULL) {
    
  } else {
    
  }
  arenahonor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arenahonor);
  // @@protoc_insertion_point(field_set_allocated:proto3.PlayerInfo.ArenaHonor)
}

// optional uint32 HuashanRanking = 25;
void PlayerInfo::clear_huashanranking() {
  huashanranking_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::huashanranking() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.HuashanRanking)
  return huashanranking_;
}
 void PlayerInfo::set_huashanranking(::google::protobuf::uint32 value) {
  
  huashanranking_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.HuashanRanking)
}

// optional .proto3.PlayerExtraInfo extra = 30;
bool PlayerInfo::has_extra() const {
  return !_is_default_instance_ && extra_ != NULL;
}
void PlayerInfo::clear_extra() {
  if (GetArenaNoVirtual() == NULL && extra_ != NULL) delete extra_;
  extra_ = NULL;
}
const ::proto3::PlayerExtraInfo& PlayerInfo::extra() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.extra)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return extra_ != NULL ? *extra_ : *default_instance().extra_;
#else
  return extra_ != NULL ? *extra_ : *default_instance_->extra_;
#endif
}
::proto3::PlayerExtraInfo* PlayerInfo::mutable_extra() {
  
  if (extra_ == NULL) {
    extra_ = new ::proto3::PlayerExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.PlayerInfo.extra)
  return extra_;
}
::proto3::PlayerExtraInfo* PlayerInfo::release_extra() {
  // @@protoc_insertion_point(field_release:proto3.PlayerInfo.extra)
  
  ::proto3::PlayerExtraInfo* temp = extra_;
  extra_ = NULL;
  return temp;
}
void PlayerInfo::set_allocated_extra(::proto3::PlayerExtraInfo* extra) {
  delete extra_;
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.PlayerInfo.extra)
}

// optional uint32 HP = 50;
void PlayerInfo::clear_hp() {
  hp_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::hp() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.HP)
  return hp_;
}
 void PlayerInfo::set_hp(::google::protobuf::uint32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.HP)
}

// optional uint32 MP = 51;
void PlayerInfo::clear_mp() {
  mp_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::mp() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.MP)
  return mp_;
}
 void PlayerInfo::set_mp(::google::protobuf::uint32 value) {
  
  mp_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.MP)
}

// optional uint32 MaxHP = 52;
void PlayerInfo::clear_maxhp() {
  maxhp_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.MaxHP)
  return maxhp_;
}
 void PlayerInfo::set_maxhp(::google::protobuf::uint32 value) {
  
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.MaxHP)
}

// optional uint32 MaxMP = 53;
void PlayerInfo::clear_maxmp() {
  maxmp_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::maxmp() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.MaxMP)
  return maxmp_;
}
 void PlayerInfo::set_maxmp(::google::protobuf::uint32 value) {
  
  maxmp_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.MaxMP)
}

// optional uint32 MartialclubID = 54;
void PlayerInfo::clear_martialclubid() {
  martialclubid_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::martialclubid() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.MartialclubID)
  return martialclubid_;
}
 void PlayerInfo::set_martialclubid(::google::protobuf::uint32 value) {
  
  martialclubid_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.MartialclubID)
}

// optional uint32 nBreak = 55;
void PlayerInfo::clear_nbreak() {
  nbreak_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::nbreak() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerInfo.nBreak)
  return nbreak_;
}
 void PlayerInfo::set_nbreak(::google::protobuf::uint32 value) {
  
  nbreak_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerInfo.nBreak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerExtraInfo_BattleSkill::PlayerExtraInfo_BattleSkill()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.PlayerExtraInfo.BattleSkill)
}

void PlayerExtraInfo_BattleSkill::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerExtraInfo_BattleSkill::PlayerExtraInfo_BattleSkill(const PlayerExtraInfo_BattleSkill& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.PlayerExtraInfo.BattleSkill)
}

void PlayerExtraInfo_BattleSkill::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PlayerExtraInfo_BattleSkill::~PlayerExtraInfo_BattleSkill() {
  // @@protoc_insertion_point(destructor:proto3.PlayerExtraInfo.BattleSkill)
  SharedDtor();
}

void PlayerExtraInfo_BattleSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerExtraInfo_BattleSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerExtraInfo_BattleSkill& PlayerExtraInfo_BattleSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

PlayerExtraInfo_BattleSkill* PlayerExtraInfo_BattleSkill::default_instance_ = NULL;

PlayerExtraInfo_BattleSkill* PlayerExtraInfo_BattleSkill::New(::google::protobuf::Arena* arena) const {
  PlayerExtraInfo_BattleSkill* n = new PlayerExtraInfo_BattleSkill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerExtraInfo_BattleSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.PlayerExtraInfo.BattleSkill)
}

bool PlayerExtraInfo_BattleSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.PlayerExtraInfo.BattleSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.PlayerExtraInfo.BattleSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.PlayerExtraInfo.BattleSkill)
  return false;
#undef DO_
}

void PlayerExtraInfo_BattleSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.PlayerExtraInfo.BattleSkill)
  // @@protoc_insertion_point(serialize_end:proto3.PlayerExtraInfo.BattleSkill)
}

int PlayerExtraInfo_BattleSkill::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.PlayerExtraInfo.BattleSkill)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExtraInfo_BattleSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerExtraInfo_BattleSkill*>(&from));
}

void PlayerExtraInfo_BattleSkill::MergeFrom(const PlayerExtraInfo_BattleSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.PlayerExtraInfo.BattleSkill)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void PlayerExtraInfo_BattleSkill::CopyFrom(const PlayerExtraInfo_BattleSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.PlayerExtraInfo.BattleSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExtraInfo_BattleSkill::IsInitialized() const {

  return true;
}

void PlayerExtraInfo_BattleSkill::Swap(PlayerExtraInfo_BattleSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerExtraInfo_BattleSkill::InternalSwap(PlayerExtraInfo_BattleSkill* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerExtraInfo_BattleSkill::GetTypeName() const {
  return "proto3.PlayerExtraInfo.BattleSkill";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerExtraInfo_DragonScroll::PlayerExtraInfo_DragonScroll()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.PlayerExtraInfo.DragonScroll)
}

void PlayerExtraInfo_DragonScroll::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerExtraInfo_DragonScroll::PlayerExtraInfo_DragonScroll(const PlayerExtraInfo_DragonScroll& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.PlayerExtraInfo.DragonScroll)
}

void PlayerExtraInfo_DragonScroll::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PlayerExtraInfo_DragonScroll::~PlayerExtraInfo_DragonScroll() {
  // @@protoc_insertion_point(destructor:proto3.PlayerExtraInfo.DragonScroll)
  SharedDtor();
}

void PlayerExtraInfo_DragonScroll::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerExtraInfo_DragonScroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerExtraInfo_DragonScroll& PlayerExtraInfo_DragonScroll::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

PlayerExtraInfo_DragonScroll* PlayerExtraInfo_DragonScroll::default_instance_ = NULL;

PlayerExtraInfo_DragonScroll* PlayerExtraInfo_DragonScroll::New(::google::protobuf::Arena* arena) const {
  PlayerExtraInfo_DragonScroll* n = new PlayerExtraInfo_DragonScroll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerExtraInfo_DragonScroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.PlayerExtraInfo.DragonScroll)
}

bool PlayerExtraInfo_DragonScroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.PlayerExtraInfo.DragonScroll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.PlayerExtraInfo.DragonScroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.PlayerExtraInfo.DragonScroll)
  return false;
#undef DO_
}

void PlayerExtraInfo_DragonScroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.PlayerExtraInfo.DragonScroll)
  // @@protoc_insertion_point(serialize_end:proto3.PlayerExtraInfo.DragonScroll)
}

int PlayerExtraInfo_DragonScroll::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.PlayerExtraInfo.DragonScroll)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExtraInfo_DragonScroll::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerExtraInfo_DragonScroll*>(&from));
}

void PlayerExtraInfo_DragonScroll::MergeFrom(const PlayerExtraInfo_DragonScroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.PlayerExtraInfo.DragonScroll)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void PlayerExtraInfo_DragonScroll::CopyFrom(const PlayerExtraInfo_DragonScroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.PlayerExtraInfo.DragonScroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExtraInfo_DragonScroll::IsInitialized() const {

  return true;
}

void PlayerExtraInfo_DragonScroll::Swap(PlayerExtraInfo_DragonScroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerExtraInfo_DragonScroll::InternalSwap(PlayerExtraInfo_DragonScroll* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerExtraInfo_DragonScroll::GetTypeName() const {
  return "proto3.PlayerExtraInfo.DragonScroll";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerExtraInfo_OccultUnderstanding::PlayerExtraInfo_OccultUnderstanding()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.PlayerExtraInfo.OccultUnderstanding)
}

void PlayerExtraInfo_OccultUnderstanding::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerExtraInfo_OccultUnderstanding::PlayerExtraInfo_OccultUnderstanding(const PlayerExtraInfo_OccultUnderstanding& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.PlayerExtraInfo.OccultUnderstanding)
}

void PlayerExtraInfo_OccultUnderstanding::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PlayerExtraInfo_OccultUnderstanding::~PlayerExtraInfo_OccultUnderstanding() {
  // @@protoc_insertion_point(destructor:proto3.PlayerExtraInfo.OccultUnderstanding)
  SharedDtor();
}

void PlayerExtraInfo_OccultUnderstanding::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerExtraInfo_OccultUnderstanding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerExtraInfo_OccultUnderstanding& PlayerExtraInfo_OccultUnderstanding::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

PlayerExtraInfo_OccultUnderstanding* PlayerExtraInfo_OccultUnderstanding::default_instance_ = NULL;

PlayerExtraInfo_OccultUnderstanding* PlayerExtraInfo_OccultUnderstanding::New(::google::protobuf::Arena* arena) const {
  PlayerExtraInfo_OccultUnderstanding* n = new PlayerExtraInfo_OccultUnderstanding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerExtraInfo_OccultUnderstanding::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.PlayerExtraInfo.OccultUnderstanding)
}

bool PlayerExtraInfo_OccultUnderstanding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.PlayerExtraInfo.OccultUnderstanding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.PlayerExtraInfo.OccultUnderstanding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.PlayerExtraInfo.OccultUnderstanding)
  return false;
#undef DO_
}

void PlayerExtraInfo_OccultUnderstanding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.PlayerExtraInfo.OccultUnderstanding)
  // @@protoc_insertion_point(serialize_end:proto3.PlayerExtraInfo.OccultUnderstanding)
}

int PlayerExtraInfo_OccultUnderstanding::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.PlayerExtraInfo.OccultUnderstanding)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExtraInfo_OccultUnderstanding::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerExtraInfo_OccultUnderstanding*>(&from));
}

void PlayerExtraInfo_OccultUnderstanding::MergeFrom(const PlayerExtraInfo_OccultUnderstanding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.PlayerExtraInfo.OccultUnderstanding)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void PlayerExtraInfo_OccultUnderstanding::CopyFrom(const PlayerExtraInfo_OccultUnderstanding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.PlayerExtraInfo.OccultUnderstanding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExtraInfo_OccultUnderstanding::IsInitialized() const {

  return true;
}

void PlayerExtraInfo_OccultUnderstanding::Swap(PlayerExtraInfo_OccultUnderstanding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerExtraInfo_OccultUnderstanding::InternalSwap(PlayerExtraInfo_OccultUnderstanding* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerExtraInfo_OccultUnderstanding::GetTypeName() const {
  return "proto3.PlayerExtraInfo.OccultUnderstanding";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerExtraInfo_SkillTreeId::PlayerExtraInfo_SkillTreeId()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.PlayerExtraInfo.SkillTreeId)
}

void PlayerExtraInfo_SkillTreeId::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerExtraInfo_SkillTreeId::PlayerExtraInfo_SkillTreeId(const PlayerExtraInfo_SkillTreeId& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.PlayerExtraInfo.SkillTreeId)
}

void PlayerExtraInfo_SkillTreeId::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PlayerExtraInfo_SkillTreeId::~PlayerExtraInfo_SkillTreeId() {
  // @@protoc_insertion_point(destructor:proto3.PlayerExtraInfo.SkillTreeId)
  SharedDtor();
}

void PlayerExtraInfo_SkillTreeId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerExtraInfo_SkillTreeId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerExtraInfo_SkillTreeId& PlayerExtraInfo_SkillTreeId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

PlayerExtraInfo_SkillTreeId* PlayerExtraInfo_SkillTreeId::default_instance_ = NULL;

PlayerExtraInfo_SkillTreeId* PlayerExtraInfo_SkillTreeId::New(::google::protobuf::Arena* arena) const {
  PlayerExtraInfo_SkillTreeId* n = new PlayerExtraInfo_SkillTreeId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerExtraInfo_SkillTreeId::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.PlayerExtraInfo.SkillTreeId)
}

bool PlayerExtraInfo_SkillTreeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.PlayerExtraInfo.SkillTreeId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.PlayerExtraInfo.SkillTreeId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.PlayerExtraInfo.SkillTreeId)
  return false;
#undef DO_
}

void PlayerExtraInfo_SkillTreeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.PlayerExtraInfo.SkillTreeId)
  // @@protoc_insertion_point(serialize_end:proto3.PlayerExtraInfo.SkillTreeId)
}

int PlayerExtraInfo_SkillTreeId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.PlayerExtraInfo.SkillTreeId)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExtraInfo_SkillTreeId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerExtraInfo_SkillTreeId*>(&from));
}

void PlayerExtraInfo_SkillTreeId::MergeFrom(const PlayerExtraInfo_SkillTreeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.PlayerExtraInfo.SkillTreeId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void PlayerExtraInfo_SkillTreeId::CopyFrom(const PlayerExtraInfo_SkillTreeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.PlayerExtraInfo.SkillTreeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExtraInfo_SkillTreeId::IsInitialized() const {

  return true;
}

void PlayerExtraInfo_SkillTreeId::Swap(PlayerExtraInfo_SkillTreeId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerExtraInfo_SkillTreeId::InternalSwap(PlayerExtraInfo_SkillTreeId* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerExtraInfo_SkillTreeId::GetTypeName() const {
  return "proto3.PlayerExtraInfo.SkillTreeId";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerExtraInfo_KuangfuHouseSkill::PlayerExtraInfo_KuangfuHouseSkill()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.PlayerExtraInfo.KuangfuHouseSkill)
}

void PlayerExtraInfo_KuangfuHouseSkill::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerExtraInfo_KuangfuHouseSkill::PlayerExtraInfo_KuangfuHouseSkill(const PlayerExtraInfo_KuangfuHouseSkill& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.PlayerExtraInfo.KuangfuHouseSkill)
}

void PlayerExtraInfo_KuangfuHouseSkill::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PlayerExtraInfo_KuangfuHouseSkill::~PlayerExtraInfo_KuangfuHouseSkill() {
  // @@protoc_insertion_point(destructor:proto3.PlayerExtraInfo.KuangfuHouseSkill)
  SharedDtor();
}

void PlayerExtraInfo_KuangfuHouseSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerExtraInfo_KuangfuHouseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerExtraInfo_KuangfuHouseSkill& PlayerExtraInfo_KuangfuHouseSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

PlayerExtraInfo_KuangfuHouseSkill* PlayerExtraInfo_KuangfuHouseSkill::default_instance_ = NULL;

PlayerExtraInfo_KuangfuHouseSkill* PlayerExtraInfo_KuangfuHouseSkill::New(::google::protobuf::Arena* arena) const {
  PlayerExtraInfo_KuangfuHouseSkill* n = new PlayerExtraInfo_KuangfuHouseSkill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerExtraInfo_KuangfuHouseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.PlayerExtraInfo.KuangfuHouseSkill)
}

bool PlayerExtraInfo_KuangfuHouseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.PlayerExtraInfo.KuangfuHouseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.PlayerExtraInfo.KuangfuHouseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.PlayerExtraInfo.KuangfuHouseSkill)
  return false;
#undef DO_
}

void PlayerExtraInfo_KuangfuHouseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.PlayerExtraInfo.KuangfuHouseSkill)
  // @@protoc_insertion_point(serialize_end:proto3.PlayerExtraInfo.KuangfuHouseSkill)
}

int PlayerExtraInfo_KuangfuHouseSkill::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.PlayerExtraInfo.KuangfuHouseSkill)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExtraInfo_KuangfuHouseSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerExtraInfo_KuangfuHouseSkill*>(&from));
}

void PlayerExtraInfo_KuangfuHouseSkill::MergeFrom(const PlayerExtraInfo_KuangfuHouseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.PlayerExtraInfo.KuangfuHouseSkill)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void PlayerExtraInfo_KuangfuHouseSkill::CopyFrom(const PlayerExtraInfo_KuangfuHouseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.PlayerExtraInfo.KuangfuHouseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExtraInfo_KuangfuHouseSkill::IsInitialized() const {

  return true;
}

void PlayerExtraInfo_KuangfuHouseSkill::Swap(PlayerExtraInfo_KuangfuHouseSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerExtraInfo_KuangfuHouseSkill::InternalSwap(PlayerExtraInfo_KuangfuHouseSkill* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerExtraInfo_KuangfuHouseSkill::GetTypeName() const {
  return "proto3.PlayerExtraInfo.KuangfuHouseSkill";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerExtraInfo::kBattleskillFieldNumber;
const int PlayerExtraInfo::kDragonscrollFieldNumber;
const int PlayerExtraInfo::kOccultunderstandingFieldNumber;
const int PlayerExtraInfo::kSkilltreeidFieldNumber;
const int PlayerExtraInfo::kKuangfuHouseIdFieldNumber;
const int PlayerExtraInfo::kKuangfuHouseContributionFieldNumber;
const int PlayerExtraInfo::kKuangfuhouseskillFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerExtraInfo::PlayerExtraInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.PlayerExtraInfo)
}

void PlayerExtraInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerExtraInfo::PlayerExtraInfo(const PlayerExtraInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.PlayerExtraInfo)
}

void PlayerExtraInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  kuangfuhouseid_ = 0u;
  kuangfuhousecontribution_ = 0u;
}

PlayerExtraInfo::~PlayerExtraInfo() {
  // @@protoc_insertion_point(destructor:proto3.PlayerExtraInfo)
  SharedDtor();
}

void PlayerExtraInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerExtraInfo& PlayerExtraInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

PlayerExtraInfo* PlayerExtraInfo::default_instance_ = NULL;

PlayerExtraInfo* PlayerExtraInfo::New(::google::protobuf::Arena* arena) const {
  PlayerExtraInfo* n = new PlayerExtraInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.PlayerExtraInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerExtraInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerExtraInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(kuangfuhouseid_, kuangfuhousecontribution_);

#undef ZR_HELPER_
#undef ZR_

  battleskill_.Clear();
  dragonscroll_.Clear();
  occultunderstanding_.Clear();
  skilltreeid_.Clear();
  kuangfuhouseskill_.Clear();
}

bool PlayerExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.PlayerExtraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 KuangfuHouseId = 14;
      case 14: {
        if (tag == 112) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kuangfuhouseid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_battleskill;
        break;
      }

      // repeated .proto3.PlayerExtraInfo.BattleSkill battleskill = 15;
      case 15: {
        if (tag == 122) {
         parse_battleskill:
          DO_(input->IncrementRecursionDepth());
         parse_loop_battleskill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_battleskill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_battleskill;
        if (input->ExpectTag(130)) goto parse_loop_dragonscroll;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.PlayerExtraInfo.DragonScroll dragonscroll = 16;
      case 16: {
        if (tag == 130) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dragonscroll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dragonscroll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_dragonscroll;
        if (input->ExpectTag(138)) goto parse_loop_occultunderstanding;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.PlayerExtraInfo.OccultUnderstanding occultunderstanding = 17;
      case 17: {
        if (tag == 138) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_occultunderstanding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_occultunderstanding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_occultunderstanding;
        if (input->ExpectTag(146)) goto parse_loop_skilltreeid;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.PlayerExtraInfo.SkillTreeId skilltreeid = 18;
      case 18: {
        if (tag == 146) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_skilltreeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_skilltreeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_skilltreeid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(152)) goto parse_KuangfuHouseContribution;
        break;
      }

      // optional uint32 KuangfuHouseContribution = 19;
      case 19: {
        if (tag == 152) {
         parse_KuangfuHouseContribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kuangfuhousecontribution_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_kuangfuhouseskill;
        break;
      }

      // repeated .proto3.PlayerExtraInfo.KuangfuHouseSkill kuangfuhouseskill = 20;
      case 20: {
        if (tag == 162) {
         parse_kuangfuhouseskill:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kuangfuhouseskill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kuangfuhouseskill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_kuangfuhouseskill;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.PlayerExtraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.PlayerExtraInfo)
  return false;
#undef DO_
}

void PlayerExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.PlayerExtraInfo)
  // optional uint32 KuangfuHouseId = 14;
  if (this->kuangfuhouseid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->kuangfuhouseid(), output);
  }

  // repeated .proto3.PlayerExtraInfo.BattleSkill battleskill = 15;
  for (unsigned int i = 0, n = this->battleskill_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->battleskill(i), output);
  }

  // repeated .proto3.PlayerExtraInfo.DragonScroll dragonscroll = 16;
  for (unsigned int i = 0, n = this->dragonscroll_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->dragonscroll(i), output);
  }

  // repeated .proto3.PlayerExtraInfo.OccultUnderstanding occultunderstanding = 17;
  for (unsigned int i = 0, n = this->occultunderstanding_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->occultunderstanding(i), output);
  }

  // repeated .proto3.PlayerExtraInfo.SkillTreeId skilltreeid = 18;
  for (unsigned int i = 0, n = this->skilltreeid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->skilltreeid(i), output);
  }

  // optional uint32 KuangfuHouseContribution = 19;
  if (this->kuangfuhousecontribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->kuangfuhousecontribution(), output);
  }

  // repeated .proto3.PlayerExtraInfo.KuangfuHouseSkill kuangfuhouseskill = 20;
  for (unsigned int i = 0, n = this->kuangfuhouseskill_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->kuangfuhouseskill(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.PlayerExtraInfo)
}

int PlayerExtraInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.PlayerExtraInfo)
  int total_size = 0;

  // optional uint32 KuangfuHouseId = 14;
  if (this->kuangfuhouseid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kuangfuhouseid());
  }

  // optional uint32 KuangfuHouseContribution = 19;
  if (this->kuangfuhousecontribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kuangfuhousecontribution());
  }

  // repeated .proto3.PlayerExtraInfo.BattleSkill battleskill = 15;
  total_size += 1 * this->battleskill_size();
  for (int i = 0; i < this->battleskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleskill(i));
  }

  // repeated .proto3.PlayerExtraInfo.DragonScroll dragonscroll = 16;
  total_size += 2 * this->dragonscroll_size();
  for (int i = 0; i < this->dragonscroll_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dragonscroll(i));
  }

  // repeated .proto3.PlayerExtraInfo.OccultUnderstanding occultunderstanding = 17;
  total_size += 2 * this->occultunderstanding_size();
  for (int i = 0; i < this->occultunderstanding_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occultunderstanding(i));
  }

  // repeated .proto3.PlayerExtraInfo.SkillTreeId skilltreeid = 18;
  total_size += 2 * this->skilltreeid_size();
  for (int i = 0; i < this->skilltreeid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilltreeid(i));
  }

  // repeated .proto3.PlayerExtraInfo.KuangfuHouseSkill kuangfuhouseskill = 20;
  total_size += 2 * this->kuangfuhouseskill_size();
  for (int i = 0; i < this->kuangfuhouseskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kuangfuhouseskill(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExtraInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerExtraInfo*>(&from));
}

void PlayerExtraInfo::MergeFrom(const PlayerExtraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.PlayerExtraInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  battleskill_.MergeFrom(from.battleskill_);
  dragonscroll_.MergeFrom(from.dragonscroll_);
  occultunderstanding_.MergeFrom(from.occultunderstanding_);
  skilltreeid_.MergeFrom(from.skilltreeid_);
  kuangfuhouseskill_.MergeFrom(from.kuangfuhouseskill_);
  if (from.kuangfuhouseid() != 0) {
    set_kuangfuhouseid(from.kuangfuhouseid());
  }
  if (from.kuangfuhousecontribution() != 0) {
    set_kuangfuhousecontribution(from.kuangfuhousecontribution());
  }
}

void PlayerExtraInfo::CopyFrom(const PlayerExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.PlayerExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExtraInfo::IsInitialized() const {

  return true;
}

void PlayerExtraInfo::Swap(PlayerExtraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerExtraInfo::InternalSwap(PlayerExtraInfo* other) {
  battleskill_.UnsafeArenaSwap(&other->battleskill_);
  dragonscroll_.UnsafeArenaSwap(&other->dragonscroll_);
  occultunderstanding_.UnsafeArenaSwap(&other->occultunderstanding_);
  skilltreeid_.UnsafeArenaSwap(&other->skilltreeid_);
  std::swap(kuangfuhouseid_, other->kuangfuhouseid_);
  std::swap(kuangfuhousecontribution_, other->kuangfuhousecontribution_);
  kuangfuhouseskill_.UnsafeArenaSwap(&other->kuangfuhouseskill_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PlayerExtraInfo::GetTypeName() const {
  return "proto3.PlayerExtraInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerExtraInfo_BattleSkill

// -------------------------------------------------------------------

// PlayerExtraInfo_DragonScroll

// -------------------------------------------------------------------

// PlayerExtraInfo_OccultUnderstanding

// -------------------------------------------------------------------

// PlayerExtraInfo_SkillTreeId

// -------------------------------------------------------------------

// PlayerExtraInfo_KuangfuHouseSkill

// -------------------------------------------------------------------

// PlayerExtraInfo

// repeated .proto3.PlayerExtraInfo.BattleSkill battleskill = 15;
int PlayerExtraInfo::battleskill_size() const {
  return battleskill_.size();
}
void PlayerExtraInfo::clear_battleskill() {
  battleskill_.Clear();
}
const ::proto3::PlayerExtraInfo_BattleSkill& PlayerExtraInfo::battleskill(int index) const {
  // @@protoc_insertion_point(field_get:proto3.PlayerExtraInfo.battleskill)
  return battleskill_.Get(index);
}
::proto3::PlayerExtraInfo_BattleSkill* PlayerExtraInfo::mutable_battleskill(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.PlayerExtraInfo.battleskill)
  return battleskill_.Mutable(index);
}
::proto3::PlayerExtraInfo_BattleSkill* PlayerExtraInfo::add_battleskill() {
  // @@protoc_insertion_point(field_add:proto3.PlayerExtraInfo.battleskill)
  return battleskill_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_BattleSkill >*
PlayerExtraInfo::mutable_battleskill() {
  // @@protoc_insertion_point(field_mutable_list:proto3.PlayerExtraInfo.battleskill)
  return &battleskill_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_BattleSkill >&
PlayerExtraInfo::battleskill() const {
  // @@protoc_insertion_point(field_list:proto3.PlayerExtraInfo.battleskill)
  return battleskill_;
}

// repeated .proto3.PlayerExtraInfo.DragonScroll dragonscroll = 16;
int PlayerExtraInfo::dragonscroll_size() const {
  return dragonscroll_.size();
}
void PlayerExtraInfo::clear_dragonscroll() {
  dragonscroll_.Clear();
}
const ::proto3::PlayerExtraInfo_DragonScroll& PlayerExtraInfo::dragonscroll(int index) const {
  // @@protoc_insertion_point(field_get:proto3.PlayerExtraInfo.dragonscroll)
  return dragonscroll_.Get(index);
}
::proto3::PlayerExtraInfo_DragonScroll* PlayerExtraInfo::mutable_dragonscroll(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.PlayerExtraInfo.dragonscroll)
  return dragonscroll_.Mutable(index);
}
::proto3::PlayerExtraInfo_DragonScroll* PlayerExtraInfo::add_dragonscroll() {
  // @@protoc_insertion_point(field_add:proto3.PlayerExtraInfo.dragonscroll)
  return dragonscroll_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_DragonScroll >*
PlayerExtraInfo::mutable_dragonscroll() {
  // @@protoc_insertion_point(field_mutable_list:proto3.PlayerExtraInfo.dragonscroll)
  return &dragonscroll_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_DragonScroll >&
PlayerExtraInfo::dragonscroll() const {
  // @@protoc_insertion_point(field_list:proto3.PlayerExtraInfo.dragonscroll)
  return dragonscroll_;
}

// repeated .proto3.PlayerExtraInfo.OccultUnderstanding occultunderstanding = 17;
int PlayerExtraInfo::occultunderstanding_size() const {
  return occultunderstanding_.size();
}
void PlayerExtraInfo::clear_occultunderstanding() {
  occultunderstanding_.Clear();
}
const ::proto3::PlayerExtraInfo_OccultUnderstanding& PlayerExtraInfo::occultunderstanding(int index) const {
  // @@protoc_insertion_point(field_get:proto3.PlayerExtraInfo.occultunderstanding)
  return occultunderstanding_.Get(index);
}
::proto3::PlayerExtraInfo_OccultUnderstanding* PlayerExtraInfo::mutable_occultunderstanding(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.PlayerExtraInfo.occultunderstanding)
  return occultunderstanding_.Mutable(index);
}
::proto3::PlayerExtraInfo_OccultUnderstanding* PlayerExtraInfo::add_occultunderstanding() {
  // @@protoc_insertion_point(field_add:proto3.PlayerExtraInfo.occultunderstanding)
  return occultunderstanding_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_OccultUnderstanding >*
PlayerExtraInfo::mutable_occultunderstanding() {
  // @@protoc_insertion_point(field_mutable_list:proto3.PlayerExtraInfo.occultunderstanding)
  return &occultunderstanding_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_OccultUnderstanding >&
PlayerExtraInfo::occultunderstanding() const {
  // @@protoc_insertion_point(field_list:proto3.PlayerExtraInfo.occultunderstanding)
  return occultunderstanding_;
}

// repeated .proto3.PlayerExtraInfo.SkillTreeId skilltreeid = 18;
int PlayerExtraInfo::skilltreeid_size() const {
  return skilltreeid_.size();
}
void PlayerExtraInfo::clear_skilltreeid() {
  skilltreeid_.Clear();
}
const ::proto3::PlayerExtraInfo_SkillTreeId& PlayerExtraInfo::skilltreeid(int index) const {
  // @@protoc_insertion_point(field_get:proto3.PlayerExtraInfo.skilltreeid)
  return skilltreeid_.Get(index);
}
::proto3::PlayerExtraInfo_SkillTreeId* PlayerExtraInfo::mutable_skilltreeid(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.PlayerExtraInfo.skilltreeid)
  return skilltreeid_.Mutable(index);
}
::proto3::PlayerExtraInfo_SkillTreeId* PlayerExtraInfo::add_skilltreeid() {
  // @@protoc_insertion_point(field_add:proto3.PlayerExtraInfo.skilltreeid)
  return skilltreeid_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_SkillTreeId >*
PlayerExtraInfo::mutable_skilltreeid() {
  // @@protoc_insertion_point(field_mutable_list:proto3.PlayerExtraInfo.skilltreeid)
  return &skilltreeid_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_SkillTreeId >&
PlayerExtraInfo::skilltreeid() const {
  // @@protoc_insertion_point(field_list:proto3.PlayerExtraInfo.skilltreeid)
  return skilltreeid_;
}

// optional uint32 KuangfuHouseId = 14;
void PlayerExtraInfo::clear_kuangfuhouseid() {
  kuangfuhouseid_ = 0u;
}
 ::google::protobuf::uint32 PlayerExtraInfo::kuangfuhouseid() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerExtraInfo.KuangfuHouseId)
  return kuangfuhouseid_;
}
 void PlayerExtraInfo::set_kuangfuhouseid(::google::protobuf::uint32 value) {
  
  kuangfuhouseid_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerExtraInfo.KuangfuHouseId)
}

// optional uint32 KuangfuHouseContribution = 19;
void PlayerExtraInfo::clear_kuangfuhousecontribution() {
  kuangfuhousecontribution_ = 0u;
}
 ::google::protobuf::uint32 PlayerExtraInfo::kuangfuhousecontribution() const {
  // @@protoc_insertion_point(field_get:proto3.PlayerExtraInfo.KuangfuHouseContribution)
  return kuangfuhousecontribution_;
}
 void PlayerExtraInfo::set_kuangfuhousecontribution(::google::protobuf::uint32 value) {
  
  kuangfuhousecontribution_ = value;
  // @@protoc_insertion_point(field_set:proto3.PlayerExtraInfo.KuangfuHouseContribution)
}

// repeated .proto3.PlayerExtraInfo.KuangfuHouseSkill kuangfuhouseskill = 20;
int PlayerExtraInfo::kuangfuhouseskill_size() const {
  return kuangfuhouseskill_.size();
}
void PlayerExtraInfo::clear_kuangfuhouseskill() {
  kuangfuhouseskill_.Clear();
}
const ::proto3::PlayerExtraInfo_KuangfuHouseSkill& PlayerExtraInfo::kuangfuhouseskill(int index) const {
  // @@protoc_insertion_point(field_get:proto3.PlayerExtraInfo.kuangfuhouseskill)
  return kuangfuhouseskill_.Get(index);
}
::proto3::PlayerExtraInfo_KuangfuHouseSkill* PlayerExtraInfo::mutable_kuangfuhouseskill(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.PlayerExtraInfo.kuangfuhouseskill)
  return kuangfuhouseskill_.Mutable(index);
}
::proto3::PlayerExtraInfo_KuangfuHouseSkill* PlayerExtraInfo::add_kuangfuhouseskill() {
  // @@protoc_insertion_point(field_add:proto3.PlayerExtraInfo.kuangfuhouseskill)
  return kuangfuhouseskill_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_KuangfuHouseSkill >*
PlayerExtraInfo::mutable_kuangfuhouseskill() {
  // @@protoc_insertion_point(field_mutable_list:proto3.PlayerExtraInfo.kuangfuhouseskill)
  return &kuangfuhouseskill_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerExtraInfo_KuangfuHouseSkill >&
PlayerExtraInfo::kuangfuhouseskill() const {
  // @@protoc_insertion_point(field_list:proto3.PlayerExtraInfo.kuangfuhouseskill)
  return kuangfuhouseskill_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfo::kUidFieldNumber;
const int TeamInfo::kTitleFieldNumber;
const int TeamInfo::kLevelLimitFieldNumber;
const int TeamInfo::kProfessionLimitFieldNumber;
const int TeamInfo::kDungeonIdFieldNumber;
const int TeamInfo::kDifficultyFieldNumber;
const int TeamInfo::kCapacityFieldNumber;
const int TeamInfo::kMembersFieldNumber;
const int TeamInfo::kRecruitsFieldNumber;
const int TeamInfo::kJoinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfo::TeamInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.TeamInfo)
}

void TeamInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.TeamInfo)
}

void TeamInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  levellimit_ = 0u;
  professionlimit_ = 0u;
  dungeonid_ = 0u;
  difficulty_ = 0u;
  capacity_ = 0u;
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:proto3.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TeamInfo& TeamInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New(::google::protobuf::Arena* arena) const {
  TeamInfo* n = new TeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.TeamInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TeamInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TeamInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(levellimit_, difficulty_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capacity_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  members_.Clear();
  recruits_.Clear();
  joins_.Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.TeamInfo.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_levelLimit;
        break;
      }

      // optional uint32 levelLimit = 2;
      case 2: {
        if (tag == 16) {
         parse_levelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levellimit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_professionLimit;
        break;
      }

      // optional uint32 professionLimit = 3;
      case 3: {
        if (tag == 24) {
         parse_professionLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &professionlimit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dungeonId;
        break;
      }

      // optional uint32 dungeonId = 4;
      case 4: {
        if (tag == 32) {
         parse_dungeonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeonid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_difficulty;
        break;
      }

      // optional uint32 difficulty = 5;
      case 5: {
        if (tag == 40) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_capacity;
        break;
      }

      // optional uint32 capacity = 6;
      case 6: {
        if (tag == 48) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_members;
        break;
      }

      // repeated .proto3.PlayerInfo members = 7;
      case 7: {
        if (tag == 58) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_members;
        if (input->ExpectTag(66)) goto parse_loop_recruits;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.PlayerInfo recruits = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_recruits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recruits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_recruits;
        if (input->ExpectTag(74)) goto parse_loop_joins;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.PlayerInfo joins = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_joins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_joins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_joins;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(90)) goto parse_uid;
        break;
      }

      // optional string uid = 11;
      case 11: {
        if (tag == 90) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.TeamInfo.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.TeamInfo)
  // optional string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.TeamInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional uint32 levelLimit = 2;
  if (this->levellimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levellimit(), output);
  }

  // optional uint32 professionLimit = 3;
  if (this->professionlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->professionlimit(), output);
  }

  // optional uint32 dungeonId = 4;
  if (this->dungeonid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dungeonid(), output);
  }

  // optional uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->difficulty(), output);
  }

  // optional uint32 capacity = 6;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->capacity(), output);
  }

  // repeated .proto3.PlayerInfo members = 7;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->members(i), output);
  }

  // repeated .proto3.PlayerInfo recruits = 8;
  for (unsigned int i = 0, n = this->recruits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->recruits(i), output);
  }

  // repeated .proto3.PlayerInfo joins = 9;
  for (unsigned int i = 0, n = this->joins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->joins(i), output);
  }

  // optional string uid = 11;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.TeamInfo.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.TeamInfo)
}

int TeamInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.TeamInfo)
  int total_size = 0;

  // optional string uid = 11;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional uint32 levelLimit = 2;
  if (this->levellimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->levellimit());
  }

  // optional uint32 professionLimit = 3;
  if (this->professionlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->professionlimit());
  }

  // optional uint32 dungeonId = 4;
  if (this->dungeonid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeonid());
  }

  // optional uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  // optional uint32 capacity = 6;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capacity());
  }

  // repeated .proto3.PlayerInfo members = 7;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .proto3.PlayerInfo recruits = 8;
  total_size += 1 * this->recruits_size();
  for (int i = 0; i < this->recruits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recruits(i));
  }

  // repeated .proto3.PlayerInfo joins = 9;
  total_size += 1 * this->joins_size();
  for (int i = 0; i < this->joins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joins(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TeamInfo*>(&from));
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.TeamInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  members_.MergeFrom(from.members_);
  recruits_.MergeFrom(from.recruits_);
  joins_.MergeFrom(from.joins_);
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.levellimit() != 0) {
    set_levellimit(from.levellimit());
  }
  if (from.professionlimit() != 0) {
    set_professionlimit(from.professionlimit());
  }
  if (from.dungeonid() != 0) {
    set_dungeonid(from.dungeonid());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {

  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfo::InternalSwap(TeamInfo* other) {
  uid_.Swap(&other->uid_);
  title_.Swap(&other->title_);
  std::swap(levellimit_, other->levellimit_);
  std::swap(professionlimit_, other->professionlimit_);
  std::swap(dungeonid_, other->dungeonid_);
  std::swap(difficulty_, other->difficulty_);
  std::swap(capacity_, other->capacity_);
  members_.UnsafeArenaSwap(&other->members_);
  recruits_.UnsafeArenaSwap(&other->recruits_);
  joins_.UnsafeArenaSwap(&other->joins_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TeamInfo::GetTypeName() const {
  return "proto3.TeamInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamInfo

// optional string uid = 11;
void TeamInfo::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TeamInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamInfo::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.TeamInfo.uid)
}
 void TeamInfo::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.TeamInfo.uid)
}
 void TeamInfo::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.TeamInfo.uid)
}
 ::std::string* TeamInfo::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.TeamInfo.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TeamInfo::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.TeamInfo.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamInfo::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.TeamInfo.uid)
}

// optional string title = 1;
void TeamInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TeamInfo::title() const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamInfo::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.TeamInfo.title)
}
 void TeamInfo::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.TeamInfo.title)
}
 void TeamInfo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.TeamInfo.title)
}
 ::std::string* TeamInfo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:proto3.TeamInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TeamInfo::release_title() {
  // @@protoc_insertion_point(field_release:proto3.TeamInfo.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto3.TeamInfo.title)
}

// optional uint32 levelLimit = 2;
void TeamInfo::clear_levellimit() {
  levellimit_ = 0u;
}
 ::google::protobuf::uint32 TeamInfo::levellimit() const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.levelLimit)
  return levellimit_;
}
 void TeamInfo::set_levellimit(::google::protobuf::uint32 value) {
  
  levellimit_ = value;
  // @@protoc_insertion_point(field_set:proto3.TeamInfo.levelLimit)
}

// optional uint32 professionLimit = 3;
void TeamInfo::clear_professionlimit() {
  professionlimit_ = 0u;
}
 ::google::protobuf::uint32 TeamInfo::professionlimit() const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.professionLimit)
  return professionlimit_;
}
 void TeamInfo::set_professionlimit(::google::protobuf::uint32 value) {
  
  professionlimit_ = value;
  // @@protoc_insertion_point(field_set:proto3.TeamInfo.professionLimit)
}

// optional uint32 dungeonId = 4;
void TeamInfo::clear_dungeonid() {
  dungeonid_ = 0u;
}
 ::google::protobuf::uint32 TeamInfo::dungeonid() const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.dungeonId)
  return dungeonid_;
}
 void TeamInfo::set_dungeonid(::google::protobuf::uint32 value) {
  
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TeamInfo.dungeonId)
}

// optional uint32 difficulty = 5;
void TeamInfo::clear_difficulty() {
  difficulty_ = 0u;
}
 ::google::protobuf::uint32 TeamInfo::difficulty() const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.difficulty)
  return difficulty_;
}
 void TeamInfo::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto3.TeamInfo.difficulty)
}

// optional uint32 capacity = 6;
void TeamInfo::clear_capacity() {
  capacity_ = 0u;
}
 ::google::protobuf::uint32 TeamInfo::capacity() const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.capacity)
  return capacity_;
}
 void TeamInfo::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:proto3.TeamInfo.capacity)
}

// repeated .proto3.PlayerInfo members = 7;
int TeamInfo::members_size() const {
  return members_.size();
}
void TeamInfo::clear_members() {
  members_.Clear();
}
const ::proto3::PlayerInfo& TeamInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.members)
  return members_.Get(index);
}
::proto3::PlayerInfo* TeamInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.TeamInfo.members)
  return members_.Mutable(index);
}
::proto3::PlayerInfo* TeamInfo::add_members() {
  // @@protoc_insertion_point(field_add:proto3.TeamInfo.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >*
TeamInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto3.TeamInfo.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >&
TeamInfo::members() const {
  // @@protoc_insertion_point(field_list:proto3.TeamInfo.members)
  return members_;
}

// repeated .proto3.PlayerInfo recruits = 8;
int TeamInfo::recruits_size() const {
  return recruits_.size();
}
void TeamInfo::clear_recruits() {
  recruits_.Clear();
}
const ::proto3::PlayerInfo& TeamInfo::recruits(int index) const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.recruits)
  return recruits_.Get(index);
}
::proto3::PlayerInfo* TeamInfo::mutable_recruits(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.TeamInfo.recruits)
  return recruits_.Mutable(index);
}
::proto3::PlayerInfo* TeamInfo::add_recruits() {
  // @@protoc_insertion_point(field_add:proto3.TeamInfo.recruits)
  return recruits_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >*
TeamInfo::mutable_recruits() {
  // @@protoc_insertion_point(field_mutable_list:proto3.TeamInfo.recruits)
  return &recruits_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >&
TeamInfo::recruits() const {
  // @@protoc_insertion_point(field_list:proto3.TeamInfo.recruits)
  return recruits_;
}

// repeated .proto3.PlayerInfo joins = 9;
int TeamInfo::joins_size() const {
  return joins_.size();
}
void TeamInfo::clear_joins() {
  joins_.Clear();
}
const ::proto3::PlayerInfo& TeamInfo::joins(int index) const {
  // @@protoc_insertion_point(field_get:proto3.TeamInfo.joins)
  return joins_.Get(index);
}
::proto3::PlayerInfo* TeamInfo::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.TeamInfo.joins)
  return joins_.Mutable(index);
}
::proto3::PlayerInfo* TeamInfo::add_joins() {
  // @@protoc_insertion_point(field_add:proto3.TeamInfo.joins)
  return joins_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >*
TeamInfo::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:proto3.TeamInfo.joins)
  return &joins_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >&
TeamInfo::joins() const {
  // @@protoc_insertion_point(field_list:proto3.TeamInfo.joins)
  return joins_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_FriendList::User_FriendList()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.User_FriendList)
}

void User_FriendList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

User_FriendList::User_FriendList(const User_FriendList& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.User_FriendList)
}

void User_FriendList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

User_FriendList::~User_FriendList() {
  // @@protoc_insertion_point(destructor:proto3.User_FriendList)
  SharedDtor();
}

void User_FriendList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void User_FriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const User_FriendList& User_FriendList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

User_FriendList* User_FriendList::default_instance_ = NULL;

User_FriendList* User_FriendList::New(::google::protobuf::Arena* arena) const {
  User_FriendList* n = new User_FriendList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User_FriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.User_FriendList)
}

bool User_FriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.User_FriendList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.User_FriendList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.User_FriendList)
  return false;
#undef DO_
}

void User_FriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.User_FriendList)
  // @@protoc_insertion_point(serialize_end:proto3.User_FriendList)
}

int User_FriendList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.User_FriendList)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_FriendList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const User_FriendList*>(&from));
}

void User_FriendList::MergeFrom(const User_FriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.User_FriendList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void User_FriendList::CopyFrom(const User_FriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.User_FriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_FriendList::IsInitialized() const {

  return true;
}

void User_FriendList::Swap(User_FriendList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_FriendList::InternalSwap(User_FriendList* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string User_FriendList::GetTypeName() const {
  return "proto3.User_FriendList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User_FriendList

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_Title::User_Title()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.User_Title)
}

void User_Title::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

User_Title::User_Title(const User_Title& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.User_Title)
}

void User_Title::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

User_Title::~User_Title() {
  // @@protoc_insertion_point(destructor:proto3.User_Title)
  SharedDtor();
}

void User_Title::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void User_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const User_Title& User_Title::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

User_Title* User_Title::default_instance_ = NULL;

User_Title* User_Title::New(::google::protobuf::Arena* arena) const {
  User_Title* n = new User_Title;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User_Title::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.User_Title)
}

bool User_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.User_Title)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.User_Title)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.User_Title)
  return false;
#undef DO_
}

void User_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.User_Title)
  // @@protoc_insertion_point(serialize_end:proto3.User_Title)
}

int User_Title::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.User_Title)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_Title::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const User_Title*>(&from));
}

void User_Title::MergeFrom(const User_Title& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.User_Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void User_Title::CopyFrom(const User_Title& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.User_Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Title::IsInitialized() const {

  return true;
}

void User_Title::Swap(User_Title* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_Title::InternalSwap(User_Title* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string User_Title::GetTypeName() const {
  return "proto3.User_Title";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User_Title

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NPCBaseData::kNIDFieldNumber;
const int NPCBaseData::kNNameIdFieldNumber;
const int NPCBaseData::kNCharacterBPIdFieldNumber;
const int NPCBaseData::kNAnimBPIdFieldNumber;
const int NPCBaseData::kNDialogeIdFieldNumber;
const int NPCBaseData::kNTaskIdFieldNumber;
const int NPCBaseData::kNIntroductionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NPCBaseData::NPCBaseData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.NPCBaseData)
}

void NPCBaseData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NPCBaseData::NPCBaseData(const NPCBaseData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.NPCBaseData)
}

void NPCBaseData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nid_ = 0u;
  nnameid_ = 0u;
  ncharacterbpid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nanimbpid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ndialogeid_ = 0u;
  ntaskid_ = 0u;
  nintroductionid_ = 0u;
}

NPCBaseData::~NPCBaseData() {
  // @@protoc_insertion_point(destructor:proto3.NPCBaseData)
  SharedDtor();
}

void NPCBaseData::SharedDtor() {
  ncharacterbpid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nanimbpid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NPCBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NPCBaseData& NPCBaseData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

NPCBaseData* NPCBaseData::default_instance_ = NULL;

NPCBaseData* NPCBaseData::New(::google::protobuf::Arena* arena) const {
  NPCBaseData* n = new NPCBaseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NPCBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.NPCBaseData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NPCBaseData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NPCBaseData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nid_, nnameid_);
  ZR_(ndialogeid_, nintroductionid_);
  ncharacterbpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nanimbpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool NPCBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.NPCBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nNameId;
        break;
      }

      // optional uint32 nNameId = 2;
      case 2: {
        if (tag == 16) {
         parse_nNameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nCharacterBPId;
        break;
      }

      // optional string nCharacterBPId = 3;
      case 3: {
        if (tag == 26) {
         parse_nCharacterBPId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ncharacterbpid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ncharacterbpid().data(), this->ncharacterbpid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.NPCBaseData.nCharacterBPId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nAnimBPId;
        break;
      }

      // optional string nAnimBPId = 4;
      case 4: {
        if (tag == 34) {
         parse_nAnimBPId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nanimbpid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nanimbpid().data(), this->nanimbpid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.NPCBaseData.nAnimBPId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nDialogeId;
        break;
      }

      // optional uint32 nDialogeId = 5;
      case 5: {
        if (tag == 40) {
         parse_nDialogeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndialogeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nTaskId;
        break;
      }

      // optional uint32 nTaskId = 6;
      case 6: {
        if (tag == 48) {
         parse_nTaskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntaskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nIntroductionId;
        break;
      }

      // optional uint32 nIntroductionId = 7;
      case 7: {
        if (tag == 56) {
         parse_nIntroductionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nintroductionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.NPCBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.NPCBaseData)
  return false;
#undef DO_
}

void NPCBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.NPCBaseData)
  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nnameid(), output);
  }

  // optional string nCharacterBPId = 3;
  if (this->ncharacterbpid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ncharacterbpid().data(), this->ncharacterbpid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.NPCBaseData.nCharacterBPId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ncharacterbpid(), output);
  }

  // optional string nAnimBPId = 4;
  if (this->nanimbpid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nanimbpid().data(), this->nanimbpid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.NPCBaseData.nAnimBPId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nanimbpid(), output);
  }

  // optional uint32 nDialogeId = 5;
  if (this->ndialogeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ndialogeid(), output);
  }

  // optional uint32 nTaskId = 6;
  if (this->ntaskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ntaskid(), output);
  }

  // optional uint32 nIntroductionId = 7;
  if (this->nintroductionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nintroductionid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.NPCBaseData)
}

int NPCBaseData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.NPCBaseData)
  int total_size = 0;

  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nid());
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnameid());
  }

  // optional string nCharacterBPId = 3;
  if (this->ncharacterbpid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ncharacterbpid());
  }

  // optional string nAnimBPId = 4;
  if (this->nanimbpid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nanimbpid());
  }

  // optional uint32 nDialogeId = 5;
  if (this->ndialogeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndialogeid());
  }

  // optional uint32 nTaskId = 6;
  if (this->ntaskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntaskid());
  }

  // optional uint32 nIntroductionId = 7;
  if (this->nintroductionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nintroductionid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCBaseData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NPCBaseData*>(&from));
}

void NPCBaseData::MergeFrom(const NPCBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.NPCBaseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.nnameid() != 0) {
    set_nnameid(from.nnameid());
  }
  if (from.ncharacterbpid().size() > 0) {

    ncharacterbpid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ncharacterbpid_);
  }
  if (from.nanimbpid().size() > 0) {

    nanimbpid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nanimbpid_);
  }
  if (from.ndialogeid() != 0) {
    set_ndialogeid(from.ndialogeid());
  }
  if (from.ntaskid() != 0) {
    set_ntaskid(from.ntaskid());
  }
  if (from.nintroductionid() != 0) {
    set_nintroductionid(from.nintroductionid());
  }
}

void NPCBaseData::CopyFrom(const NPCBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.NPCBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCBaseData::IsInitialized() const {

  return true;
}

void NPCBaseData::Swap(NPCBaseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NPCBaseData::InternalSwap(NPCBaseData* other) {
  std::swap(nid_, other->nid_);
  std::swap(nnameid_, other->nnameid_);
  ncharacterbpid_.Swap(&other->ncharacterbpid_);
  nanimbpid_.Swap(&other->nanimbpid_);
  std::swap(ndialogeid_, other->ndialogeid_);
  std::swap(ntaskid_, other->ntaskid_);
  std::swap(nintroductionid_, other->nintroductionid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NPCBaseData::GetTypeName() const {
  return "proto3.NPCBaseData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NPCBaseData

// optional uint32 nID = 1;
void NPCBaseData::clear_nid() {
  nid_ = 0u;
}
 ::google::protobuf::uint32 NPCBaseData::nid() const {
  // @@protoc_insertion_point(field_get:proto3.NPCBaseData.nID)
  return nid_;
}
 void NPCBaseData::set_nid(::google::protobuf::uint32 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:proto3.NPCBaseData.nID)
}

// optional uint32 nNameId = 2;
void NPCBaseData::clear_nnameid() {
  nnameid_ = 0u;
}
 ::google::protobuf::uint32 NPCBaseData::nnameid() const {
  // @@protoc_insertion_point(field_get:proto3.NPCBaseData.nNameId)
  return nnameid_;
}
 void NPCBaseData::set_nnameid(::google::protobuf::uint32 value) {
  
  nnameid_ = value;
  // @@protoc_insertion_point(field_set:proto3.NPCBaseData.nNameId)
}

// optional string nCharacterBPId = 3;
void NPCBaseData::clear_ncharacterbpid() {
  ncharacterbpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NPCBaseData::ncharacterbpid() const {
  // @@protoc_insertion_point(field_get:proto3.NPCBaseData.nCharacterBPId)
  return ncharacterbpid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NPCBaseData::set_ncharacterbpid(const ::std::string& value) {
  
  ncharacterbpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.NPCBaseData.nCharacterBPId)
}
 void NPCBaseData::set_ncharacterbpid(const char* value) {
  
  ncharacterbpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.NPCBaseData.nCharacterBPId)
}
 void NPCBaseData::set_ncharacterbpid(const char* value, size_t size) {
  
  ncharacterbpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.NPCBaseData.nCharacterBPId)
}
 ::std::string* NPCBaseData::mutable_ncharacterbpid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.NPCBaseData.nCharacterBPId)
  return ncharacterbpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NPCBaseData::release_ncharacterbpid() {
  // @@protoc_insertion_point(field_release:proto3.NPCBaseData.nCharacterBPId)
  
  return ncharacterbpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NPCBaseData::set_allocated_ncharacterbpid(::std::string* ncharacterbpid) {
  if (ncharacterbpid != NULL) {
    
  } else {
    
  }
  ncharacterbpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ncharacterbpid);
  // @@protoc_insertion_point(field_set_allocated:proto3.NPCBaseData.nCharacterBPId)
}

// optional string nAnimBPId = 4;
void NPCBaseData::clear_nanimbpid() {
  nanimbpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NPCBaseData::nanimbpid() const {
  // @@protoc_insertion_point(field_get:proto3.NPCBaseData.nAnimBPId)
  return nanimbpid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NPCBaseData::set_nanimbpid(const ::std::string& value) {
  
  nanimbpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.NPCBaseData.nAnimBPId)
}
 void NPCBaseData::set_nanimbpid(const char* value) {
  
  nanimbpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.NPCBaseData.nAnimBPId)
}
 void NPCBaseData::set_nanimbpid(const char* value, size_t size) {
  
  nanimbpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.NPCBaseData.nAnimBPId)
}
 ::std::string* NPCBaseData::mutable_nanimbpid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.NPCBaseData.nAnimBPId)
  return nanimbpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NPCBaseData::release_nanimbpid() {
  // @@protoc_insertion_point(field_release:proto3.NPCBaseData.nAnimBPId)
  
  return nanimbpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NPCBaseData::set_allocated_nanimbpid(::std::string* nanimbpid) {
  if (nanimbpid != NULL) {
    
  } else {
    
  }
  nanimbpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nanimbpid);
  // @@protoc_insertion_point(field_set_allocated:proto3.NPCBaseData.nAnimBPId)
}

// optional uint32 nDialogeId = 5;
void NPCBaseData::clear_ndialogeid() {
  ndialogeid_ = 0u;
}
 ::google::protobuf::uint32 NPCBaseData::ndialogeid() const {
  // @@protoc_insertion_point(field_get:proto3.NPCBaseData.nDialogeId)
  return ndialogeid_;
}
 void NPCBaseData::set_ndialogeid(::google::protobuf::uint32 value) {
  
  ndialogeid_ = value;
  // @@protoc_insertion_point(field_set:proto3.NPCBaseData.nDialogeId)
}

// optional uint32 nTaskId = 6;
void NPCBaseData::clear_ntaskid() {
  ntaskid_ = 0u;
}
 ::google::protobuf::uint32 NPCBaseData::ntaskid() const {
  // @@protoc_insertion_point(field_get:proto3.NPCBaseData.nTaskId)
  return ntaskid_;
}
 void NPCBaseData::set_ntaskid(::google::protobuf::uint32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:proto3.NPCBaseData.nTaskId)
}

// optional uint32 nIntroductionId = 7;
void NPCBaseData::clear_nintroductionid() {
  nintroductionid_ = 0u;
}
 ::google::protobuf::uint32 NPCBaseData::nintroductionid() const {
  // @@protoc_insertion_point(field_get:proto3.NPCBaseData.nIntroductionId)
  return nintroductionid_;
}
 void NPCBaseData::set_nintroductionid(::google::protobuf::uint32 value) {
  
  nintroductionid_ = value;
  // @@protoc_insertion_point(field_set:proto3.NPCBaseData.nIntroductionId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserUpgradeBaseData::kNIDFieldNumber;
const int UserUpgradeBaseData::kNExperienceFieldNumber;
const int UserUpgradeBaseData::kNSumExperienceFieldNumber;
const int UserUpgradeBaseData::kNPowerFieldNumber;
const int UserUpgradeBaseData::kNSkillPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserUpgradeBaseData::UserUpgradeBaseData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.UserUpgradeBaseData)
}

void UserUpgradeBaseData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserUpgradeBaseData::UserUpgradeBaseData(const UserUpgradeBaseData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.UserUpgradeBaseData)
}

void UserUpgradeBaseData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nid_ = 0u;
  nexperience_ = 0u;
  nsumexperience_ = 0u;
  npower_ = 0u;
  nskillpoint_ = 0u;
}

UserUpgradeBaseData::~UserUpgradeBaseData() {
  // @@protoc_insertion_point(destructor:proto3.UserUpgradeBaseData)
  SharedDtor();
}

void UserUpgradeBaseData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserUpgradeBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserUpgradeBaseData& UserUpgradeBaseData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

UserUpgradeBaseData* UserUpgradeBaseData::default_instance_ = NULL;

UserUpgradeBaseData* UserUpgradeBaseData::New(::google::protobuf::Arena* arena) const {
  UserUpgradeBaseData* n = new UserUpgradeBaseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserUpgradeBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.UserUpgradeBaseData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserUpgradeBaseData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserUpgradeBaseData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nid_, nskillpoint_);

#undef ZR_HELPER_
#undef ZR_

}

bool UserUpgradeBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.UserUpgradeBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nExperience;
        break;
      }

      // optional uint32 nExperience = 2;
      case 2: {
        if (tag == 16) {
         parse_nExperience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexperience_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nSumExperience;
        break;
      }

      // optional uint32 nSumExperience = 3;
      case 3: {
        if (tag == 24) {
         parse_nSumExperience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsumexperience_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nPower;
        break;
      }

      // optional uint32 nPower = 4;
      case 4: {
        if (tag == 32) {
         parse_nPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npower_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nSkillPoint;
        break;
      }

      // optional uint32 nSkillPoint = 5;
      case 5: {
        if (tag == 40) {
         parse_nSkillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nskillpoint_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.UserUpgradeBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.UserUpgradeBaseData)
  return false;
#undef DO_
}

void UserUpgradeBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.UserUpgradeBaseData)
  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nExperience = 2;
  if (this->nexperience() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nexperience(), output);
  }

  // optional uint32 nSumExperience = 3;
  if (this->nsumexperience() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nsumexperience(), output);
  }

  // optional uint32 nPower = 4;
  if (this->npower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npower(), output);
  }

  // optional uint32 nSkillPoint = 5;
  if (this->nskillpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nskillpoint(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.UserUpgradeBaseData)
}

int UserUpgradeBaseData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.UserUpgradeBaseData)
  int total_size = 0;

  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nid());
  }

  // optional uint32 nExperience = 2;
  if (this->nexperience() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nexperience());
  }

  // optional uint32 nSumExperience = 3;
  if (this->nsumexperience() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nsumexperience());
  }

  // optional uint32 nPower = 4;
  if (this->npower() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npower());
  }

  // optional uint32 nSkillPoint = 5;
  if (this->nskillpoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nskillpoint());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserUpgradeBaseData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserUpgradeBaseData*>(&from));
}

void UserUpgradeBaseData::MergeFrom(const UserUpgradeBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.UserUpgradeBaseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.nexperience() != 0) {
    set_nexperience(from.nexperience());
  }
  if (from.nsumexperience() != 0) {
    set_nsumexperience(from.nsumexperience());
  }
  if (from.npower() != 0) {
    set_npower(from.npower());
  }
  if (from.nskillpoint() != 0) {
    set_nskillpoint(from.nskillpoint());
  }
}

void UserUpgradeBaseData::CopyFrom(const UserUpgradeBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.UserUpgradeBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserUpgradeBaseData::IsInitialized() const {

  return true;
}

void UserUpgradeBaseData::Swap(UserUpgradeBaseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserUpgradeBaseData::InternalSwap(UserUpgradeBaseData* other) {
  std::swap(nid_, other->nid_);
  std::swap(nexperience_, other->nexperience_);
  std::swap(nsumexperience_, other->nsumexperience_);
  std::swap(npower_, other->npower_);
  std::swap(nskillpoint_, other->nskillpoint_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserUpgradeBaseData::GetTypeName() const {
  return "proto3.UserUpgradeBaseData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserUpgradeBaseData

// optional uint32 nID = 1;
void UserUpgradeBaseData::clear_nid() {
  nid_ = 0u;
}
 ::google::protobuf::uint32 UserUpgradeBaseData::nid() const {
  // @@protoc_insertion_point(field_get:proto3.UserUpgradeBaseData.nID)
  return nid_;
}
 void UserUpgradeBaseData::set_nid(::google::protobuf::uint32 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserUpgradeBaseData.nID)
}

// optional uint32 nExperience = 2;
void UserUpgradeBaseData::clear_nexperience() {
  nexperience_ = 0u;
}
 ::google::protobuf::uint32 UserUpgradeBaseData::nexperience() const {
  // @@protoc_insertion_point(field_get:proto3.UserUpgradeBaseData.nExperience)
  return nexperience_;
}
 void UserUpgradeBaseData::set_nexperience(::google::protobuf::uint32 value) {
  
  nexperience_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserUpgradeBaseData.nExperience)
}

// optional uint32 nSumExperience = 3;
void UserUpgradeBaseData::clear_nsumexperience() {
  nsumexperience_ = 0u;
}
 ::google::protobuf::uint32 UserUpgradeBaseData::nsumexperience() const {
  // @@protoc_insertion_point(field_get:proto3.UserUpgradeBaseData.nSumExperience)
  return nsumexperience_;
}
 void UserUpgradeBaseData::set_nsumexperience(::google::protobuf::uint32 value) {
  
  nsumexperience_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserUpgradeBaseData.nSumExperience)
}

// optional uint32 nPower = 4;
void UserUpgradeBaseData::clear_npower() {
  npower_ = 0u;
}
 ::google::protobuf::uint32 UserUpgradeBaseData::npower() const {
  // @@protoc_insertion_point(field_get:proto3.UserUpgradeBaseData.nPower)
  return npower_;
}
 void UserUpgradeBaseData::set_npower(::google::protobuf::uint32 value) {
  
  npower_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserUpgradeBaseData.nPower)
}

// optional uint32 nSkillPoint = 5;
void UserUpgradeBaseData::clear_nskillpoint() {
  nskillpoint_ = 0u;
}
 ::google::protobuf::uint32 UserUpgradeBaseData::nskillpoint() const {
  // @@protoc_insertion_point(field_get:proto3.UserUpgradeBaseData.nSkillPoint)
  return nskillpoint_;
}
 void UserUpgradeBaseData::set_nskillpoint(::google::protobuf::uint32 value) {
  
  nskillpoint_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserUpgradeBaseData.nSkillPoint)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonsterHeroBaseData::kNIDFieldNumber;
const int MonsterHeroBaseData::kNNameIdFieldNumber;
const int MonsterHeroBaseData::kNSignFieldNumber;
const int MonsterHeroBaseData::kNTypeFieldNumber;
const int MonsterHeroBaseData::kNStageChangeNextMonsterIDFieldNumber;
const int MonsterHeroBaseData::kNStageChangeAnimIdFieldNumber;
const int MonsterHeroBaseData::kNStageChangeEffectIdFieldNumber;
const int MonsterHeroBaseData::kNStageChangeSoundIdFieldNumber;
const int MonsterHeroBaseData::kNAITreeIdFieldNumber;
const int MonsterHeroBaseData::kNCharacterBPIdFieldNumber;
const int MonsterHeroBaseData::kNAnimBPIdFieldNumber;
const int MonsterHeroBaseData::kFModelScaleFieldNumber;
const int MonsterHeroBaseData::kNNPCIdFieldNumber;
const int MonsterHeroBaseData::kNTaskIDFieldNumber;
const int MonsterHeroBaseData::kNAvatarFieldNumber;
const int MonsterHeroBaseData::kNVocationFieldNumber;
const int MonsterHeroBaseData::kNEquip1FieldNumber;
const int MonsterHeroBaseData::kNEquip2FieldNumber;
const int MonsterHeroBaseData::kNEquip3FieldNumber;
const int MonsterHeroBaseData::kNEquip4FieldNumber;
const int MonsterHeroBaseData::kNEquip5FieldNumber;
const int MonsterHeroBaseData::kNEquip6FieldNumber;
const int MonsterHeroBaseData::kNEquip7FieldNumber;
const int MonsterHeroBaseData::kNEquip8FieldNumber;
const int MonsterHeroBaseData::kNWeapon1FieldNumber;
const int MonsterHeroBaseData::kNWeapon2FieldNumber;
const int MonsterHeroBaseData::kFWalkSpeedFieldNumber;
const int MonsterHeroBaseData::kFRunSpeedFieldNumber;
const int MonsterHeroBaseData::kFJumpHeightFieldNumber;
const int MonsterHeroBaseData::kFBodyConstitutionFieldNumber;
const int MonsterHeroBaseData::kFHPFieldNumber;
const int MonsterHeroBaseData::kFMAXHPFieldNumber;
const int MonsterHeroBaseData::kFMPFieldNumber;
const int MonsterHeroBaseData::kFMAXMPFieldNumber;
const int MonsterHeroBaseData::kFArmorFieldNumber;
const int MonsterHeroBaseData::kFMAXArmorFieldNumber;
const int MonsterHeroBaseData::kFNormalAttackFieldNumber;
const int MonsterHeroBaseData::kFNormalDefendFieldNumber;
const int MonsterHeroBaseData::kFDodgeFieldNumber;
const int MonsterHeroBaseData::kFCritFieldNumber;
const int MonsterHeroBaseData::kFCritHurtFieldNumber;
const int MonsterHeroBaseData::kFBlockFieldNumber;
const int MonsterHeroBaseData::kFAttackResistanceFieldNumber;
const int MonsterHeroBaseData::kFAttackMultiFieldNumber;
const int MonsterHeroBaseData::kFSkillTreeIdFieldNumber;
const int MonsterHeroBaseData::kNIntroductionIdFieldNumber;
const int MonsterHeroBaseData::kPatrolRadiusFieldNumber;
const int MonsterHeroBaseData::kWanderDistanceFieldNumber;
const int MonsterHeroBaseData::kHearingRadiusFieldNumber;
const int MonsterHeroBaseData::kChaseRadiusFieldNumber;
const int MonsterHeroBaseData::kSprintRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonsterHeroBaseData::MonsterHeroBaseData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MonsterHeroBaseData)
}

void MonsterHeroBaseData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MonsterHeroBaseData::MonsterHeroBaseData(const MonsterHeroBaseData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MonsterHeroBaseData)
}

void MonsterHeroBaseData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nid_ = 0u;
  nnameid_ = 0u;
  nsign_ = 0u;
  ntype_ = 0u;
  nstagechange_nextmonsterid_ = 0u;
  nstagechange_animid_ = 0u;
  nstagechange_effectid_ = 0u;
  nstagechange_soundid_ = 0u;
  naitreeid_ = 0u;
  ncharacterbpid_ = 0u;
  nanimbpid_ = 0u;
  fmodelscale_ = 0;
  nnpcid_ = 0u;
  ntaskid_ = 0u;
  navatar_ = 0u;
  nvocation_ = 0u;
  nequip_1_ = 0u;
  nequip_2_ = 0u;
  nequip_3_ = 0u;
  nequip_4_ = 0u;
  nequip_5_ = 0u;
  nequip_6_ = 0u;
  nequip_7_ = 0u;
  nequip_8_ = 0u;
  nweapon_1_ = 0u;
  nweapon_2_ = 0u;
  fwalkspeed_ = 0;
  frunspeed_ = 0;
  fjumpheight_ = 0;
  fbodyconstitution_ = 0;
  fhp_ = 0;
  fmax_hp_ = 0;
  fmp_ = 0;
  fmax_mp_ = 0;
  farmor_ = 0;
  fmax_armor_ = 0;
  fnormalattack_ = 0;
  fnormaldefend_ = 0;
  fdodge_ = 0;
  fcrit_ = 0;
  fcrithurt_ = 0;
  fblock_ = 0;
  fattackresistance_ = 0;
  fattackmulti_ = 0;
  fskilltreeid_ = 0u;
  nintroductionid_ = 0u;
  patrolradius_ = 0;
  wanderdistance_ = 0;
  hearingradius_ = 0;
  chaseradius_ = 0;
  sprintradius_ = 0;
}

MonsterHeroBaseData::~MonsterHeroBaseData() {
  // @@protoc_insertion_point(destructor:proto3.MonsterHeroBaseData)
  SharedDtor();
}

void MonsterHeroBaseData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MonsterHeroBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonsterHeroBaseData& MonsterHeroBaseData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MonsterHeroBaseData* MonsterHeroBaseData::default_instance_ = NULL;

MonsterHeroBaseData* MonsterHeroBaseData::New(::google::protobuf::Arena* arena) const {
  MonsterHeroBaseData* n = new MonsterHeroBaseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonsterHeroBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MonsterHeroBaseData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MonsterHeroBaseData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MonsterHeroBaseData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nid_, nstagechange_soundid_);
  ZR_(naitreeid_, nvocation_);
  ZR_(nequip_1_, nequip_8_);
  ZR_(nweapon_1_, fmax_hp_);
  ZR_(fmp_, fcrit_);
  ZR_(fcrithurt_, wanderdistance_);
  ZR_(hearingradius_, sprintradius_);

#undef ZR_HELPER_
#undef ZR_

}

bool MonsterHeroBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MonsterHeroBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nNameId;
        break;
      }

      // optional uint32 nNameId = 2;
      case 2: {
        if (tag == 16) {
         parse_nNameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nSign;
        break;
      }

      // optional uint32 nSign = 3;
      case 3: {
        if (tag == 24) {
         parse_nSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsign_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }

      // optional uint32 nType = 4;
      case 4: {
        if (tag == 32) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nStageChange_NextMonsterID;
        break;
      }

      // optional uint32 nStageChange_NextMonsterID = 5;
      case 5: {
        if (tag == 40) {
         parse_nStageChange_NextMonsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstagechange_nextmonsterid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nStageChange_AnimId;
        break;
      }

      // optional uint32 nStageChange_AnimId = 6;
      case 6: {
        if (tag == 48) {
         parse_nStageChange_AnimId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstagechange_animid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nStageChange_EffectId;
        break;
      }

      // optional uint32 nStageChange_EffectId = 7;
      case 7: {
        if (tag == 56) {
         parse_nStageChange_EffectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstagechange_effectid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_nStageChange_SoundId;
        break;
      }

      // optional uint32 nStageChange_SoundId = 8;
      case 8: {
        if (tag == 64) {
         parse_nStageChange_SoundId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstagechange_soundid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_nAITreeId;
        break;
      }

      // optional uint32 nAITreeId = 9;
      case 9: {
        if (tag == 72) {
         parse_nAITreeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &naitreeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_nCharacterBPId;
        break;
      }

      // optional uint32 nCharacterBPId = 10;
      case 10: {
        if (tag == 80) {
         parse_nCharacterBPId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncharacterbpid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nAnimBPId;
        break;
      }

      // optional uint32 nAnimBPId = 11;
      case 11: {
        if (tag == 88) {
         parse_nAnimBPId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nanimbpid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_fModelScale;
        break;
      }

      // optional float fModelScale = 12;
      case 12: {
        if (tag == 101) {
         parse_fModelScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmodelscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_nNPCId;
        break;
      }

      // optional uint32 nNPCId = 13;
      case 13: {
        if (tag == 104) {
         parse_nNPCId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnpcid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_nTaskID;
        break;
      }

      // optional uint32 nTaskID = 14;
      case 14: {
        if (tag == 112) {
         parse_nTaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntaskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_nAvatar;
        break;
      }

      // optional uint32 nAvatar = 15;
      case 15: {
        if (tag == 120) {
         parse_nAvatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navatar_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_nVocation;
        break;
      }

      // optional uint32 nVocation = 16;
      case 16: {
        if (tag == 128) {
         parse_nVocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nvocation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_nEquip_1;
        break;
      }

      // optional uint32 nEquip_1 = 17;
      case 17: {
        if (tag == 136) {
         parse_nEquip_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_nEquip_2;
        break;
      }

      // optional uint32 nEquip_2 = 18;
      case 18: {
        if (tag == 144) {
         parse_nEquip_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_nEquip_3;
        break;
      }

      // optional uint32 nEquip_3 = 19;
      case 19: {
        if (tag == 152) {
         parse_nEquip_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_nEquip_4;
        break;
      }

      // optional uint32 nEquip_4 = 20;
      case 20: {
        if (tag == 160) {
         parse_nEquip_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_nEquip_5;
        break;
      }

      // optional uint32 nEquip_5 = 21;
      case 21: {
        if (tag == 168) {
         parse_nEquip_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_5_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_nEquip_6;
        break;
      }

      // optional uint32 nEquip_6 = 22;
      case 22: {
        if (tag == 176) {
         parse_nEquip_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_nEquip_7;
        break;
      }

      // optional uint32 nEquip_7 = 23;
      case 23: {
        if (tag == 184) {
         parse_nEquip_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_7_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_nEquip_8;
        break;
      }

      // optional uint32 nEquip_8 = 24;
      case 24: {
        if (tag == 192) {
         parse_nEquip_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_8_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_nWeapon_1;
        break;
      }

      // optional uint32 nWeapon_1 = 25;
      case 25: {
        if (tag == 200) {
         parse_nWeapon_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nweapon_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_nWeapon_2;
        break;
      }

      // optional uint32 nWeapon_2 = 26;
      case 26: {
        if (tag == 208) {
         parse_nWeapon_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nweapon_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_fWalkSpeed;
        break;
      }

      // optional float fWalkSpeed = 27;
      case 27: {
        if (tag == 221) {
         parse_fWalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fwalkspeed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_fRunSpeed;
        break;
      }

      // optional float fRunSpeed = 28;
      case 28: {
        if (tag == 229) {
         parse_fRunSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frunspeed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_fJumpHeight;
        break;
      }

      // optional float fJumpHeight = 29;
      case 29: {
        if (tag == 237) {
         parse_fJumpHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fjumpheight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_fBodyConstitution;
        break;
      }

      // optional float fBodyConstitution = 30;
      case 30: {
        if (tag == 245) {
         parse_fBodyConstitution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fbodyconstitution_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_fHP;
        break;
      }

      // optional float fHP = 31;
      case 31: {
        if (tag == 253) {
         parse_fHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fhp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_fMAX_HP;
        break;
      }

      // optional float fMAX_HP = 32;
      case 32: {
        if (tag == 261) {
         parse_fMAX_HP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmax_hp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_fMP;
        break;
      }

      // optional float fMP = 33;
      case 33: {
        if (tag == 269) {
         parse_fMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_fMAX_MP;
        break;
      }

      // optional float fMAX_MP = 34;
      case 34: {
        if (tag == 277) {
         parse_fMAX_MP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmax_mp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_fArmor;
        break;
      }

      // optional float fArmor = 35;
      case 35: {
        if (tag == 285) {
         parse_fArmor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farmor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_fMAX_Armor;
        break;
      }

      // optional float fMAX_Armor = 36;
      case 36: {
        if (tag == 293) {
         parse_fMAX_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmax_armor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_fNormalAttack;
        break;
      }

      // optional float fNormalAttack = 37;
      case 37: {
        if (tag == 301) {
         parse_fNormalAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fnormalattack_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_fNormalDefend;
        break;
      }

      // optional float fNormalDefend = 38;
      case 38: {
        if (tag == 309) {
         parse_fNormalDefend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fnormaldefend_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_fDodge;
        break;
      }

      // optional float fDodge = 39;
      case 39: {
        if (tag == 317) {
         parse_fDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdodge_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_fCrit;
        break;
      }

      // optional float fCrit = 40;
      case 40: {
        if (tag == 325) {
         parse_fCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcrit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_fCritHurt;
        break;
      }

      // optional float fCritHurt = 41;
      case 41: {
        if (tag == 333) {
         parse_fCritHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcrithurt_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_fBlock;
        break;
      }

      // optional float fBlock = 42;
      case 42: {
        if (tag == 341) {
         parse_fBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fblock_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(349)) goto parse_fAttackResistance;
        break;
      }

      // optional float fAttackResistance = 43;
      case 43: {
        if (tag == 349) {
         parse_fAttackResistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fattackresistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(357)) goto parse_fAttackMulti;
        break;
      }

      // optional float fAttackMulti = 44;
      case 44: {
        if (tag == 357) {
         parse_fAttackMulti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fattackmulti_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_fSkillTreeId;
        break;
      }

      // optional uint32 fSkillTreeId = 45;
      case 45: {
        if (tag == 360) {
         parse_fSkillTreeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fskilltreeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_nIntroductionId;
        break;
      }

      // optional uint32 nIntroductionId = 46;
      case 46: {
        if (tag == 368) {
         parse_nIntroductionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nintroductionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(381)) goto parse_PatrolRadius;
        break;
      }

      // optional float PatrolRadius = 47;
      case 47: {
        if (tag == 381) {
         parse_PatrolRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &patrolradius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(389)) goto parse_WanderDistance;
        break;
      }

      // optional float WanderDistance = 48;
      case 48: {
        if (tag == 389) {
         parse_WanderDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wanderdistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(397)) goto parse_HearingRadius;
        break;
      }

      // optional float HearingRadius = 49;
      case 49: {
        if (tag == 397) {
         parse_HearingRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hearingradius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(405)) goto parse_ChaseRadius;
        break;
      }

      // optional float ChaseRadius = 50;
      case 50: {
        if (tag == 405) {
         parse_ChaseRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chaseradius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(413)) goto parse_SprintRadius;
        break;
      }

      // optional float SprintRadius = 51;
      case 51: {
        if (tag == 413) {
         parse_SprintRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sprintradius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MonsterHeroBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MonsterHeroBaseData)
  return false;
#undef DO_
}

void MonsterHeroBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MonsterHeroBaseData)
  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nnameid(), output);
  }

  // optional uint32 nSign = 3;
  if (this->nsign() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nsign(), output);
  }

  // optional uint32 nType = 4;
  if (this->ntype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ntype(), output);
  }

  // optional uint32 nStageChange_NextMonsterID = 5;
  if (this->nstagechange_nextmonsterid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nstagechange_nextmonsterid(), output);
  }

  // optional uint32 nStageChange_AnimId = 6;
  if (this->nstagechange_animid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nstagechange_animid(), output);
  }

  // optional uint32 nStageChange_EffectId = 7;
  if (this->nstagechange_effectid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nstagechange_effectid(), output);
  }

  // optional uint32 nStageChange_SoundId = 8;
  if (this->nstagechange_soundid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nstagechange_soundid(), output);
  }

  // optional uint32 nAITreeId = 9;
  if (this->naitreeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->naitreeid(), output);
  }

  // optional uint32 nCharacterBPId = 10;
  if (this->ncharacterbpid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ncharacterbpid(), output);
  }

  // optional uint32 nAnimBPId = 11;
  if (this->nanimbpid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nanimbpid(), output);
  }

  // optional float fModelScale = 12;
  if (this->fmodelscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fmodelscale(), output);
  }

  // optional uint32 nNPCId = 13;
  if (this->nnpcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nnpcid(), output);
  }

  // optional uint32 nTaskID = 14;
  if (this->ntaskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ntaskid(), output);
  }

  // optional uint32 nAvatar = 15;
  if (this->navatar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->navatar(), output);
  }

  // optional uint32 nVocation = 16;
  if (this->nvocation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->nvocation(), output);
  }

  // optional uint32 nEquip_1 = 17;
  if (this->nequip_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->nequip_1(), output);
  }

  // optional uint32 nEquip_2 = 18;
  if (this->nequip_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->nequip_2(), output);
  }

  // optional uint32 nEquip_3 = 19;
  if (this->nequip_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->nequip_3(), output);
  }

  // optional uint32 nEquip_4 = 20;
  if (this->nequip_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->nequip_4(), output);
  }

  // optional uint32 nEquip_5 = 21;
  if (this->nequip_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->nequip_5(), output);
  }

  // optional uint32 nEquip_6 = 22;
  if (this->nequip_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->nequip_6(), output);
  }

  // optional uint32 nEquip_7 = 23;
  if (this->nequip_7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->nequip_7(), output);
  }

  // optional uint32 nEquip_8 = 24;
  if (this->nequip_8() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nequip_8(), output);
  }

  // optional uint32 nWeapon_1 = 25;
  if (this->nweapon_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->nweapon_1(), output);
  }

  // optional uint32 nWeapon_2 = 26;
  if (this->nweapon_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->nweapon_2(), output);
  }

  // optional float fWalkSpeed = 27;
  if (this->fwalkspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->fwalkspeed(), output);
  }

  // optional float fRunSpeed = 28;
  if (this->frunspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->frunspeed(), output);
  }

  // optional float fJumpHeight = 29;
  if (this->fjumpheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->fjumpheight(), output);
  }

  // optional float fBodyConstitution = 30;
  if (this->fbodyconstitution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->fbodyconstitution(), output);
  }

  // optional float fHP = 31;
  if (this->fhp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->fhp(), output);
  }

  // optional float fMAX_HP = 32;
  if (this->fmax_hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->fmax_hp(), output);
  }

  // optional float fMP = 33;
  if (this->fmp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->fmp(), output);
  }

  // optional float fMAX_MP = 34;
  if (this->fmax_mp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->fmax_mp(), output);
  }

  // optional float fArmor = 35;
  if (this->farmor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->farmor(), output);
  }

  // optional float fMAX_Armor = 36;
  if (this->fmax_armor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->fmax_armor(), output);
  }

  // optional float fNormalAttack = 37;
  if (this->fnormalattack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->fnormalattack(), output);
  }

  // optional float fNormalDefend = 38;
  if (this->fnormaldefend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->fnormaldefend(), output);
  }

  // optional float fDodge = 39;
  if (this->fdodge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->fdodge(), output);
  }

  // optional float fCrit = 40;
  if (this->fcrit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->fcrit(), output);
  }

  // optional float fCritHurt = 41;
  if (this->fcrithurt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->fcrithurt(), output);
  }

  // optional float fBlock = 42;
  if (this->fblock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->fblock(), output);
  }

  // optional float fAttackResistance = 43;
  if (this->fattackresistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->fattackresistance(), output);
  }

  // optional float fAttackMulti = 44;
  if (this->fattackmulti() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->fattackmulti(), output);
  }

  // optional uint32 fSkillTreeId = 45;
  if (this->fskilltreeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->fskilltreeid(), output);
  }

  // optional uint32 nIntroductionId = 46;
  if (this->nintroductionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->nintroductionid(), output);
  }

  // optional float PatrolRadius = 47;
  if (this->patrolradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->patrolradius(), output);
  }

  // optional float WanderDistance = 48;
  if (this->wanderdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->wanderdistance(), output);
  }

  // optional float HearingRadius = 49;
  if (this->hearingradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->hearingradius(), output);
  }

  // optional float ChaseRadius = 50;
  if (this->chaseradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->chaseradius(), output);
  }

  // optional float SprintRadius = 51;
  if (this->sprintradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->sprintradius(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MonsterHeroBaseData)
}

int MonsterHeroBaseData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MonsterHeroBaseData)
  int total_size = 0;

  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nid());
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnameid());
  }

  // optional uint32 nSign = 3;
  if (this->nsign() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nsign());
  }

  // optional uint32 nType = 4;
  if (this->ntype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntype());
  }

  // optional uint32 nStageChange_NextMonsterID = 5;
  if (this->nstagechange_nextmonsterid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstagechange_nextmonsterid());
  }

  // optional uint32 nStageChange_AnimId = 6;
  if (this->nstagechange_animid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstagechange_animid());
  }

  // optional uint32 nStageChange_EffectId = 7;
  if (this->nstagechange_effectid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstagechange_effectid());
  }

  // optional uint32 nStageChange_SoundId = 8;
  if (this->nstagechange_soundid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstagechange_soundid());
  }

  // optional uint32 nAITreeId = 9;
  if (this->naitreeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->naitreeid());
  }

  // optional uint32 nCharacterBPId = 10;
  if (this->ncharacterbpid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncharacterbpid());
  }

  // optional uint32 nAnimBPId = 11;
  if (this->nanimbpid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nanimbpid());
  }

  // optional float fModelScale = 12;
  if (this->fmodelscale() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 nNPCId = 13;
  if (this->nnpcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnpcid());
  }

  // optional uint32 nTaskID = 14;
  if (this->ntaskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntaskid());
  }

  // optional uint32 nAvatar = 15;
  if (this->navatar() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->navatar());
  }

  // optional uint32 nVocation = 16;
  if (this->nvocation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nvocation());
  }

  // optional uint32 nEquip_1 = 17;
  if (this->nequip_1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_1());
  }

  // optional uint32 nEquip_2 = 18;
  if (this->nequip_2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_2());
  }

  // optional uint32 nEquip_3 = 19;
  if (this->nequip_3() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_3());
  }

  // optional uint32 nEquip_4 = 20;
  if (this->nequip_4() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_4());
  }

  // optional uint32 nEquip_5 = 21;
  if (this->nequip_5() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_5());
  }

  // optional uint32 nEquip_6 = 22;
  if (this->nequip_6() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_6());
  }

  // optional uint32 nEquip_7 = 23;
  if (this->nequip_7() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_7());
  }

  // optional uint32 nEquip_8 = 24;
  if (this->nequip_8() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_8());
  }

  // optional uint32 nWeapon_1 = 25;
  if (this->nweapon_1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nweapon_1());
  }

  // optional uint32 nWeapon_2 = 26;
  if (this->nweapon_2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nweapon_2());
  }

  // optional float fWalkSpeed = 27;
  if (this->fwalkspeed() != 0) {
    total_size += 2 + 4;
  }

  // optional float fRunSpeed = 28;
  if (this->frunspeed() != 0) {
    total_size += 2 + 4;
  }

  // optional float fJumpHeight = 29;
  if (this->fjumpheight() != 0) {
    total_size += 2 + 4;
  }

  // optional float fBodyConstitution = 30;
  if (this->fbodyconstitution() != 0) {
    total_size += 2 + 4;
  }

  // optional float fHP = 31;
  if (this->fhp() != 0) {
    total_size += 2 + 4;
  }

  // optional float fMAX_HP = 32;
  if (this->fmax_hp() != 0) {
    total_size += 2 + 4;
  }

  // optional float fMP = 33;
  if (this->fmp() != 0) {
    total_size += 2 + 4;
  }

  // optional float fMAX_MP = 34;
  if (this->fmax_mp() != 0) {
    total_size += 2 + 4;
  }

  // optional float fArmor = 35;
  if (this->farmor() != 0) {
    total_size += 2 + 4;
  }

  // optional float fMAX_Armor = 36;
  if (this->fmax_armor() != 0) {
    total_size += 2 + 4;
  }

  // optional float fNormalAttack = 37;
  if (this->fnormalattack() != 0) {
    total_size += 2 + 4;
  }

  // optional float fNormalDefend = 38;
  if (this->fnormaldefend() != 0) {
    total_size += 2 + 4;
  }

  // optional float fDodge = 39;
  if (this->fdodge() != 0) {
    total_size += 2 + 4;
  }

  // optional float fCrit = 40;
  if (this->fcrit() != 0) {
    total_size += 2 + 4;
  }

  // optional float fCritHurt = 41;
  if (this->fcrithurt() != 0) {
    total_size += 2 + 4;
  }

  // optional float fBlock = 42;
  if (this->fblock() != 0) {
    total_size += 2 + 4;
  }

  // optional float fAttackResistance = 43;
  if (this->fattackresistance() != 0) {
    total_size += 2 + 4;
  }

  // optional float fAttackMulti = 44;
  if (this->fattackmulti() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 fSkillTreeId = 45;
  if (this->fskilltreeid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fskilltreeid());
  }

  // optional uint32 nIntroductionId = 46;
  if (this->nintroductionid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nintroductionid());
  }

  // optional float PatrolRadius = 47;
  if (this->patrolradius() != 0) {
    total_size += 2 + 4;
  }

  // optional float WanderDistance = 48;
  if (this->wanderdistance() != 0) {
    total_size += 2 + 4;
  }

  // optional float HearingRadius = 49;
  if (this->hearingradius() != 0) {
    total_size += 2 + 4;
  }

  // optional float ChaseRadius = 50;
  if (this->chaseradius() != 0) {
    total_size += 2 + 4;
  }

  // optional float SprintRadius = 51;
  if (this->sprintradius() != 0) {
    total_size += 2 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterHeroBaseData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonsterHeroBaseData*>(&from));
}

void MonsterHeroBaseData::MergeFrom(const MonsterHeroBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MonsterHeroBaseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.nnameid() != 0) {
    set_nnameid(from.nnameid());
  }
  if (from.nsign() != 0) {
    set_nsign(from.nsign());
  }
  if (from.ntype() != 0) {
    set_ntype(from.ntype());
  }
  if (from.nstagechange_nextmonsterid() != 0) {
    set_nstagechange_nextmonsterid(from.nstagechange_nextmonsterid());
  }
  if (from.nstagechange_animid() != 0) {
    set_nstagechange_animid(from.nstagechange_animid());
  }
  if (from.nstagechange_effectid() != 0) {
    set_nstagechange_effectid(from.nstagechange_effectid());
  }
  if (from.nstagechange_soundid() != 0) {
    set_nstagechange_soundid(from.nstagechange_soundid());
  }
  if (from.naitreeid() != 0) {
    set_naitreeid(from.naitreeid());
  }
  if (from.ncharacterbpid() != 0) {
    set_ncharacterbpid(from.ncharacterbpid());
  }
  if (from.nanimbpid() != 0) {
    set_nanimbpid(from.nanimbpid());
  }
  if (from.fmodelscale() != 0) {
    set_fmodelscale(from.fmodelscale());
  }
  if (from.nnpcid() != 0) {
    set_nnpcid(from.nnpcid());
  }
  if (from.ntaskid() != 0) {
    set_ntaskid(from.ntaskid());
  }
  if (from.navatar() != 0) {
    set_navatar(from.navatar());
  }
  if (from.nvocation() != 0) {
    set_nvocation(from.nvocation());
  }
  if (from.nequip_1() != 0) {
    set_nequip_1(from.nequip_1());
  }
  if (from.nequip_2() != 0) {
    set_nequip_2(from.nequip_2());
  }
  if (from.nequip_3() != 0) {
    set_nequip_3(from.nequip_3());
  }
  if (from.nequip_4() != 0) {
    set_nequip_4(from.nequip_4());
  }
  if (from.nequip_5() != 0) {
    set_nequip_5(from.nequip_5());
  }
  if (from.nequip_6() != 0) {
    set_nequip_6(from.nequip_6());
  }
  if (from.nequip_7() != 0) {
    set_nequip_7(from.nequip_7());
  }
  if (from.nequip_8() != 0) {
    set_nequip_8(from.nequip_8());
  }
  if (from.nweapon_1() != 0) {
    set_nweapon_1(from.nweapon_1());
  }
  if (from.nweapon_2() != 0) {
    set_nweapon_2(from.nweapon_2());
  }
  if (from.fwalkspeed() != 0) {
    set_fwalkspeed(from.fwalkspeed());
  }
  if (from.frunspeed() != 0) {
    set_frunspeed(from.frunspeed());
  }
  if (from.fjumpheight() != 0) {
    set_fjumpheight(from.fjumpheight());
  }
  if (from.fbodyconstitution() != 0) {
    set_fbodyconstitution(from.fbodyconstitution());
  }
  if (from.fhp() != 0) {
    set_fhp(from.fhp());
  }
  if (from.fmax_hp() != 0) {
    set_fmax_hp(from.fmax_hp());
  }
  if (from.fmp() != 0) {
    set_fmp(from.fmp());
  }
  if (from.fmax_mp() != 0) {
    set_fmax_mp(from.fmax_mp());
  }
  if (from.farmor() != 0) {
    set_farmor(from.farmor());
  }
  if (from.fmax_armor() != 0) {
    set_fmax_armor(from.fmax_armor());
  }
  if (from.fnormalattack() != 0) {
    set_fnormalattack(from.fnormalattack());
  }
  if (from.fnormaldefend() != 0) {
    set_fnormaldefend(from.fnormaldefend());
  }
  if (from.fdodge() != 0) {
    set_fdodge(from.fdodge());
  }
  if (from.fcrit() != 0) {
    set_fcrit(from.fcrit());
  }
  if (from.fcrithurt() != 0) {
    set_fcrithurt(from.fcrithurt());
  }
  if (from.fblock() != 0) {
    set_fblock(from.fblock());
  }
  if (from.fattackresistance() != 0) {
    set_fattackresistance(from.fattackresistance());
  }
  if (from.fattackmulti() != 0) {
    set_fattackmulti(from.fattackmulti());
  }
  if (from.fskilltreeid() != 0) {
    set_fskilltreeid(from.fskilltreeid());
  }
  if (from.nintroductionid() != 0) {
    set_nintroductionid(from.nintroductionid());
  }
  if (from.patrolradius() != 0) {
    set_patrolradius(from.patrolradius());
  }
  if (from.wanderdistance() != 0) {
    set_wanderdistance(from.wanderdistance());
  }
  if (from.hearingradius() != 0) {
    set_hearingradius(from.hearingradius());
  }
  if (from.chaseradius() != 0) {
    set_chaseradius(from.chaseradius());
  }
  if (from.sprintradius() != 0) {
    set_sprintradius(from.sprintradius());
  }
}

void MonsterHeroBaseData::CopyFrom(const MonsterHeroBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MonsterHeroBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterHeroBaseData::IsInitialized() const {

  return true;
}

void MonsterHeroBaseData::Swap(MonsterHeroBaseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonsterHeroBaseData::InternalSwap(MonsterHeroBaseData* other) {
  std::swap(nid_, other->nid_);
  std::swap(nnameid_, other->nnameid_);
  std::swap(nsign_, other->nsign_);
  std::swap(ntype_, other->ntype_);
  std::swap(nstagechange_nextmonsterid_, other->nstagechange_nextmonsterid_);
  std::swap(nstagechange_animid_, other->nstagechange_animid_);
  std::swap(nstagechange_effectid_, other->nstagechange_effectid_);
  std::swap(nstagechange_soundid_, other->nstagechange_soundid_);
  std::swap(naitreeid_, other->naitreeid_);
  std::swap(ncharacterbpid_, other->ncharacterbpid_);
  std::swap(nanimbpid_, other->nanimbpid_);
  std::swap(fmodelscale_, other->fmodelscale_);
  std::swap(nnpcid_, other->nnpcid_);
  std::swap(ntaskid_, other->ntaskid_);
  std::swap(navatar_, other->navatar_);
  std::swap(nvocation_, other->nvocation_);
  std::swap(nequip_1_, other->nequip_1_);
  std::swap(nequip_2_, other->nequip_2_);
  std::swap(nequip_3_, other->nequip_3_);
  std::swap(nequip_4_, other->nequip_4_);
  std::swap(nequip_5_, other->nequip_5_);
  std::swap(nequip_6_, other->nequip_6_);
  std::swap(nequip_7_, other->nequip_7_);
  std::swap(nequip_8_, other->nequip_8_);
  std::swap(nweapon_1_, other->nweapon_1_);
  std::swap(nweapon_2_, other->nweapon_2_);
  std::swap(fwalkspeed_, other->fwalkspeed_);
  std::swap(frunspeed_, other->frunspeed_);
  std::swap(fjumpheight_, other->fjumpheight_);
  std::swap(fbodyconstitution_, other->fbodyconstitution_);
  std::swap(fhp_, other->fhp_);
  std::swap(fmax_hp_, other->fmax_hp_);
  std::swap(fmp_, other->fmp_);
  std::swap(fmax_mp_, other->fmax_mp_);
  std::swap(farmor_, other->farmor_);
  std::swap(fmax_armor_, other->fmax_armor_);
  std::swap(fnormalattack_, other->fnormalattack_);
  std::swap(fnormaldefend_, other->fnormaldefend_);
  std::swap(fdodge_, other->fdodge_);
  std::swap(fcrit_, other->fcrit_);
  std::swap(fcrithurt_, other->fcrithurt_);
  std::swap(fblock_, other->fblock_);
  std::swap(fattackresistance_, other->fattackresistance_);
  std::swap(fattackmulti_, other->fattackmulti_);
  std::swap(fskilltreeid_, other->fskilltreeid_);
  std::swap(nintroductionid_, other->nintroductionid_);
  std::swap(patrolradius_, other->patrolradius_);
  std::swap(wanderdistance_, other->wanderdistance_);
  std::swap(hearingradius_, other->hearingradius_);
  std::swap(chaseradius_, other->chaseradius_);
  std::swap(sprintradius_, other->sprintradius_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MonsterHeroBaseData::GetTypeName() const {
  return "proto3.MonsterHeroBaseData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MonsterHeroBaseData

// optional uint32 nID = 1;
void MonsterHeroBaseData::clear_nid() {
  nid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nID)
  return nid_;
}
 void MonsterHeroBaseData::set_nid(::google::protobuf::uint32 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nID)
}

// optional uint32 nNameId = 2;
void MonsterHeroBaseData::clear_nnameid() {
  nnameid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nnameid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nNameId)
  return nnameid_;
}
 void MonsterHeroBaseData::set_nnameid(::google::protobuf::uint32 value) {
  
  nnameid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nNameId)
}

// optional uint32 nSign = 3;
void MonsterHeroBaseData::clear_nsign() {
  nsign_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nsign() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nSign)
  return nsign_;
}
 void MonsterHeroBaseData::set_nsign(::google::protobuf::uint32 value) {
  
  nsign_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nSign)
}

// optional uint32 nType = 4;
void MonsterHeroBaseData::clear_ntype() {
  ntype_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::ntype() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nType)
  return ntype_;
}
 void MonsterHeroBaseData::set_ntype(::google::protobuf::uint32 value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nType)
}

// optional uint32 nStageChange_NextMonsterID = 5;
void MonsterHeroBaseData::clear_nstagechange_nextmonsterid() {
  nstagechange_nextmonsterid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nstagechange_nextmonsterid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nStageChange_NextMonsterID)
  return nstagechange_nextmonsterid_;
}
 void MonsterHeroBaseData::set_nstagechange_nextmonsterid(::google::protobuf::uint32 value) {
  
  nstagechange_nextmonsterid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nStageChange_NextMonsterID)
}

// optional uint32 nStageChange_AnimId = 6;
void MonsterHeroBaseData::clear_nstagechange_animid() {
  nstagechange_animid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nstagechange_animid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nStageChange_AnimId)
  return nstagechange_animid_;
}
 void MonsterHeroBaseData::set_nstagechange_animid(::google::protobuf::uint32 value) {
  
  nstagechange_animid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nStageChange_AnimId)
}

// optional uint32 nStageChange_EffectId = 7;
void MonsterHeroBaseData::clear_nstagechange_effectid() {
  nstagechange_effectid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nstagechange_effectid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nStageChange_EffectId)
  return nstagechange_effectid_;
}
 void MonsterHeroBaseData::set_nstagechange_effectid(::google::protobuf::uint32 value) {
  
  nstagechange_effectid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nStageChange_EffectId)
}

// optional uint32 nStageChange_SoundId = 8;
void MonsterHeroBaseData::clear_nstagechange_soundid() {
  nstagechange_soundid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nstagechange_soundid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nStageChange_SoundId)
  return nstagechange_soundid_;
}
 void MonsterHeroBaseData::set_nstagechange_soundid(::google::protobuf::uint32 value) {
  
  nstagechange_soundid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nStageChange_SoundId)
}

// optional uint32 nAITreeId = 9;
void MonsterHeroBaseData::clear_naitreeid() {
  naitreeid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::naitreeid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nAITreeId)
  return naitreeid_;
}
 void MonsterHeroBaseData::set_naitreeid(::google::protobuf::uint32 value) {
  
  naitreeid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nAITreeId)
}

// optional uint32 nCharacterBPId = 10;
void MonsterHeroBaseData::clear_ncharacterbpid() {
  ncharacterbpid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::ncharacterbpid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nCharacterBPId)
  return ncharacterbpid_;
}
 void MonsterHeroBaseData::set_ncharacterbpid(::google::protobuf::uint32 value) {
  
  ncharacterbpid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nCharacterBPId)
}

// optional uint32 nAnimBPId = 11;
void MonsterHeroBaseData::clear_nanimbpid() {
  nanimbpid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nanimbpid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nAnimBPId)
  return nanimbpid_;
}
 void MonsterHeroBaseData::set_nanimbpid(::google::protobuf::uint32 value) {
  
  nanimbpid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nAnimBPId)
}

// optional float fModelScale = 12;
void MonsterHeroBaseData::clear_fmodelscale() {
  fmodelscale_ = 0;
}
 float MonsterHeroBaseData::fmodelscale() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fModelScale)
  return fmodelscale_;
}
 void MonsterHeroBaseData::set_fmodelscale(float value) {
  
  fmodelscale_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fModelScale)
}

// optional uint32 nNPCId = 13;
void MonsterHeroBaseData::clear_nnpcid() {
  nnpcid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nnpcid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nNPCId)
  return nnpcid_;
}
 void MonsterHeroBaseData::set_nnpcid(::google::protobuf::uint32 value) {
  
  nnpcid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nNPCId)
}

// optional uint32 nTaskID = 14;
void MonsterHeroBaseData::clear_ntaskid() {
  ntaskid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::ntaskid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nTaskID)
  return ntaskid_;
}
 void MonsterHeroBaseData::set_ntaskid(::google::protobuf::uint32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nTaskID)
}

// optional uint32 nAvatar = 15;
void MonsterHeroBaseData::clear_navatar() {
  navatar_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::navatar() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nAvatar)
  return navatar_;
}
 void MonsterHeroBaseData::set_navatar(::google::protobuf::uint32 value) {
  
  navatar_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nAvatar)
}

// optional uint32 nVocation = 16;
void MonsterHeroBaseData::clear_nvocation() {
  nvocation_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nvocation() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nVocation)
  return nvocation_;
}
 void MonsterHeroBaseData::set_nvocation(::google::protobuf::uint32 value) {
  
  nvocation_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nVocation)
}

// optional uint32 nEquip_1 = 17;
void MonsterHeroBaseData::clear_nequip_1() {
  nequip_1_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nequip_1() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nEquip_1)
  return nequip_1_;
}
 void MonsterHeroBaseData::set_nequip_1(::google::protobuf::uint32 value) {
  
  nequip_1_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nEquip_1)
}

// optional uint32 nEquip_2 = 18;
void MonsterHeroBaseData::clear_nequip_2() {
  nequip_2_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nequip_2() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nEquip_2)
  return nequip_2_;
}
 void MonsterHeroBaseData::set_nequip_2(::google::protobuf::uint32 value) {
  
  nequip_2_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nEquip_2)
}

// optional uint32 nEquip_3 = 19;
void MonsterHeroBaseData::clear_nequip_3() {
  nequip_3_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nequip_3() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nEquip_3)
  return nequip_3_;
}
 void MonsterHeroBaseData::set_nequip_3(::google::protobuf::uint32 value) {
  
  nequip_3_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nEquip_3)
}

// optional uint32 nEquip_4 = 20;
void MonsterHeroBaseData::clear_nequip_4() {
  nequip_4_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nequip_4() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nEquip_4)
  return nequip_4_;
}
 void MonsterHeroBaseData::set_nequip_4(::google::protobuf::uint32 value) {
  
  nequip_4_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nEquip_4)
}

// optional uint32 nEquip_5 = 21;
void MonsterHeroBaseData::clear_nequip_5() {
  nequip_5_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nequip_5() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nEquip_5)
  return nequip_5_;
}
 void MonsterHeroBaseData::set_nequip_5(::google::protobuf::uint32 value) {
  
  nequip_5_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nEquip_5)
}

// optional uint32 nEquip_6 = 22;
void MonsterHeroBaseData::clear_nequip_6() {
  nequip_6_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nequip_6() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nEquip_6)
  return nequip_6_;
}
 void MonsterHeroBaseData::set_nequip_6(::google::protobuf::uint32 value) {
  
  nequip_6_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nEquip_6)
}

// optional uint32 nEquip_7 = 23;
void MonsterHeroBaseData::clear_nequip_7() {
  nequip_7_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nequip_7() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nEquip_7)
  return nequip_7_;
}
 void MonsterHeroBaseData::set_nequip_7(::google::protobuf::uint32 value) {
  
  nequip_7_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nEquip_7)
}

// optional uint32 nEquip_8 = 24;
void MonsterHeroBaseData::clear_nequip_8() {
  nequip_8_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nequip_8() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nEquip_8)
  return nequip_8_;
}
 void MonsterHeroBaseData::set_nequip_8(::google::protobuf::uint32 value) {
  
  nequip_8_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nEquip_8)
}

// optional uint32 nWeapon_1 = 25;
void MonsterHeroBaseData::clear_nweapon_1() {
  nweapon_1_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nweapon_1() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nWeapon_1)
  return nweapon_1_;
}
 void MonsterHeroBaseData::set_nweapon_1(::google::protobuf::uint32 value) {
  
  nweapon_1_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nWeapon_1)
}

// optional uint32 nWeapon_2 = 26;
void MonsterHeroBaseData::clear_nweapon_2() {
  nweapon_2_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nweapon_2() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nWeapon_2)
  return nweapon_2_;
}
 void MonsterHeroBaseData::set_nweapon_2(::google::protobuf::uint32 value) {
  
  nweapon_2_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nWeapon_2)
}

// optional float fWalkSpeed = 27;
void MonsterHeroBaseData::clear_fwalkspeed() {
  fwalkspeed_ = 0;
}
 float MonsterHeroBaseData::fwalkspeed() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fWalkSpeed)
  return fwalkspeed_;
}
 void MonsterHeroBaseData::set_fwalkspeed(float value) {
  
  fwalkspeed_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fWalkSpeed)
}

// optional float fRunSpeed = 28;
void MonsterHeroBaseData::clear_frunspeed() {
  frunspeed_ = 0;
}
 float MonsterHeroBaseData::frunspeed() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fRunSpeed)
  return frunspeed_;
}
 void MonsterHeroBaseData::set_frunspeed(float value) {
  
  frunspeed_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fRunSpeed)
}

// optional float fJumpHeight = 29;
void MonsterHeroBaseData::clear_fjumpheight() {
  fjumpheight_ = 0;
}
 float MonsterHeroBaseData::fjumpheight() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fJumpHeight)
  return fjumpheight_;
}
 void MonsterHeroBaseData::set_fjumpheight(float value) {
  
  fjumpheight_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fJumpHeight)
}

// optional float fBodyConstitution = 30;
void MonsterHeroBaseData::clear_fbodyconstitution() {
  fbodyconstitution_ = 0;
}
 float MonsterHeroBaseData::fbodyconstitution() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fBodyConstitution)
  return fbodyconstitution_;
}
 void MonsterHeroBaseData::set_fbodyconstitution(float value) {
  
  fbodyconstitution_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fBodyConstitution)
}

// optional float fHP = 31;
void MonsterHeroBaseData::clear_fhp() {
  fhp_ = 0;
}
 float MonsterHeroBaseData::fhp() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fHP)
  return fhp_;
}
 void MonsterHeroBaseData::set_fhp(float value) {
  
  fhp_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fHP)
}

// optional float fMAX_HP = 32;
void MonsterHeroBaseData::clear_fmax_hp() {
  fmax_hp_ = 0;
}
 float MonsterHeroBaseData::fmax_hp() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fMAX_HP)
  return fmax_hp_;
}
 void MonsterHeroBaseData::set_fmax_hp(float value) {
  
  fmax_hp_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fMAX_HP)
}

// optional float fMP = 33;
void MonsterHeroBaseData::clear_fmp() {
  fmp_ = 0;
}
 float MonsterHeroBaseData::fmp() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fMP)
  return fmp_;
}
 void MonsterHeroBaseData::set_fmp(float value) {
  
  fmp_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fMP)
}

// optional float fMAX_MP = 34;
void MonsterHeroBaseData::clear_fmax_mp() {
  fmax_mp_ = 0;
}
 float MonsterHeroBaseData::fmax_mp() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fMAX_MP)
  return fmax_mp_;
}
 void MonsterHeroBaseData::set_fmax_mp(float value) {
  
  fmax_mp_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fMAX_MP)
}

// optional float fArmor = 35;
void MonsterHeroBaseData::clear_farmor() {
  farmor_ = 0;
}
 float MonsterHeroBaseData::farmor() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fArmor)
  return farmor_;
}
 void MonsterHeroBaseData::set_farmor(float value) {
  
  farmor_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fArmor)
}

// optional float fMAX_Armor = 36;
void MonsterHeroBaseData::clear_fmax_armor() {
  fmax_armor_ = 0;
}
 float MonsterHeroBaseData::fmax_armor() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fMAX_Armor)
  return fmax_armor_;
}
 void MonsterHeroBaseData::set_fmax_armor(float value) {
  
  fmax_armor_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fMAX_Armor)
}

// optional float fNormalAttack = 37;
void MonsterHeroBaseData::clear_fnormalattack() {
  fnormalattack_ = 0;
}
 float MonsterHeroBaseData::fnormalattack() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fNormalAttack)
  return fnormalattack_;
}
 void MonsterHeroBaseData::set_fnormalattack(float value) {
  
  fnormalattack_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fNormalAttack)
}

// optional float fNormalDefend = 38;
void MonsterHeroBaseData::clear_fnormaldefend() {
  fnormaldefend_ = 0;
}
 float MonsterHeroBaseData::fnormaldefend() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fNormalDefend)
  return fnormaldefend_;
}
 void MonsterHeroBaseData::set_fnormaldefend(float value) {
  
  fnormaldefend_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fNormalDefend)
}

// optional float fDodge = 39;
void MonsterHeroBaseData::clear_fdodge() {
  fdodge_ = 0;
}
 float MonsterHeroBaseData::fdodge() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fDodge)
  return fdodge_;
}
 void MonsterHeroBaseData::set_fdodge(float value) {
  
  fdodge_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fDodge)
}

// optional float fCrit = 40;
void MonsterHeroBaseData::clear_fcrit() {
  fcrit_ = 0;
}
 float MonsterHeroBaseData::fcrit() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fCrit)
  return fcrit_;
}
 void MonsterHeroBaseData::set_fcrit(float value) {
  
  fcrit_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fCrit)
}

// optional float fCritHurt = 41;
void MonsterHeroBaseData::clear_fcrithurt() {
  fcrithurt_ = 0;
}
 float MonsterHeroBaseData::fcrithurt() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fCritHurt)
  return fcrithurt_;
}
 void MonsterHeroBaseData::set_fcrithurt(float value) {
  
  fcrithurt_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fCritHurt)
}

// optional float fBlock = 42;
void MonsterHeroBaseData::clear_fblock() {
  fblock_ = 0;
}
 float MonsterHeroBaseData::fblock() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fBlock)
  return fblock_;
}
 void MonsterHeroBaseData::set_fblock(float value) {
  
  fblock_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fBlock)
}

// optional float fAttackResistance = 43;
void MonsterHeroBaseData::clear_fattackresistance() {
  fattackresistance_ = 0;
}
 float MonsterHeroBaseData::fattackresistance() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fAttackResistance)
  return fattackresistance_;
}
 void MonsterHeroBaseData::set_fattackresistance(float value) {
  
  fattackresistance_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fAttackResistance)
}

// optional float fAttackMulti = 44;
void MonsterHeroBaseData::clear_fattackmulti() {
  fattackmulti_ = 0;
}
 float MonsterHeroBaseData::fattackmulti() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fAttackMulti)
  return fattackmulti_;
}
 void MonsterHeroBaseData::set_fattackmulti(float value) {
  
  fattackmulti_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fAttackMulti)
}

// optional uint32 fSkillTreeId = 45;
void MonsterHeroBaseData::clear_fskilltreeid() {
  fskilltreeid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::fskilltreeid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.fSkillTreeId)
  return fskilltreeid_;
}
 void MonsterHeroBaseData::set_fskilltreeid(::google::protobuf::uint32 value) {
  
  fskilltreeid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.fSkillTreeId)
}

// optional uint32 nIntroductionId = 46;
void MonsterHeroBaseData::clear_nintroductionid() {
  nintroductionid_ = 0u;
}
 ::google::protobuf::uint32 MonsterHeroBaseData::nintroductionid() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.nIntroductionId)
  return nintroductionid_;
}
 void MonsterHeroBaseData::set_nintroductionid(::google::protobuf::uint32 value) {
  
  nintroductionid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.nIntroductionId)
}

// optional float PatrolRadius = 47;
void MonsterHeroBaseData::clear_patrolradius() {
  patrolradius_ = 0;
}
 float MonsterHeroBaseData::patrolradius() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.PatrolRadius)
  return patrolradius_;
}
 void MonsterHeroBaseData::set_patrolradius(float value) {
  
  patrolradius_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.PatrolRadius)
}

// optional float WanderDistance = 48;
void MonsterHeroBaseData::clear_wanderdistance() {
  wanderdistance_ = 0;
}
 float MonsterHeroBaseData::wanderdistance() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.WanderDistance)
  return wanderdistance_;
}
 void MonsterHeroBaseData::set_wanderdistance(float value) {
  
  wanderdistance_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.WanderDistance)
}

// optional float HearingRadius = 49;
void MonsterHeroBaseData::clear_hearingradius() {
  hearingradius_ = 0;
}
 float MonsterHeroBaseData::hearingradius() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.HearingRadius)
  return hearingradius_;
}
 void MonsterHeroBaseData::set_hearingradius(float value) {
  
  hearingradius_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.HearingRadius)
}

// optional float ChaseRadius = 50;
void MonsterHeroBaseData::clear_chaseradius() {
  chaseradius_ = 0;
}
 float MonsterHeroBaseData::chaseradius() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.ChaseRadius)
  return chaseradius_;
}
 void MonsterHeroBaseData::set_chaseradius(float value) {
  
  chaseradius_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.ChaseRadius)
}

// optional float SprintRadius = 51;
void MonsterHeroBaseData::clear_sprintradius() {
  sprintradius_ = 0;
}
 float MonsterHeroBaseData::sprintradius() const {
  // @@protoc_insertion_point(field_get:proto3.MonsterHeroBaseData.SprintRadius)
  return sprintradius_;
}
 void MonsterHeroBaseData::set_sprintradius(float value) {
  
  sprintradius_ = value;
  // @@protoc_insertion_point(field_set:proto3.MonsterHeroBaseData.SprintRadius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHeroBaseData::kNIDFieldNumber;
const int UserHeroBaseData::kNNameIdFieldNumber;
const int UserHeroBaseData::kNSignFieldNumber;
const int UserHeroBaseData::kNTypeFieldNumber;
const int UserHeroBaseData::kNStageChangeNextHeroIDFieldNumber;
const int UserHeroBaseData::kNStageChangeAnimIdFieldNumber;
const int UserHeroBaseData::kNStageChangeEffectIdFieldNumber;
const int UserHeroBaseData::kNStageChangeSoundIdFieldNumber;
const int UserHeroBaseData::kNAITreeIdFieldNumber;
const int UserHeroBaseData::kNCharacterBPIdFieldNumber;
const int UserHeroBaseData::kNAnimBPIdFieldNumber;
const int UserHeroBaseData::kFModelScaleFieldNumber;
const int UserHeroBaseData::kNTaskIDFieldNumber;
const int UserHeroBaseData::kNAvatarFieldNumber;
const int UserHeroBaseData::kNVocationFieldNumber;
const int UserHeroBaseData::kNEquip1FieldNumber;
const int UserHeroBaseData::kNEquip2FieldNumber;
const int UserHeroBaseData::kNEquip3FieldNumber;
const int UserHeroBaseData::kNEquip4FieldNumber;
const int UserHeroBaseData::kNEquip5FieldNumber;
const int UserHeroBaseData::kNEquip6FieldNumber;
const int UserHeroBaseData::kNEquip7FieldNumber;
const int UserHeroBaseData::kNEquip8FieldNumber;
const int UserHeroBaseData::kNWeapon1FieldNumber;
const int UserHeroBaseData::kNWeapon2FieldNumber;
const int UserHeroBaseData::kFWalkSpeedFieldNumber;
const int UserHeroBaseData::kFRunSpeedFieldNumber;
const int UserHeroBaseData::kFJumpHeightFieldNumber;
const int UserHeroBaseData::kFHPFieldNumber;
const int UserHeroBaseData::kFMAXHPFieldNumber;
const int UserHeroBaseData::kFMPFieldNumber;
const int UserHeroBaseData::kFMAXMPFieldNumber;
const int UserHeroBaseData::kFArmorFieldNumber;
const int UserHeroBaseData::kFMAXArmorFieldNumber;
const int UserHeroBaseData::kFNormalAttackFieldNumber;
const int UserHeroBaseData::kFNormalDefendFieldNumber;
const int UserHeroBaseData::kFDodgeFieldNumber;
const int UserHeroBaseData::kFCritFieldNumber;
const int UserHeroBaseData::kFCritHurtFieldNumber;
const int UserHeroBaseData::kFBlockFieldNumber;
const int UserHeroBaseData::kFAttackResistanceFieldNumber;
const int UserHeroBaseData::kFAttackMultiFieldNumber;
const int UserHeroBaseData::kNLandSkillIdFieldNumber;
const int UserHeroBaseData::kNSkillTreeIdFieldNumber;
const int UserHeroBaseData::kNSkySkillIdFieldNumber;
const int UserHeroBaseData::kNIntroductionIdFieldNumber;
const int UserHeroBaseData::kTArrRacialTalentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHeroBaseData::UserHeroBaseData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.UserHeroBaseData)
}

void UserHeroBaseData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserHeroBaseData::UserHeroBaseData(const UserHeroBaseData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.UserHeroBaseData)
}

void UserHeroBaseData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nid_ = 0u;
  nnameid_ = 0u;
  nsign_ = 0u;
  ntype_ = 0u;
  nstagechange_nextheroid_ = 0u;
  nstagechange_animid_ = 0u;
  nstagechange_effectid_ = 0u;
  nstagechange_soundid_ = 0u;
  naitreeid_ = 0u;
  ncharacterbpid_ = 0u;
  nanimbpid_ = 0u;
  fmodelscale_ = 0;
  ntaskid_ = 0u;
  navatar_ = 0u;
  nvocation_ = 0u;
  nequip_1_ = 0u;
  nequip_2_ = 0u;
  nequip_3_ = 0u;
  nequip_4_ = 0u;
  nequip_5_ = 0u;
  nequip_6_ = 0u;
  nequip_7_ = 0u;
  nequip_8_ = 0u;
  nweapon_1_ = 0u;
  nweapon_2_ = 0u;
  fwalkspeed_ = 0;
  frunspeed_ = 0;
  fjumpheight_ = 0;
  fhp_ = 0;
  fmax_hp_ = 0;
  fmp_ = 0;
  fmax_mp_ = 0;
  farmor_ = 0;
  fmax_armor_ = 0;
  fnormalattack_ = 0;
  fnormaldefend_ = 0;
  fdodge_ = 0;
  fcrit_ = 0;
  fcrithurt_ = 0;
  fblock_ = 0;
  fattackresistance_ = 0;
  fattackmulti_ = 0;
  nlandskillid_ = 0u;
  nskilltreeid_ = 0u;
  nskyskillid_ = 0u;
  nintroductionid_ = 0u;
}

UserHeroBaseData::~UserHeroBaseData() {
  // @@protoc_insertion_point(destructor:proto3.UserHeroBaseData)
  SharedDtor();
}

void UserHeroBaseData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserHeroBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserHeroBaseData& UserHeroBaseData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

UserHeroBaseData* UserHeroBaseData::default_instance_ = NULL;

UserHeroBaseData* UserHeroBaseData::New(::google::protobuf::Arena* arena) const {
  UserHeroBaseData* n = new UserHeroBaseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserHeroBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.UserHeroBaseData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserHeroBaseData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserHeroBaseData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nid_, nstagechange_soundid_);
  ZR_(naitreeid_, nequip_1_);
  ZR_(nequip_2_, nweapon_1_);
  ZR_(nweapon_2_, fmax_mp_);
  ZR_(farmor_, fblock_);
  ZR_(fattackresistance_, nintroductionid_);

#undef ZR_HELPER_
#undef ZR_

  tarrracialtalent_.Clear();
}

bool UserHeroBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.UserHeroBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nNameId;
        break;
      }

      // optional uint32 nNameId = 2;
      case 2: {
        if (tag == 16) {
         parse_nNameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nSign;
        break;
      }

      // optional uint32 nSign = 3;
      case 3: {
        if (tag == 24) {
         parse_nSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsign_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nType;
        break;
      }

      // optional uint32 nType = 4;
      case 4: {
        if (tag == 32) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nStageChange_NextHeroID;
        break;
      }

      // optional uint32 nStageChange_NextHeroID = 5;
      case 5: {
        if (tag == 40) {
         parse_nStageChange_NextHeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstagechange_nextheroid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nStageChange_AnimId;
        break;
      }

      // optional uint32 nStageChange_AnimId = 6;
      case 6: {
        if (tag == 48) {
         parse_nStageChange_AnimId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstagechange_animid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nStageChange_EffectId;
        break;
      }

      // optional uint32 nStageChange_EffectId = 7;
      case 7: {
        if (tag == 56) {
         parse_nStageChange_EffectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstagechange_effectid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_nStageChange_SoundId;
        break;
      }

      // optional uint32 nStageChange_SoundId = 8;
      case 8: {
        if (tag == 64) {
         parse_nStageChange_SoundId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstagechange_soundid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_nAITreeId;
        break;
      }

      // optional uint32 nAITreeId = 9;
      case 9: {
        if (tag == 72) {
         parse_nAITreeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &naitreeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_nCharacterBPId;
        break;
      }

      // optional uint32 nCharacterBPId = 10;
      case 10: {
        if (tag == 80) {
         parse_nCharacterBPId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncharacterbpid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nAnimBPId;
        break;
      }

      // optional uint32 nAnimBPId = 11;
      case 11: {
        if (tag == 88) {
         parse_nAnimBPId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nanimbpid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_fModelScale;
        break;
      }

      // optional float fModelScale = 12;
      case 12: {
        if (tag == 101) {
         parse_fModelScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmodelscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_nTaskID;
        break;
      }

      // optional uint32 nTaskID = 13;
      case 13: {
        if (tag == 104) {
         parse_nTaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntaskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_nAvatar;
        break;
      }

      // optional uint32 nAvatar = 14;
      case 14: {
        if (tag == 112) {
         parse_nAvatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navatar_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_nVocation;
        break;
      }

      // optional uint32 nVocation = 15;
      case 15: {
        if (tag == 120) {
         parse_nVocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nvocation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_nEquip_1;
        break;
      }

      // optional uint32 nEquip_1 = 16;
      case 16: {
        if (tag == 128) {
         parse_nEquip_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_nEquip_2;
        break;
      }

      // optional uint32 nEquip_2 = 17;
      case 17: {
        if (tag == 136) {
         parse_nEquip_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_nEquip_3;
        break;
      }

      // optional uint32 nEquip_3 = 18;
      case 18: {
        if (tag == 144) {
         parse_nEquip_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_nEquip_4;
        break;
      }

      // optional uint32 nEquip_4 = 19;
      case 19: {
        if (tag == 152) {
         parse_nEquip_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_nEquip_5;
        break;
      }

      // optional uint32 nEquip_5 = 20;
      case 20: {
        if (tag == 160) {
         parse_nEquip_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_5_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_nEquip_6;
        break;
      }

      // optional uint32 nEquip_6 = 21;
      case 21: {
        if (tag == 168) {
         parse_nEquip_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_nEquip_7;
        break;
      }

      // optional uint32 nEquip_7 = 22;
      case 22: {
        if (tag == 176) {
         parse_nEquip_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_7_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_nEquip_8;
        break;
      }

      // optional uint32 nEquip_8 = 23;
      case 23: {
        if (tag == 184) {
         parse_nEquip_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nequip_8_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_nWeapon_1;
        break;
      }

      // optional uint32 nWeapon_1 = 24;
      case 24: {
        if (tag == 192) {
         parse_nWeapon_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nweapon_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_nWeapon_2;
        break;
      }

      // optional uint32 nWeapon_2 = 25;
      case 25: {
        if (tag == 200) {
         parse_nWeapon_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nweapon_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_fWalkSpeed;
        break;
      }

      // optional float fWalkSpeed = 26;
      case 26: {
        if (tag == 213) {
         parse_fWalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fwalkspeed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_fRunSpeed;
        break;
      }

      // optional float fRunSpeed = 27;
      case 27: {
        if (tag == 221) {
         parse_fRunSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frunspeed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_fJumpHeight;
        break;
      }

      // optional float fJumpHeight = 28;
      case 28: {
        if (tag == 229) {
         parse_fJumpHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fjumpheight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_fHP;
        break;
      }

      // optional float fHP = 29;
      case 29: {
        if (tag == 237) {
         parse_fHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fhp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_fMAX_HP;
        break;
      }

      // optional float fMAX_HP = 30;
      case 30: {
        if (tag == 245) {
         parse_fMAX_HP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmax_hp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_fMP;
        break;
      }

      // optional float fMP = 31;
      case 31: {
        if (tag == 253) {
         parse_fMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_fMAX_MP;
        break;
      }

      // optional float fMAX_MP = 32;
      case 32: {
        if (tag == 261) {
         parse_fMAX_MP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmax_mp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_fArmor;
        break;
      }

      // optional float fArmor = 33;
      case 33: {
        if (tag == 269) {
         parse_fArmor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farmor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_fMAX_Armor;
        break;
      }

      // optional float fMAX_Armor = 34;
      case 34: {
        if (tag == 277) {
         parse_fMAX_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmax_armor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_fNormalAttack;
        break;
      }

      // optional float fNormalAttack = 35;
      case 35: {
        if (tag == 285) {
         parse_fNormalAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fnormalattack_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_fNormalDefend;
        break;
      }

      // optional float fNormalDefend = 36;
      case 36: {
        if (tag == 293) {
         parse_fNormalDefend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fnormaldefend_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_fDodge;
        break;
      }

      // optional float fDodge = 37;
      case 37: {
        if (tag == 301) {
         parse_fDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdodge_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_fCrit;
        break;
      }

      // optional float fCrit = 38;
      case 38: {
        if (tag == 309) {
         parse_fCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcrit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_fCritHurt;
        break;
      }

      // optional float fCritHurt = 39;
      case 39: {
        if (tag == 317) {
         parse_fCritHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcrithurt_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_fBlock;
        break;
      }

      // optional float fBlock = 40;
      case 40: {
        if (tag == 325) {
         parse_fBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fblock_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_fAttackResistance;
        break;
      }

      // optional float fAttackResistance = 41;
      case 41: {
        if (tag == 333) {
         parse_fAttackResistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fattackresistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_fAttackMulti;
        break;
      }

      // optional float fAttackMulti = 42;
      case 42: {
        if (tag == 341) {
         parse_fAttackMulti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fattackmulti_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_nLandSkillId;
        break;
      }

      // optional uint32 nLandSkillId = 43;
      case 43: {
        if (tag == 344) {
         parse_nLandSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlandskillid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_nSkillTreeId;
        break;
      }

      // optional uint32 nSkillTreeId = 44;
      case 44: {
        if (tag == 352) {
         parse_nSkillTreeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nskilltreeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_nSkySkillId;
        break;
      }

      // optional uint32 nSkySkillId = 45;
      case 45: {
        if (tag == 360) {
         parse_nSkySkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nskyskillid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_nIntroductionId;
        break;
      }

      // optional uint32 nIntroductionId = 46;
      case 46: {
        if (tag == 368) {
         parse_nIntroductionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nintroductionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_tArrRacialTalent;
        break;
      }

      // repeated string tArrRacialTalent = 47;
      case 47: {
        if (tag == 378) {
         parse_tArrRacialTalent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tarrracialtalent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tarrracialtalent(this->tarrracialtalent_size() - 1).data(),
            this->tarrracialtalent(this->tarrracialtalent_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.UserHeroBaseData.tArrRacialTalent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_tArrRacialTalent;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.UserHeroBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.UserHeroBaseData)
  return false;
#undef DO_
}

void UserHeroBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.UserHeroBaseData)
  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nnameid(), output);
  }

  // optional uint32 nSign = 3;
  if (this->nsign() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nsign(), output);
  }

  // optional uint32 nType = 4;
  if (this->ntype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ntype(), output);
  }

  // optional uint32 nStageChange_NextHeroID = 5;
  if (this->nstagechange_nextheroid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nstagechange_nextheroid(), output);
  }

  // optional uint32 nStageChange_AnimId = 6;
  if (this->nstagechange_animid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nstagechange_animid(), output);
  }

  // optional uint32 nStageChange_EffectId = 7;
  if (this->nstagechange_effectid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nstagechange_effectid(), output);
  }

  // optional uint32 nStageChange_SoundId = 8;
  if (this->nstagechange_soundid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nstagechange_soundid(), output);
  }

  // optional uint32 nAITreeId = 9;
  if (this->naitreeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->naitreeid(), output);
  }

  // optional uint32 nCharacterBPId = 10;
  if (this->ncharacterbpid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ncharacterbpid(), output);
  }

  // optional uint32 nAnimBPId = 11;
  if (this->nanimbpid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nanimbpid(), output);
  }

  // optional float fModelScale = 12;
  if (this->fmodelscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fmodelscale(), output);
  }

  // optional uint32 nTaskID = 13;
  if (this->ntaskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ntaskid(), output);
  }

  // optional uint32 nAvatar = 14;
  if (this->navatar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->navatar(), output);
  }

  // optional uint32 nVocation = 15;
  if (this->nvocation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->nvocation(), output);
  }

  // optional uint32 nEquip_1 = 16;
  if (this->nequip_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->nequip_1(), output);
  }

  // optional uint32 nEquip_2 = 17;
  if (this->nequip_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->nequip_2(), output);
  }

  // optional uint32 nEquip_3 = 18;
  if (this->nequip_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->nequip_3(), output);
  }

  // optional uint32 nEquip_4 = 19;
  if (this->nequip_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->nequip_4(), output);
  }

  // optional uint32 nEquip_5 = 20;
  if (this->nequip_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->nequip_5(), output);
  }

  // optional uint32 nEquip_6 = 21;
  if (this->nequip_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->nequip_6(), output);
  }

  // optional uint32 nEquip_7 = 22;
  if (this->nequip_7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->nequip_7(), output);
  }

  // optional uint32 nEquip_8 = 23;
  if (this->nequip_8() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->nequip_8(), output);
  }

  // optional uint32 nWeapon_1 = 24;
  if (this->nweapon_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nweapon_1(), output);
  }

  // optional uint32 nWeapon_2 = 25;
  if (this->nweapon_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->nweapon_2(), output);
  }

  // optional float fWalkSpeed = 26;
  if (this->fwalkspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->fwalkspeed(), output);
  }

  // optional float fRunSpeed = 27;
  if (this->frunspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->frunspeed(), output);
  }

  // optional float fJumpHeight = 28;
  if (this->fjumpheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->fjumpheight(), output);
  }

  // optional float fHP = 29;
  if (this->fhp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->fhp(), output);
  }

  // optional float fMAX_HP = 30;
  if (this->fmax_hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->fmax_hp(), output);
  }

  // optional float fMP = 31;
  if (this->fmp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->fmp(), output);
  }

  // optional float fMAX_MP = 32;
  if (this->fmax_mp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->fmax_mp(), output);
  }

  // optional float fArmor = 33;
  if (this->farmor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->farmor(), output);
  }

  // optional float fMAX_Armor = 34;
  if (this->fmax_armor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->fmax_armor(), output);
  }

  // optional float fNormalAttack = 35;
  if (this->fnormalattack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->fnormalattack(), output);
  }

  // optional float fNormalDefend = 36;
  if (this->fnormaldefend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->fnormaldefend(), output);
  }

  // optional float fDodge = 37;
  if (this->fdodge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->fdodge(), output);
  }

  // optional float fCrit = 38;
  if (this->fcrit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->fcrit(), output);
  }

  // optional float fCritHurt = 39;
  if (this->fcrithurt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->fcrithurt(), output);
  }

  // optional float fBlock = 40;
  if (this->fblock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->fblock(), output);
  }

  // optional float fAttackResistance = 41;
  if (this->fattackresistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->fattackresistance(), output);
  }

  // optional float fAttackMulti = 42;
  if (this->fattackmulti() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->fattackmulti(), output);
  }

  // optional uint32 nLandSkillId = 43;
  if (this->nlandskillid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->nlandskillid(), output);
  }

  // optional uint32 nSkillTreeId = 44;
  if (this->nskilltreeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->nskilltreeid(), output);
  }

  // optional uint32 nSkySkillId = 45;
  if (this->nskyskillid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->nskyskillid(), output);
  }

  // optional uint32 nIntroductionId = 46;
  if (this->nintroductionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->nintroductionid(), output);
  }

  // repeated string tArrRacialTalent = 47;
  for (int i = 0; i < this->tarrracialtalent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarrracialtalent(i).data(), this->tarrracialtalent(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.UserHeroBaseData.tArrRacialTalent");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->tarrracialtalent(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.UserHeroBaseData)
}

int UserHeroBaseData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.UserHeroBaseData)
  int total_size = 0;

  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nid());
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnameid());
  }

  // optional uint32 nSign = 3;
  if (this->nsign() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nsign());
  }

  // optional uint32 nType = 4;
  if (this->ntype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntype());
  }

  // optional uint32 nStageChange_NextHeroID = 5;
  if (this->nstagechange_nextheroid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstagechange_nextheroid());
  }

  // optional uint32 nStageChange_AnimId = 6;
  if (this->nstagechange_animid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstagechange_animid());
  }

  // optional uint32 nStageChange_EffectId = 7;
  if (this->nstagechange_effectid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstagechange_effectid());
  }

  // optional uint32 nStageChange_SoundId = 8;
  if (this->nstagechange_soundid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstagechange_soundid());
  }

  // optional uint32 nAITreeId = 9;
  if (this->naitreeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->naitreeid());
  }

  // optional uint32 nCharacterBPId = 10;
  if (this->ncharacterbpid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncharacterbpid());
  }

  // optional uint32 nAnimBPId = 11;
  if (this->nanimbpid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nanimbpid());
  }

  // optional float fModelScale = 12;
  if (this->fmodelscale() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 nTaskID = 13;
  if (this->ntaskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntaskid());
  }

  // optional uint32 nAvatar = 14;
  if (this->navatar() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->navatar());
  }

  // optional uint32 nVocation = 15;
  if (this->nvocation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nvocation());
  }

  // optional uint32 nEquip_1 = 16;
  if (this->nequip_1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_1());
  }

  // optional uint32 nEquip_2 = 17;
  if (this->nequip_2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_2());
  }

  // optional uint32 nEquip_3 = 18;
  if (this->nequip_3() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_3());
  }

  // optional uint32 nEquip_4 = 19;
  if (this->nequip_4() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_4());
  }

  // optional uint32 nEquip_5 = 20;
  if (this->nequip_5() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_5());
  }

  // optional uint32 nEquip_6 = 21;
  if (this->nequip_6() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_6());
  }

  // optional uint32 nEquip_7 = 22;
  if (this->nequip_7() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_7());
  }

  // optional uint32 nEquip_8 = 23;
  if (this->nequip_8() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nequip_8());
  }

  // optional uint32 nWeapon_1 = 24;
  if (this->nweapon_1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nweapon_1());
  }

  // optional uint32 nWeapon_2 = 25;
  if (this->nweapon_2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nweapon_2());
  }

  // optional float fWalkSpeed = 26;
  if (this->fwalkspeed() != 0) {
    total_size += 2 + 4;
  }

  // optional float fRunSpeed = 27;
  if (this->frunspeed() != 0) {
    total_size += 2 + 4;
  }

  // optional float fJumpHeight = 28;
  if (this->fjumpheight() != 0) {
    total_size += 2 + 4;
  }

  // optional float fHP = 29;
  if (this->fhp() != 0) {
    total_size += 2 + 4;
  }

  // optional float fMAX_HP = 30;
  if (this->fmax_hp() != 0) {
    total_size += 2 + 4;
  }

  // optional float fMP = 31;
  if (this->fmp() != 0) {
    total_size += 2 + 4;
  }

  // optional float fMAX_MP = 32;
  if (this->fmax_mp() != 0) {
    total_size += 2 + 4;
  }

  // optional float fArmor = 33;
  if (this->farmor() != 0) {
    total_size += 2 + 4;
  }

  // optional float fMAX_Armor = 34;
  if (this->fmax_armor() != 0) {
    total_size += 2 + 4;
  }

  // optional float fNormalAttack = 35;
  if (this->fnormalattack() != 0) {
    total_size += 2 + 4;
  }

  // optional float fNormalDefend = 36;
  if (this->fnormaldefend() != 0) {
    total_size += 2 + 4;
  }

  // optional float fDodge = 37;
  if (this->fdodge() != 0) {
    total_size += 2 + 4;
  }

  // optional float fCrit = 38;
  if (this->fcrit() != 0) {
    total_size += 2 + 4;
  }

  // optional float fCritHurt = 39;
  if (this->fcrithurt() != 0) {
    total_size += 2 + 4;
  }

  // optional float fBlock = 40;
  if (this->fblock() != 0) {
    total_size += 2 + 4;
  }

  // optional float fAttackResistance = 41;
  if (this->fattackresistance() != 0) {
    total_size += 2 + 4;
  }

  // optional float fAttackMulti = 42;
  if (this->fattackmulti() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 nLandSkillId = 43;
  if (this->nlandskillid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nlandskillid());
  }

  // optional uint32 nSkillTreeId = 44;
  if (this->nskilltreeid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nskilltreeid());
  }

  // optional uint32 nSkySkillId = 45;
  if (this->nskyskillid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nskyskillid());
  }

  // optional uint32 nIntroductionId = 46;
  if (this->nintroductionid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nintroductionid());
  }

  // repeated string tArrRacialTalent = 47;
  total_size += 2 * this->tarrracialtalent_size();
  for (int i = 0; i < this->tarrracialtalent_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tarrracialtalent(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHeroBaseData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserHeroBaseData*>(&from));
}

void UserHeroBaseData::MergeFrom(const UserHeroBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.UserHeroBaseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tarrracialtalent_.MergeFrom(from.tarrracialtalent_);
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.nnameid() != 0) {
    set_nnameid(from.nnameid());
  }
  if (from.nsign() != 0) {
    set_nsign(from.nsign());
  }
  if (from.ntype() != 0) {
    set_ntype(from.ntype());
  }
  if (from.nstagechange_nextheroid() != 0) {
    set_nstagechange_nextheroid(from.nstagechange_nextheroid());
  }
  if (from.nstagechange_animid() != 0) {
    set_nstagechange_animid(from.nstagechange_animid());
  }
  if (from.nstagechange_effectid() != 0) {
    set_nstagechange_effectid(from.nstagechange_effectid());
  }
  if (from.nstagechange_soundid() != 0) {
    set_nstagechange_soundid(from.nstagechange_soundid());
  }
  if (from.naitreeid() != 0) {
    set_naitreeid(from.naitreeid());
  }
  if (from.ncharacterbpid() != 0) {
    set_ncharacterbpid(from.ncharacterbpid());
  }
  if (from.nanimbpid() != 0) {
    set_nanimbpid(from.nanimbpid());
  }
  if (from.fmodelscale() != 0) {
    set_fmodelscale(from.fmodelscale());
  }
  if (from.ntaskid() != 0) {
    set_ntaskid(from.ntaskid());
  }
  if (from.navatar() != 0) {
    set_navatar(from.navatar());
  }
  if (from.nvocation() != 0) {
    set_nvocation(from.nvocation());
  }
  if (from.nequip_1() != 0) {
    set_nequip_1(from.nequip_1());
  }
  if (from.nequip_2() != 0) {
    set_nequip_2(from.nequip_2());
  }
  if (from.nequip_3() != 0) {
    set_nequip_3(from.nequip_3());
  }
  if (from.nequip_4() != 0) {
    set_nequip_4(from.nequip_4());
  }
  if (from.nequip_5() != 0) {
    set_nequip_5(from.nequip_5());
  }
  if (from.nequip_6() != 0) {
    set_nequip_6(from.nequip_6());
  }
  if (from.nequip_7() != 0) {
    set_nequip_7(from.nequip_7());
  }
  if (from.nequip_8() != 0) {
    set_nequip_8(from.nequip_8());
  }
  if (from.nweapon_1() != 0) {
    set_nweapon_1(from.nweapon_1());
  }
  if (from.nweapon_2() != 0) {
    set_nweapon_2(from.nweapon_2());
  }
  if (from.fwalkspeed() != 0) {
    set_fwalkspeed(from.fwalkspeed());
  }
  if (from.frunspeed() != 0) {
    set_frunspeed(from.frunspeed());
  }
  if (from.fjumpheight() != 0) {
    set_fjumpheight(from.fjumpheight());
  }
  if (from.fhp() != 0) {
    set_fhp(from.fhp());
  }
  if (from.fmax_hp() != 0) {
    set_fmax_hp(from.fmax_hp());
  }
  if (from.fmp() != 0) {
    set_fmp(from.fmp());
  }
  if (from.fmax_mp() != 0) {
    set_fmax_mp(from.fmax_mp());
  }
  if (from.farmor() != 0) {
    set_farmor(from.farmor());
  }
  if (from.fmax_armor() != 0) {
    set_fmax_armor(from.fmax_armor());
  }
  if (from.fnormalattack() != 0) {
    set_fnormalattack(from.fnormalattack());
  }
  if (from.fnormaldefend() != 0) {
    set_fnormaldefend(from.fnormaldefend());
  }
  if (from.fdodge() != 0) {
    set_fdodge(from.fdodge());
  }
  if (from.fcrit() != 0) {
    set_fcrit(from.fcrit());
  }
  if (from.fcrithurt() != 0) {
    set_fcrithurt(from.fcrithurt());
  }
  if (from.fblock() != 0) {
    set_fblock(from.fblock());
  }
  if (from.fattackresistance() != 0) {
    set_fattackresistance(from.fattackresistance());
  }
  if (from.fattackmulti() != 0) {
    set_fattackmulti(from.fattackmulti());
  }
  if (from.nlandskillid() != 0) {
    set_nlandskillid(from.nlandskillid());
  }
  if (from.nskilltreeid() != 0) {
    set_nskilltreeid(from.nskilltreeid());
  }
  if (from.nskyskillid() != 0) {
    set_nskyskillid(from.nskyskillid());
  }
  if (from.nintroductionid() != 0) {
    set_nintroductionid(from.nintroductionid());
  }
}

void UserHeroBaseData::CopyFrom(const UserHeroBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.UserHeroBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHeroBaseData::IsInitialized() const {

  return true;
}

void UserHeroBaseData::Swap(UserHeroBaseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserHeroBaseData::InternalSwap(UserHeroBaseData* other) {
  std::swap(nid_, other->nid_);
  std::swap(nnameid_, other->nnameid_);
  std::swap(nsign_, other->nsign_);
  std::swap(ntype_, other->ntype_);
  std::swap(nstagechange_nextheroid_, other->nstagechange_nextheroid_);
  std::swap(nstagechange_animid_, other->nstagechange_animid_);
  std::swap(nstagechange_effectid_, other->nstagechange_effectid_);
  std::swap(nstagechange_soundid_, other->nstagechange_soundid_);
  std::swap(naitreeid_, other->naitreeid_);
  std::swap(ncharacterbpid_, other->ncharacterbpid_);
  std::swap(nanimbpid_, other->nanimbpid_);
  std::swap(fmodelscale_, other->fmodelscale_);
  std::swap(ntaskid_, other->ntaskid_);
  std::swap(navatar_, other->navatar_);
  std::swap(nvocation_, other->nvocation_);
  std::swap(nequip_1_, other->nequip_1_);
  std::swap(nequip_2_, other->nequip_2_);
  std::swap(nequip_3_, other->nequip_3_);
  std::swap(nequip_4_, other->nequip_4_);
  std::swap(nequip_5_, other->nequip_5_);
  std::swap(nequip_6_, other->nequip_6_);
  std::swap(nequip_7_, other->nequip_7_);
  std::swap(nequip_8_, other->nequip_8_);
  std::swap(nweapon_1_, other->nweapon_1_);
  std::swap(nweapon_2_, other->nweapon_2_);
  std::swap(fwalkspeed_, other->fwalkspeed_);
  std::swap(frunspeed_, other->frunspeed_);
  std::swap(fjumpheight_, other->fjumpheight_);
  std::swap(fhp_, other->fhp_);
  std::swap(fmax_hp_, other->fmax_hp_);
  std::swap(fmp_, other->fmp_);
  std::swap(fmax_mp_, other->fmax_mp_);
  std::swap(farmor_, other->farmor_);
  std::swap(fmax_armor_, other->fmax_armor_);
  std::swap(fnormalattack_, other->fnormalattack_);
  std::swap(fnormaldefend_, other->fnormaldefend_);
  std::swap(fdodge_, other->fdodge_);
  std::swap(fcrit_, other->fcrit_);
  std::swap(fcrithurt_, other->fcrithurt_);
  std::swap(fblock_, other->fblock_);
  std::swap(fattackresistance_, other->fattackresistance_);
  std::swap(fattackmulti_, other->fattackmulti_);
  std::swap(nlandskillid_, other->nlandskillid_);
  std::swap(nskilltreeid_, other->nskilltreeid_);
  std::swap(nskyskillid_, other->nskyskillid_);
  std::swap(nintroductionid_, other->nintroductionid_);
  tarrracialtalent_.UnsafeArenaSwap(&other->tarrracialtalent_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserHeroBaseData::GetTypeName() const {
  return "proto3.UserHeroBaseData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserHeroBaseData

// optional uint32 nID = 1;
void UserHeroBaseData::clear_nid() {
  nid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nID)
  return nid_;
}
 void UserHeroBaseData::set_nid(::google::protobuf::uint32 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nID)
}

// optional uint32 nNameId = 2;
void UserHeroBaseData::clear_nnameid() {
  nnameid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nnameid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nNameId)
  return nnameid_;
}
 void UserHeroBaseData::set_nnameid(::google::protobuf::uint32 value) {
  
  nnameid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nNameId)
}

// optional uint32 nSign = 3;
void UserHeroBaseData::clear_nsign() {
  nsign_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nsign() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nSign)
  return nsign_;
}
 void UserHeroBaseData::set_nsign(::google::protobuf::uint32 value) {
  
  nsign_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nSign)
}

// optional uint32 nType = 4;
void UserHeroBaseData::clear_ntype() {
  ntype_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::ntype() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nType)
  return ntype_;
}
 void UserHeroBaseData::set_ntype(::google::protobuf::uint32 value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nType)
}

// optional uint32 nStageChange_NextHeroID = 5;
void UserHeroBaseData::clear_nstagechange_nextheroid() {
  nstagechange_nextheroid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nstagechange_nextheroid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nStageChange_NextHeroID)
  return nstagechange_nextheroid_;
}
 void UserHeroBaseData::set_nstagechange_nextheroid(::google::protobuf::uint32 value) {
  
  nstagechange_nextheroid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nStageChange_NextHeroID)
}

// optional uint32 nStageChange_AnimId = 6;
void UserHeroBaseData::clear_nstagechange_animid() {
  nstagechange_animid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nstagechange_animid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nStageChange_AnimId)
  return nstagechange_animid_;
}
 void UserHeroBaseData::set_nstagechange_animid(::google::protobuf::uint32 value) {
  
  nstagechange_animid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nStageChange_AnimId)
}

// optional uint32 nStageChange_EffectId = 7;
void UserHeroBaseData::clear_nstagechange_effectid() {
  nstagechange_effectid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nstagechange_effectid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nStageChange_EffectId)
  return nstagechange_effectid_;
}
 void UserHeroBaseData::set_nstagechange_effectid(::google::protobuf::uint32 value) {
  
  nstagechange_effectid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nStageChange_EffectId)
}

// optional uint32 nStageChange_SoundId = 8;
void UserHeroBaseData::clear_nstagechange_soundid() {
  nstagechange_soundid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nstagechange_soundid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nStageChange_SoundId)
  return nstagechange_soundid_;
}
 void UserHeroBaseData::set_nstagechange_soundid(::google::protobuf::uint32 value) {
  
  nstagechange_soundid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nStageChange_SoundId)
}

// optional uint32 nAITreeId = 9;
void UserHeroBaseData::clear_naitreeid() {
  naitreeid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::naitreeid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nAITreeId)
  return naitreeid_;
}
 void UserHeroBaseData::set_naitreeid(::google::protobuf::uint32 value) {
  
  naitreeid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nAITreeId)
}

// optional uint32 nCharacterBPId = 10;
void UserHeroBaseData::clear_ncharacterbpid() {
  ncharacterbpid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::ncharacterbpid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nCharacterBPId)
  return ncharacterbpid_;
}
 void UserHeroBaseData::set_ncharacterbpid(::google::protobuf::uint32 value) {
  
  ncharacterbpid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nCharacterBPId)
}

// optional uint32 nAnimBPId = 11;
void UserHeroBaseData::clear_nanimbpid() {
  nanimbpid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nanimbpid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nAnimBPId)
  return nanimbpid_;
}
 void UserHeroBaseData::set_nanimbpid(::google::protobuf::uint32 value) {
  
  nanimbpid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nAnimBPId)
}

// optional float fModelScale = 12;
void UserHeroBaseData::clear_fmodelscale() {
  fmodelscale_ = 0;
}
 float UserHeroBaseData::fmodelscale() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fModelScale)
  return fmodelscale_;
}
 void UserHeroBaseData::set_fmodelscale(float value) {
  
  fmodelscale_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fModelScale)
}

// optional uint32 nTaskID = 13;
void UserHeroBaseData::clear_ntaskid() {
  ntaskid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::ntaskid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nTaskID)
  return ntaskid_;
}
 void UserHeroBaseData::set_ntaskid(::google::protobuf::uint32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nTaskID)
}

// optional uint32 nAvatar = 14;
void UserHeroBaseData::clear_navatar() {
  navatar_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::navatar() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nAvatar)
  return navatar_;
}
 void UserHeroBaseData::set_navatar(::google::protobuf::uint32 value) {
  
  navatar_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nAvatar)
}

// optional uint32 nVocation = 15;
void UserHeroBaseData::clear_nvocation() {
  nvocation_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nvocation() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nVocation)
  return nvocation_;
}
 void UserHeroBaseData::set_nvocation(::google::protobuf::uint32 value) {
  
  nvocation_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nVocation)
}

// optional uint32 nEquip_1 = 16;
void UserHeroBaseData::clear_nequip_1() {
  nequip_1_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nequip_1() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nEquip_1)
  return nequip_1_;
}
 void UserHeroBaseData::set_nequip_1(::google::protobuf::uint32 value) {
  
  nequip_1_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nEquip_1)
}

// optional uint32 nEquip_2 = 17;
void UserHeroBaseData::clear_nequip_2() {
  nequip_2_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nequip_2() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nEquip_2)
  return nequip_2_;
}
 void UserHeroBaseData::set_nequip_2(::google::protobuf::uint32 value) {
  
  nequip_2_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nEquip_2)
}

// optional uint32 nEquip_3 = 18;
void UserHeroBaseData::clear_nequip_3() {
  nequip_3_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nequip_3() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nEquip_3)
  return nequip_3_;
}
 void UserHeroBaseData::set_nequip_3(::google::protobuf::uint32 value) {
  
  nequip_3_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nEquip_3)
}

// optional uint32 nEquip_4 = 19;
void UserHeroBaseData::clear_nequip_4() {
  nequip_4_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nequip_4() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nEquip_4)
  return nequip_4_;
}
 void UserHeroBaseData::set_nequip_4(::google::protobuf::uint32 value) {
  
  nequip_4_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nEquip_4)
}

// optional uint32 nEquip_5 = 20;
void UserHeroBaseData::clear_nequip_5() {
  nequip_5_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nequip_5() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nEquip_5)
  return nequip_5_;
}
 void UserHeroBaseData::set_nequip_5(::google::protobuf::uint32 value) {
  
  nequip_5_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nEquip_5)
}

// optional uint32 nEquip_6 = 21;
void UserHeroBaseData::clear_nequip_6() {
  nequip_6_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nequip_6() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nEquip_6)
  return nequip_6_;
}
 void UserHeroBaseData::set_nequip_6(::google::protobuf::uint32 value) {
  
  nequip_6_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nEquip_6)
}

// optional uint32 nEquip_7 = 22;
void UserHeroBaseData::clear_nequip_7() {
  nequip_7_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nequip_7() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nEquip_7)
  return nequip_7_;
}
 void UserHeroBaseData::set_nequip_7(::google::protobuf::uint32 value) {
  
  nequip_7_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nEquip_7)
}

// optional uint32 nEquip_8 = 23;
void UserHeroBaseData::clear_nequip_8() {
  nequip_8_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nequip_8() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nEquip_8)
  return nequip_8_;
}
 void UserHeroBaseData::set_nequip_8(::google::protobuf::uint32 value) {
  
  nequip_8_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nEquip_8)
}

// optional uint32 nWeapon_1 = 24;
void UserHeroBaseData::clear_nweapon_1() {
  nweapon_1_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nweapon_1() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nWeapon_1)
  return nweapon_1_;
}
 void UserHeroBaseData::set_nweapon_1(::google::protobuf::uint32 value) {
  
  nweapon_1_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nWeapon_1)
}

// optional uint32 nWeapon_2 = 25;
void UserHeroBaseData::clear_nweapon_2() {
  nweapon_2_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nweapon_2() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nWeapon_2)
  return nweapon_2_;
}
 void UserHeroBaseData::set_nweapon_2(::google::protobuf::uint32 value) {
  
  nweapon_2_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nWeapon_2)
}

// optional float fWalkSpeed = 26;
void UserHeroBaseData::clear_fwalkspeed() {
  fwalkspeed_ = 0;
}
 float UserHeroBaseData::fwalkspeed() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fWalkSpeed)
  return fwalkspeed_;
}
 void UserHeroBaseData::set_fwalkspeed(float value) {
  
  fwalkspeed_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fWalkSpeed)
}

// optional float fRunSpeed = 27;
void UserHeroBaseData::clear_frunspeed() {
  frunspeed_ = 0;
}
 float UserHeroBaseData::frunspeed() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fRunSpeed)
  return frunspeed_;
}
 void UserHeroBaseData::set_frunspeed(float value) {
  
  frunspeed_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fRunSpeed)
}

// optional float fJumpHeight = 28;
void UserHeroBaseData::clear_fjumpheight() {
  fjumpheight_ = 0;
}
 float UserHeroBaseData::fjumpheight() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fJumpHeight)
  return fjumpheight_;
}
 void UserHeroBaseData::set_fjumpheight(float value) {
  
  fjumpheight_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fJumpHeight)
}

// optional float fHP = 29;
void UserHeroBaseData::clear_fhp() {
  fhp_ = 0;
}
 float UserHeroBaseData::fhp() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fHP)
  return fhp_;
}
 void UserHeroBaseData::set_fhp(float value) {
  
  fhp_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fHP)
}

// optional float fMAX_HP = 30;
void UserHeroBaseData::clear_fmax_hp() {
  fmax_hp_ = 0;
}
 float UserHeroBaseData::fmax_hp() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fMAX_HP)
  return fmax_hp_;
}
 void UserHeroBaseData::set_fmax_hp(float value) {
  
  fmax_hp_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fMAX_HP)
}

// optional float fMP = 31;
void UserHeroBaseData::clear_fmp() {
  fmp_ = 0;
}
 float UserHeroBaseData::fmp() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fMP)
  return fmp_;
}
 void UserHeroBaseData::set_fmp(float value) {
  
  fmp_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fMP)
}

// optional float fMAX_MP = 32;
void UserHeroBaseData::clear_fmax_mp() {
  fmax_mp_ = 0;
}
 float UserHeroBaseData::fmax_mp() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fMAX_MP)
  return fmax_mp_;
}
 void UserHeroBaseData::set_fmax_mp(float value) {
  
  fmax_mp_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fMAX_MP)
}

// optional float fArmor = 33;
void UserHeroBaseData::clear_farmor() {
  farmor_ = 0;
}
 float UserHeroBaseData::farmor() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fArmor)
  return farmor_;
}
 void UserHeroBaseData::set_farmor(float value) {
  
  farmor_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fArmor)
}

// optional float fMAX_Armor = 34;
void UserHeroBaseData::clear_fmax_armor() {
  fmax_armor_ = 0;
}
 float UserHeroBaseData::fmax_armor() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fMAX_Armor)
  return fmax_armor_;
}
 void UserHeroBaseData::set_fmax_armor(float value) {
  
  fmax_armor_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fMAX_Armor)
}

// optional float fNormalAttack = 35;
void UserHeroBaseData::clear_fnormalattack() {
  fnormalattack_ = 0;
}
 float UserHeroBaseData::fnormalattack() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fNormalAttack)
  return fnormalattack_;
}
 void UserHeroBaseData::set_fnormalattack(float value) {
  
  fnormalattack_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fNormalAttack)
}

// optional float fNormalDefend = 36;
void UserHeroBaseData::clear_fnormaldefend() {
  fnormaldefend_ = 0;
}
 float UserHeroBaseData::fnormaldefend() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fNormalDefend)
  return fnormaldefend_;
}
 void UserHeroBaseData::set_fnormaldefend(float value) {
  
  fnormaldefend_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fNormalDefend)
}

// optional float fDodge = 37;
void UserHeroBaseData::clear_fdodge() {
  fdodge_ = 0;
}
 float UserHeroBaseData::fdodge() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fDodge)
  return fdodge_;
}
 void UserHeroBaseData::set_fdodge(float value) {
  
  fdodge_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fDodge)
}

// optional float fCrit = 38;
void UserHeroBaseData::clear_fcrit() {
  fcrit_ = 0;
}
 float UserHeroBaseData::fcrit() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fCrit)
  return fcrit_;
}
 void UserHeroBaseData::set_fcrit(float value) {
  
  fcrit_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fCrit)
}

// optional float fCritHurt = 39;
void UserHeroBaseData::clear_fcrithurt() {
  fcrithurt_ = 0;
}
 float UserHeroBaseData::fcrithurt() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fCritHurt)
  return fcrithurt_;
}
 void UserHeroBaseData::set_fcrithurt(float value) {
  
  fcrithurt_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fCritHurt)
}

// optional float fBlock = 40;
void UserHeroBaseData::clear_fblock() {
  fblock_ = 0;
}
 float UserHeroBaseData::fblock() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fBlock)
  return fblock_;
}
 void UserHeroBaseData::set_fblock(float value) {
  
  fblock_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fBlock)
}

// optional float fAttackResistance = 41;
void UserHeroBaseData::clear_fattackresistance() {
  fattackresistance_ = 0;
}
 float UserHeroBaseData::fattackresistance() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fAttackResistance)
  return fattackresistance_;
}
 void UserHeroBaseData::set_fattackresistance(float value) {
  
  fattackresistance_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fAttackResistance)
}

// optional float fAttackMulti = 42;
void UserHeroBaseData::clear_fattackmulti() {
  fattackmulti_ = 0;
}
 float UserHeroBaseData::fattackmulti() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.fAttackMulti)
  return fattackmulti_;
}
 void UserHeroBaseData::set_fattackmulti(float value) {
  
  fattackmulti_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.fAttackMulti)
}

// optional uint32 nLandSkillId = 43;
void UserHeroBaseData::clear_nlandskillid() {
  nlandskillid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nlandskillid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nLandSkillId)
  return nlandskillid_;
}
 void UserHeroBaseData::set_nlandskillid(::google::protobuf::uint32 value) {
  
  nlandskillid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nLandSkillId)
}

// optional uint32 nSkillTreeId = 44;
void UserHeroBaseData::clear_nskilltreeid() {
  nskilltreeid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nskilltreeid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nSkillTreeId)
  return nskilltreeid_;
}
 void UserHeroBaseData::set_nskilltreeid(::google::protobuf::uint32 value) {
  
  nskilltreeid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nSkillTreeId)
}

// optional uint32 nSkySkillId = 45;
void UserHeroBaseData::clear_nskyskillid() {
  nskyskillid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nskyskillid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nSkySkillId)
  return nskyskillid_;
}
 void UserHeroBaseData::set_nskyskillid(::google::protobuf::uint32 value) {
  
  nskyskillid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nSkySkillId)
}

// optional uint32 nIntroductionId = 46;
void UserHeroBaseData::clear_nintroductionid() {
  nintroductionid_ = 0u;
}
 ::google::protobuf::uint32 UserHeroBaseData::nintroductionid() const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.nIntroductionId)
  return nintroductionid_;
}
 void UserHeroBaseData::set_nintroductionid(::google::protobuf::uint32 value) {
  
  nintroductionid_ = value;
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.nIntroductionId)
}

// repeated string tArrRacialTalent = 47;
int UserHeroBaseData::tarrracialtalent_size() const {
  return tarrracialtalent_.size();
}
void UserHeroBaseData::clear_tarrracialtalent() {
  tarrracialtalent_.Clear();
}
 const ::std::string& UserHeroBaseData::tarrracialtalent(int index) const {
  // @@protoc_insertion_point(field_get:proto3.UserHeroBaseData.tArrRacialTalent)
  return tarrracialtalent_.Get(index);
}
 ::std::string* UserHeroBaseData::mutable_tarrracialtalent(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.UserHeroBaseData.tArrRacialTalent)
  return tarrracialtalent_.Mutable(index);
}
 void UserHeroBaseData::set_tarrracialtalent(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto3.UserHeroBaseData.tArrRacialTalent)
  tarrracialtalent_.Mutable(index)->assign(value);
}
 void UserHeroBaseData::set_tarrracialtalent(int index, const char* value) {
  tarrracialtalent_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto3.UserHeroBaseData.tArrRacialTalent)
}
 void UserHeroBaseData::set_tarrracialtalent(int index, const char* value, size_t size) {
  tarrracialtalent_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto3.UserHeroBaseData.tArrRacialTalent)
}
 ::std::string* UserHeroBaseData::add_tarrracialtalent() {
  // @@protoc_insertion_point(field_add_mutable:proto3.UserHeroBaseData.tArrRacialTalent)
  return tarrracialtalent_.Add();
}
 void UserHeroBaseData::add_tarrracialtalent(const ::std::string& value) {
  tarrracialtalent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto3.UserHeroBaseData.tArrRacialTalent)
}
 void UserHeroBaseData::add_tarrracialtalent(const char* value) {
  tarrracialtalent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto3.UserHeroBaseData.tArrRacialTalent)
}
 void UserHeroBaseData::add_tarrracialtalent(const char* value, size_t size) {
  tarrracialtalent_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto3.UserHeroBaseData.tArrRacialTalent)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserHeroBaseData::tarrracialtalent() const {
  // @@protoc_insertion_point(field_list:proto3.UserHeroBaseData.tArrRacialTalent)
  return tarrracialtalent_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
UserHeroBaseData::mutable_tarrracialtalent() {
  // @@protoc_insertion_point(field_mutable_list:proto3.UserHeroBaseData.tArrRacialTalent)
  return &tarrracialtalent_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChapterData::kNIDFieldNumber;
const int ChapterData::kNNameIdFieldNumber;
const int ChapterData::kNTypeFieldNumber;
const int ChapterData::kNDescIdFieldNumber;
const int ChapterData::kNLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChapterData::ChapterData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.ChapterData)
}

void ChapterData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChapterData::ChapterData(const ChapterData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.ChapterData)
}

void ChapterData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nid_ = 0u;
  nnameid_ = 0u;
  ntype_ = 0u;
  ndescid_ = 0u;
  nlevel_ = 0u;
}

ChapterData::~ChapterData() {
  // @@protoc_insertion_point(destructor:proto3.ChapterData)
  SharedDtor();
}

void ChapterData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChapterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChapterData& ChapterData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

ChapterData* ChapterData::default_instance_ = NULL;

ChapterData* ChapterData::New(::google::protobuf::Arena* arena) const {
  ChapterData* n = new ChapterData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChapterData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.ChapterData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChapterData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChapterData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nid_, nlevel_);

#undef ZR_HELPER_
#undef ZR_

}

bool ChapterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.ChapterData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nNameId;
        break;
      }

      // optional uint32 nNameId = 2;
      case 2: {
        if (tag == 16) {
         parse_nNameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }

      // optional uint32 nType = 3;
      case 3: {
        if (tag == 24) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nDescId;
        break;
      }

      // optional uint32 nDescId = 4;
      case 4: {
        if (tag == 32) {
         parse_nDescId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndescid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nLevel;
        break;
      }

      // optional uint32 nLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.ChapterData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.ChapterData)
  return false;
#undef DO_
}

void ChapterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.ChapterData)
  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nnameid(), output);
  }

  // optional uint32 nType = 3;
  if (this->ntype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ntype(), output);
  }

  // optional uint32 nDescId = 4;
  if (this->ndescid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ndescid(), output);
  }

  // optional uint32 nLevel = 5;
  if (this->nlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nlevel(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.ChapterData)
}

int ChapterData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.ChapterData)
  int total_size = 0;

  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nid());
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnameid());
  }

  // optional uint32 nType = 3;
  if (this->ntype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntype());
  }

  // optional uint32 nDescId = 4;
  if (this->ndescid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndescid());
  }

  // optional uint32 nLevel = 5;
  if (this->nlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nlevel());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChapterData*>(&from));
}

void ChapterData::MergeFrom(const ChapterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.ChapterData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.nnameid() != 0) {
    set_nnameid(from.nnameid());
  }
  if (from.ntype() != 0) {
    set_ntype(from.ntype());
  }
  if (from.ndescid() != 0) {
    set_ndescid(from.ndescid());
  }
  if (from.nlevel() != 0) {
    set_nlevel(from.nlevel());
  }
}

void ChapterData::CopyFrom(const ChapterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.ChapterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterData::IsInitialized() const {

  return true;
}

void ChapterData::Swap(ChapterData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChapterData::InternalSwap(ChapterData* other) {
  std::swap(nid_, other->nid_);
  std::swap(nnameid_, other->nnameid_);
  std::swap(ntype_, other->ntype_);
  std::swap(ndescid_, other->ndescid_);
  std::swap(nlevel_, other->nlevel_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChapterData::GetTypeName() const {
  return "proto3.ChapterData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChapterData

// optional uint32 nID = 1;
void ChapterData::clear_nid() {
  nid_ = 0u;
}
 ::google::protobuf::uint32 ChapterData::nid() const {
  // @@protoc_insertion_point(field_get:proto3.ChapterData.nID)
  return nid_;
}
 void ChapterData::set_nid(::google::protobuf::uint32 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:proto3.ChapterData.nID)
}

// optional uint32 nNameId = 2;
void ChapterData::clear_nnameid() {
  nnameid_ = 0u;
}
 ::google::protobuf::uint32 ChapterData::nnameid() const {
  // @@protoc_insertion_point(field_get:proto3.ChapterData.nNameId)
  return nnameid_;
}
 void ChapterData::set_nnameid(::google::protobuf::uint32 value) {
  
  nnameid_ = value;
  // @@protoc_insertion_point(field_set:proto3.ChapterData.nNameId)
}

// optional uint32 nType = 3;
void ChapterData::clear_ntype() {
  ntype_ = 0u;
}
 ::google::protobuf::uint32 ChapterData::ntype() const {
  // @@protoc_insertion_point(field_get:proto3.ChapterData.nType)
  return ntype_;
}
 void ChapterData::set_ntype(::google::protobuf::uint32 value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:proto3.ChapterData.nType)
}

// optional uint32 nDescId = 4;
void ChapterData::clear_ndescid() {
  ndescid_ = 0u;
}
 ::google::protobuf::uint32 ChapterData::ndescid() const {
  // @@protoc_insertion_point(field_get:proto3.ChapterData.nDescId)
  return ndescid_;
}
 void ChapterData::set_ndescid(::google::protobuf::uint32 value) {
  
  ndescid_ = value;
  // @@protoc_insertion_point(field_set:proto3.ChapterData.nDescId)
}

// optional uint32 nLevel = 5;
void ChapterData::clear_nlevel() {
  nlevel_ = 0u;
}
 ::google::protobuf::uint32 ChapterData::nlevel() const {
  // @@protoc_insertion_point(field_get:proto3.ChapterData.nLevel)
  return nlevel_;
}
 void ChapterData::set_nlevel(::google::protobuf::uint32 value) {
  
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:proto3.ChapterData.nLevel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StageData::kNIDFieldNumber;
const int StageData::kNNameIdFieldNumber;
const int StageData::kNGroupIdFieldNumber;
const int StageData::kNLevelFieldNumber;
const int StageData::kNDifficultyFieldNumber;
const int StageData::kNNeedMobilityFieldNumber;
const int StageData::kNMapIdFieldNumber;
const int StageData::kNRewardExpFieldNumber;
const int StageData::kNRewardGoldFieldNumber;
const int StageData::kNRewardExploitFieldNumber;
const int StageData::kNRewardCourageFieldNumber;
const int StageData::kNRewardJusticeFieldNumber;
const int StageData::kNRewardPackIdFieldNumber;
const int StageData::kNNextInstanceIdsFieldNumber;
const int StageData::kNActivateInstanceIdFieldNumber;
const int StageData::kNFreeTimesFieldNumber;
const int StageData::kNCanBuyTimesFieldNumber;
const int StageData::kNPriceFieldNumber;
const int StageData::kNStarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageData::StageData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageData)
}

void StageData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageData::StageData(const StageData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageData)
}

void StageData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nid_ = 0u;
  nnameid_ = 0u;
  ngroupid_ = 0u;
  nlevel_ = 0u;
  ndifficulty_ = 0u;
  nneedmobility_ = 0u;
  nmapid_ = 0u;
  nrewardexp_ = 0u;
  nrewardgold_ = 0u;
  nrewardexploit_ = 0u;
  nrewardcourage_ = 0u;
  nrewardjustice_ = 0u;
  nrewardpackid_ = 0u;
  nnextinstanceids_ = 0u;
  nactivateinstanceid_ = 0u;
  nfreetimes_ = 0u;
  ncanbuytimes_ = 0u;
  nprice_ = 0u;
  nstar_ = 0u;
}

StageData::~StageData() {
  // @@protoc_insertion_point(destructor:proto3.StageData)
  SharedDtor();
}

void StageData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageData& StageData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageData* StageData::default_instance_ = NULL;

StageData* StageData::New(::google::protobuf::Arena* arena) const {
  StageData* n = new StageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StageData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StageData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nid_, nrewardexp_);
  ZR_(nrewardgold_, nfreetimes_);
  ZR_(ncanbuytimes_, nstar_);

#undef ZR_HELPER_
#undef ZR_

}

bool StageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nNameId;
        break;
      }

      // optional uint32 nNameId = 2;
      case 2: {
        if (tag == 16) {
         parse_nNameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nGroupId;
        break;
      }

      // optional uint32 nGroupId = 3;
      case 3: {
        if (tag == 24) {
         parse_nGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngroupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nLevel;
        break;
      }

      // optional uint32 nLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nlevel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nDifficulty;
        break;
      }

      // optional uint32 nDifficulty = 5;
      case 5: {
        if (tag == 40) {
         parse_nDifficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndifficulty_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nNeedMobility;
        break;
      }

      // optional uint32 nNeedMobility = 6;
      case 6: {
        if (tag == 48) {
         parse_nNeedMobility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nneedmobility_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nMapId;
        break;
      }

      // optional uint32 nMapId = 7;
      case 7: {
        if (tag == 56) {
         parse_nMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmapid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_nRewardExp;
        break;
      }

      // optional uint32 nRewardExp = 8;
      case 8: {
        if (tag == 64) {
         parse_nRewardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardexp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_nRewardGold;
        break;
      }

      // optional uint32 nRewardGold = 9;
      case 9: {
        if (tag == 72) {
         parse_nRewardGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardgold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_nRewardExploit;
        break;
      }

      // optional uint32 nRewardExploit = 10;
      case 10: {
        if (tag == 80) {
         parse_nRewardExploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardexploit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nRewardCourage;
        break;
      }

      // optional uint32 nRewardCourage = 11;
      case 11: {
        if (tag == 88) {
         parse_nRewardCourage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardcourage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_nRewardJustice;
        break;
      }

      // optional uint32 nRewardJustice = 12;
      case 12: {
        if (tag == 96) {
         parse_nRewardJustice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardjustice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_nRewardPackId;
        break;
      }

      // optional uint32 nRewardPackId = 13;
      case 13: {
        if (tag == 104) {
         parse_nRewardPackId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardpackid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_nNextInstanceIds;
        break;
      }

      // optional uint32 nNextInstanceIds = 14;
      case 14: {
        if (tag == 112) {
         parse_nNextInstanceIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnextinstanceids_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_nActivateInstanceId;
        break;
      }

      // optional uint32 nActivateInstanceId = 15;
      case 15: {
        if (tag == 120) {
         parse_nActivateInstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nactivateinstanceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_nFreeTimes;
        break;
      }

      // optional uint32 nFreeTimes = 16;
      case 16: {
        if (tag == 128) {
         parse_nFreeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nfreetimes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_nCanBuyTimes;
        break;
      }

      // optional uint32 nCanBuyTimes = 17;
      case 17: {
        if (tag == 136) {
         parse_nCanBuyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncanbuytimes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_nPrice;
        break;
      }

      // optional uint32 nPrice = 18;
      case 18: {
        if (tag == 144) {
         parse_nPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_nStar;
        break;
      }

      // optional uint32 nStar = 19;
      case 19: {
        if (tag == 152) {
         parse_nStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstar_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageData)
  return false;
#undef DO_
}

void StageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageData)
  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nnameid(), output);
  }

  // optional uint32 nGroupId = 3;
  if (this->ngroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ngroupid(), output);
  }

  // optional uint32 nLevel = 4;
  if (this->nlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nlevel(), output);
  }

  // optional uint32 nDifficulty = 5;
  if (this->ndifficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ndifficulty(), output);
  }

  // optional uint32 nNeedMobility = 6;
  if (this->nneedmobility() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nneedmobility(), output);
  }

  // optional uint32 nMapId = 7;
  if (this->nmapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nmapid(), output);
  }

  // optional uint32 nRewardExp = 8;
  if (this->nrewardexp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nrewardexp(), output);
  }

  // optional uint32 nRewardGold = 9;
  if (this->nrewardgold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->nrewardgold(), output);
  }

  // optional uint32 nRewardExploit = 10;
  if (this->nrewardexploit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nrewardexploit(), output);
  }

  // optional uint32 nRewardCourage = 11;
  if (this->nrewardcourage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nrewardcourage(), output);
  }

  // optional uint32 nRewardJustice = 12;
  if (this->nrewardjustice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->nrewardjustice(), output);
  }

  // optional uint32 nRewardPackId = 13;
  if (this->nrewardpackid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nrewardpackid(), output);
  }

  // optional uint32 nNextInstanceIds = 14;
  if (this->nnextinstanceids() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->nnextinstanceids(), output);
  }

  // optional uint32 nActivateInstanceId = 15;
  if (this->nactivateinstanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->nactivateinstanceid(), output);
  }

  // optional uint32 nFreeTimes = 16;
  if (this->nfreetimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->nfreetimes(), output);
  }

  // optional uint32 nCanBuyTimes = 17;
  if (this->ncanbuytimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->ncanbuytimes(), output);
  }

  // optional uint32 nPrice = 18;
  if (this->nprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->nprice(), output);
  }

  // optional uint32 nStar = 19;
  if (this->nstar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->nstar(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.StageData)
}

int StageData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageData)
  int total_size = 0;

  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nid());
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnameid());
  }

  // optional uint32 nGroupId = 3;
  if (this->ngroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ngroupid());
  }

  // optional uint32 nLevel = 4;
  if (this->nlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nlevel());
  }

  // optional uint32 nDifficulty = 5;
  if (this->ndifficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndifficulty());
  }

  // optional uint32 nNeedMobility = 6;
  if (this->nneedmobility() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nneedmobility());
  }

  // optional uint32 nMapId = 7;
  if (this->nmapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nmapid());
  }

  // optional uint32 nRewardExp = 8;
  if (this->nrewardexp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardexp());
  }

  // optional uint32 nRewardGold = 9;
  if (this->nrewardgold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardgold());
  }

  // optional uint32 nRewardExploit = 10;
  if (this->nrewardexploit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardexploit());
  }

  // optional uint32 nRewardCourage = 11;
  if (this->nrewardcourage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardcourage());
  }

  // optional uint32 nRewardJustice = 12;
  if (this->nrewardjustice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardjustice());
  }

  // optional uint32 nRewardPackId = 13;
  if (this->nrewardpackid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardpackid());
  }

  // optional uint32 nNextInstanceIds = 14;
  if (this->nnextinstanceids() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnextinstanceids());
  }

  // optional uint32 nActivateInstanceId = 15;
  if (this->nactivateinstanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nactivateinstanceid());
  }

  // optional uint32 nFreeTimes = 16;
  if (this->nfreetimes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nfreetimes());
  }

  // optional uint32 nCanBuyTimes = 17;
  if (this->ncanbuytimes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncanbuytimes());
  }

  // optional uint32 nPrice = 18;
  if (this->nprice() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nprice());
  }

  // optional uint32 nStar = 19;
  if (this->nstar() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstar());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageData*>(&from));
}

void StageData::MergeFrom(const StageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.nnameid() != 0) {
    set_nnameid(from.nnameid());
  }
  if (from.ngroupid() != 0) {
    set_ngroupid(from.ngroupid());
  }
  if (from.nlevel() != 0) {
    set_nlevel(from.nlevel());
  }
  if (from.ndifficulty() != 0) {
    set_ndifficulty(from.ndifficulty());
  }
  if (from.nneedmobility() != 0) {
    set_nneedmobility(from.nneedmobility());
  }
  if (from.nmapid() != 0) {
    set_nmapid(from.nmapid());
  }
  if (from.nrewardexp() != 0) {
    set_nrewardexp(from.nrewardexp());
  }
  if (from.nrewardgold() != 0) {
    set_nrewardgold(from.nrewardgold());
  }
  if (from.nrewardexploit() != 0) {
    set_nrewardexploit(from.nrewardexploit());
  }
  if (from.nrewardcourage() != 0) {
    set_nrewardcourage(from.nrewardcourage());
  }
  if (from.nrewardjustice() != 0) {
    set_nrewardjustice(from.nrewardjustice());
  }
  if (from.nrewardpackid() != 0) {
    set_nrewardpackid(from.nrewardpackid());
  }
  if (from.nnextinstanceids() != 0) {
    set_nnextinstanceids(from.nnextinstanceids());
  }
  if (from.nactivateinstanceid() != 0) {
    set_nactivateinstanceid(from.nactivateinstanceid());
  }
  if (from.nfreetimes() != 0) {
    set_nfreetimes(from.nfreetimes());
  }
  if (from.ncanbuytimes() != 0) {
    set_ncanbuytimes(from.ncanbuytimes());
  }
  if (from.nprice() != 0) {
    set_nprice(from.nprice());
  }
  if (from.nstar() != 0) {
    set_nstar(from.nstar());
  }
}

void StageData::CopyFrom(const StageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageData::IsInitialized() const {

  return true;
}

void StageData::Swap(StageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageData::InternalSwap(StageData* other) {
  std::swap(nid_, other->nid_);
  std::swap(nnameid_, other->nnameid_);
  std::swap(ngroupid_, other->ngroupid_);
  std::swap(nlevel_, other->nlevel_);
  std::swap(ndifficulty_, other->ndifficulty_);
  std::swap(nneedmobility_, other->nneedmobility_);
  std::swap(nmapid_, other->nmapid_);
  std::swap(nrewardexp_, other->nrewardexp_);
  std::swap(nrewardgold_, other->nrewardgold_);
  std::swap(nrewardexploit_, other->nrewardexploit_);
  std::swap(nrewardcourage_, other->nrewardcourage_);
  std::swap(nrewardjustice_, other->nrewardjustice_);
  std::swap(nrewardpackid_, other->nrewardpackid_);
  std::swap(nnextinstanceids_, other->nnextinstanceids_);
  std::swap(nactivateinstanceid_, other->nactivateinstanceid_);
  std::swap(nfreetimes_, other->nfreetimes_);
  std::swap(ncanbuytimes_, other->ncanbuytimes_);
  std::swap(nprice_, other->nprice_);
  std::swap(nstar_, other->nstar_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageData::GetTypeName() const {
  return "proto3.StageData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StageData

// optional uint32 nID = 1;
void StageData::clear_nid() {
  nid_ = 0u;
}
 ::google::protobuf::uint32 StageData::nid() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nID)
  return nid_;
}
 void StageData::set_nid(::google::protobuf::uint32 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nID)
}

// optional uint32 nNameId = 2;
void StageData::clear_nnameid() {
  nnameid_ = 0u;
}
 ::google::protobuf::uint32 StageData::nnameid() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nNameId)
  return nnameid_;
}
 void StageData::set_nnameid(::google::protobuf::uint32 value) {
  
  nnameid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nNameId)
}

// optional uint32 nGroupId = 3;
void StageData::clear_ngroupid() {
  ngroupid_ = 0u;
}
 ::google::protobuf::uint32 StageData::ngroupid() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nGroupId)
  return ngroupid_;
}
 void StageData::set_ngroupid(::google::protobuf::uint32 value) {
  
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nGroupId)
}

// optional uint32 nLevel = 4;
void StageData::clear_nlevel() {
  nlevel_ = 0u;
}
 ::google::protobuf::uint32 StageData::nlevel() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nLevel)
  return nlevel_;
}
 void StageData::set_nlevel(::google::protobuf::uint32 value) {
  
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nLevel)
}

// optional uint32 nDifficulty = 5;
void StageData::clear_ndifficulty() {
  ndifficulty_ = 0u;
}
 ::google::protobuf::uint32 StageData::ndifficulty() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nDifficulty)
  return ndifficulty_;
}
 void StageData::set_ndifficulty(::google::protobuf::uint32 value) {
  
  ndifficulty_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nDifficulty)
}

// optional uint32 nNeedMobility = 6;
void StageData::clear_nneedmobility() {
  nneedmobility_ = 0u;
}
 ::google::protobuf::uint32 StageData::nneedmobility() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nNeedMobility)
  return nneedmobility_;
}
 void StageData::set_nneedmobility(::google::protobuf::uint32 value) {
  
  nneedmobility_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nNeedMobility)
}

// optional uint32 nMapId = 7;
void StageData::clear_nmapid() {
  nmapid_ = 0u;
}
 ::google::protobuf::uint32 StageData::nmapid() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nMapId)
  return nmapid_;
}
 void StageData::set_nmapid(::google::protobuf::uint32 value) {
  
  nmapid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nMapId)
}

// optional uint32 nRewardExp = 8;
void StageData::clear_nrewardexp() {
  nrewardexp_ = 0u;
}
 ::google::protobuf::uint32 StageData::nrewardexp() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nRewardExp)
  return nrewardexp_;
}
 void StageData::set_nrewardexp(::google::protobuf::uint32 value) {
  
  nrewardexp_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nRewardExp)
}

// optional uint32 nRewardGold = 9;
void StageData::clear_nrewardgold() {
  nrewardgold_ = 0u;
}
 ::google::protobuf::uint32 StageData::nrewardgold() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nRewardGold)
  return nrewardgold_;
}
 void StageData::set_nrewardgold(::google::protobuf::uint32 value) {
  
  nrewardgold_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nRewardGold)
}

// optional uint32 nRewardExploit = 10;
void StageData::clear_nrewardexploit() {
  nrewardexploit_ = 0u;
}
 ::google::protobuf::uint32 StageData::nrewardexploit() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nRewardExploit)
  return nrewardexploit_;
}
 void StageData::set_nrewardexploit(::google::protobuf::uint32 value) {
  
  nrewardexploit_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nRewardExploit)
}

// optional uint32 nRewardCourage = 11;
void StageData::clear_nrewardcourage() {
  nrewardcourage_ = 0u;
}
 ::google::protobuf::uint32 StageData::nrewardcourage() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nRewardCourage)
  return nrewardcourage_;
}
 void StageData::set_nrewardcourage(::google::protobuf::uint32 value) {
  
  nrewardcourage_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nRewardCourage)
}

// optional uint32 nRewardJustice = 12;
void StageData::clear_nrewardjustice() {
  nrewardjustice_ = 0u;
}
 ::google::protobuf::uint32 StageData::nrewardjustice() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nRewardJustice)
  return nrewardjustice_;
}
 void StageData::set_nrewardjustice(::google::protobuf::uint32 value) {
  
  nrewardjustice_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nRewardJustice)
}

// optional uint32 nRewardPackId = 13;
void StageData::clear_nrewardpackid() {
  nrewardpackid_ = 0u;
}
 ::google::protobuf::uint32 StageData::nrewardpackid() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nRewardPackId)
  return nrewardpackid_;
}
 void StageData::set_nrewardpackid(::google::protobuf::uint32 value) {
  
  nrewardpackid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nRewardPackId)
}

// optional uint32 nNextInstanceIds = 14;
void StageData::clear_nnextinstanceids() {
  nnextinstanceids_ = 0u;
}
 ::google::protobuf::uint32 StageData::nnextinstanceids() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nNextInstanceIds)
  return nnextinstanceids_;
}
 void StageData::set_nnextinstanceids(::google::protobuf::uint32 value) {
  
  nnextinstanceids_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nNextInstanceIds)
}

// optional uint32 nActivateInstanceId = 15;
void StageData::clear_nactivateinstanceid() {
  nactivateinstanceid_ = 0u;
}
 ::google::protobuf::uint32 StageData::nactivateinstanceid() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nActivateInstanceId)
  return nactivateinstanceid_;
}
 void StageData::set_nactivateinstanceid(::google::protobuf::uint32 value) {
  
  nactivateinstanceid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nActivateInstanceId)
}

// optional uint32 nFreeTimes = 16;
void StageData::clear_nfreetimes() {
  nfreetimes_ = 0u;
}
 ::google::protobuf::uint32 StageData::nfreetimes() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nFreeTimes)
  return nfreetimes_;
}
 void StageData::set_nfreetimes(::google::protobuf::uint32 value) {
  
  nfreetimes_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nFreeTimes)
}

// optional uint32 nCanBuyTimes = 17;
void StageData::clear_ncanbuytimes() {
  ncanbuytimes_ = 0u;
}
 ::google::protobuf::uint32 StageData::ncanbuytimes() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nCanBuyTimes)
  return ncanbuytimes_;
}
 void StageData::set_ncanbuytimes(::google::protobuf::uint32 value) {
  
  ncanbuytimes_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nCanBuyTimes)
}

// optional uint32 nPrice = 18;
void StageData::clear_nprice() {
  nprice_ = 0u;
}
 ::google::protobuf::uint32 StageData::nprice() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nPrice)
  return nprice_;
}
 void StageData::set_nprice(::google::protobuf::uint32 value) {
  
  nprice_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nPrice)
}

// optional uint32 nStar = 19;
void StageData::clear_nstar() {
  nstar_ = 0u;
}
 ::google::protobuf::uint32 StageData::nstar() const {
  // @@protoc_insertion_point(field_get:proto3.StageData.nStar)
  return nstar_;
}
 void StageData::set_nstar(::google::protobuf::uint32 value) {
  
  nstar_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageData.nStar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageMonsterPositionData_tArrPositions::StageMonsterPositionData_tArrPositions()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageMonsterPositionData.tArrPositions)
}

void StageMonsterPositionData_tArrPositions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageMonsterPositionData_tArrPositions::StageMonsterPositionData_tArrPositions(const StageMonsterPositionData_tArrPositions& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageMonsterPositionData.tArrPositions)
}

void StageMonsterPositionData_tArrPositions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageMonsterPositionData_tArrPositions::~StageMonsterPositionData_tArrPositions() {
  // @@protoc_insertion_point(destructor:proto3.StageMonsterPositionData.tArrPositions)
  SharedDtor();
}

void StageMonsterPositionData_tArrPositions::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageMonsterPositionData_tArrPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageMonsterPositionData_tArrPositions& StageMonsterPositionData_tArrPositions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageMonsterPositionData_tArrPositions* StageMonsterPositionData_tArrPositions::default_instance_ = NULL;

StageMonsterPositionData_tArrPositions* StageMonsterPositionData_tArrPositions::New(::google::protobuf::Arena* arena) const {
  StageMonsterPositionData_tArrPositions* n = new StageMonsterPositionData_tArrPositions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageMonsterPositionData_tArrPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageMonsterPositionData.tArrPositions)
}

bool StageMonsterPositionData_tArrPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageMonsterPositionData.tArrPositions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageMonsterPositionData.tArrPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageMonsterPositionData.tArrPositions)
  return false;
#undef DO_
}

void StageMonsterPositionData_tArrPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageMonsterPositionData.tArrPositions)
  // @@protoc_insertion_point(serialize_end:proto3.StageMonsterPositionData.tArrPositions)
}

int StageMonsterPositionData_tArrPositions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageMonsterPositionData.tArrPositions)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageMonsterPositionData_tArrPositions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageMonsterPositionData_tArrPositions*>(&from));
}

void StageMonsterPositionData_tArrPositions::MergeFrom(const StageMonsterPositionData_tArrPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageMonsterPositionData.tArrPositions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageMonsterPositionData_tArrPositions::CopyFrom(const StageMonsterPositionData_tArrPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageMonsterPositionData.tArrPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageMonsterPositionData_tArrPositions::IsInitialized() const {

  return true;
}

void StageMonsterPositionData_tArrPositions::Swap(StageMonsterPositionData_tArrPositions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageMonsterPositionData_tArrPositions::InternalSwap(StageMonsterPositionData_tArrPositions* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageMonsterPositionData_tArrPositions::GetTypeName() const {
  return "proto3.StageMonsterPositionData.tArrPositions";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StageMonsterPositionData::kNIDFieldNumber;
const int StageMonsterPositionData::kNMonsterArrayIDFieldNumber;
const int StageMonsterPositionData::kTarrpositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageMonsterPositionData::StageMonsterPositionData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageMonsterPositionData)
}

void StageMonsterPositionData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageMonsterPositionData::StageMonsterPositionData(const StageMonsterPositionData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageMonsterPositionData)
}

void StageMonsterPositionData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nid_ = 0u;
  nmonsterarrayid_ = 0u;
}

StageMonsterPositionData::~StageMonsterPositionData() {
  // @@protoc_insertion_point(destructor:proto3.StageMonsterPositionData)
  SharedDtor();
}

void StageMonsterPositionData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageMonsterPositionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageMonsterPositionData& StageMonsterPositionData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageMonsterPositionData* StageMonsterPositionData::default_instance_ = NULL;

StageMonsterPositionData* StageMonsterPositionData::New(::google::protobuf::Arena* arena) const {
  StageMonsterPositionData* n = new StageMonsterPositionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageMonsterPositionData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageMonsterPositionData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StageMonsterPositionData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StageMonsterPositionData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nid_, nmonsterarrayid_);

#undef ZR_HELPER_
#undef ZR_

  tarrpositions_.Clear();
}

bool StageMonsterPositionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageMonsterPositionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nMonsterArrayID;
        break;
      }

      // optional uint32 nMonsterArrayID = 2;
      case 2: {
        if (tag == 16) {
         parse_nMonsterArrayID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmonsterarrayid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tarrpositions;
        break;
      }

      // repeated .proto3.StageMonsterPositionData.tArrPositions tarrpositions = 3;
      case 3: {
        if (tag == 26) {
         parse_tarrpositions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tarrpositions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tarrpositions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_tarrpositions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageMonsterPositionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageMonsterPositionData)
  return false;
#undef DO_
}

void StageMonsterPositionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageMonsterPositionData)
  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nMonsterArrayID = 2;
  if (this->nmonsterarrayid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nmonsterarrayid(), output);
  }

  // repeated .proto3.StageMonsterPositionData.tArrPositions tarrpositions = 3;
  for (unsigned int i = 0, n = this->tarrpositions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->tarrpositions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.StageMonsterPositionData)
}

int StageMonsterPositionData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageMonsterPositionData)
  int total_size = 0;

  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nid());
  }

  // optional uint32 nMonsterArrayID = 2;
  if (this->nmonsterarrayid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nmonsterarrayid());
  }

  // repeated .proto3.StageMonsterPositionData.tArrPositions tarrpositions = 3;
  total_size += 1 * this->tarrpositions_size();
  for (int i = 0; i < this->tarrpositions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tarrpositions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageMonsterPositionData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageMonsterPositionData*>(&from));
}

void StageMonsterPositionData::MergeFrom(const StageMonsterPositionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageMonsterPositionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tarrpositions_.MergeFrom(from.tarrpositions_);
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.nmonsterarrayid() != 0) {
    set_nmonsterarrayid(from.nmonsterarrayid());
  }
}

void StageMonsterPositionData::CopyFrom(const StageMonsterPositionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageMonsterPositionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageMonsterPositionData::IsInitialized() const {

  return true;
}

void StageMonsterPositionData::Swap(StageMonsterPositionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageMonsterPositionData::InternalSwap(StageMonsterPositionData* other) {
  std::swap(nid_, other->nid_);
  std::swap(nmonsterarrayid_, other->nmonsterarrayid_);
  tarrpositions_.UnsafeArenaSwap(&other->tarrpositions_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageMonsterPositionData::GetTypeName() const {
  return "proto3.StageMonsterPositionData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StageMonsterPositionData_tArrPositions

// -------------------------------------------------------------------

// StageMonsterPositionData

// optional uint32 nID = 1;
void StageMonsterPositionData::clear_nid() {
  nid_ = 0u;
}
 ::google::protobuf::uint32 StageMonsterPositionData::nid() const {
  // @@protoc_insertion_point(field_get:proto3.StageMonsterPositionData.nID)
  return nid_;
}
 void StageMonsterPositionData::set_nid(::google::protobuf::uint32 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageMonsterPositionData.nID)
}

// optional uint32 nMonsterArrayID = 2;
void StageMonsterPositionData::clear_nmonsterarrayid() {
  nmonsterarrayid_ = 0u;
}
 ::google::protobuf::uint32 StageMonsterPositionData::nmonsterarrayid() const {
  // @@protoc_insertion_point(field_get:proto3.StageMonsterPositionData.nMonsterArrayID)
  return nmonsterarrayid_;
}
 void StageMonsterPositionData::set_nmonsterarrayid(::google::protobuf::uint32 value) {
  
  nmonsterarrayid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageMonsterPositionData.nMonsterArrayID)
}

// repeated .proto3.StageMonsterPositionData.tArrPositions tarrpositions = 3;
int StageMonsterPositionData::tarrpositions_size() const {
  return tarrpositions_.size();
}
void StageMonsterPositionData::clear_tarrpositions() {
  tarrpositions_.Clear();
}
const ::proto3::StageMonsterPositionData_tArrPositions& StageMonsterPositionData::tarrpositions(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageMonsterPositionData.tarrpositions)
  return tarrpositions_.Get(index);
}
::proto3::StageMonsterPositionData_tArrPositions* StageMonsterPositionData::mutable_tarrpositions(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageMonsterPositionData.tarrpositions)
  return tarrpositions_.Mutable(index);
}
::proto3::StageMonsterPositionData_tArrPositions* StageMonsterPositionData::add_tarrpositions() {
  // @@protoc_insertion_point(field_add:proto3.StageMonsterPositionData.tarrpositions)
  return tarrpositions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageMonsterPositionData_tArrPositions >*
StageMonsterPositionData::mutable_tarrpositions() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageMonsterPositionData.tarrpositions)
  return &tarrpositions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageMonsterPositionData_tArrPositions >&
StageMonsterPositionData::tarrpositions() const {
  // @@protoc_insertion_point(field_list:proto3.StageMonsterPositionData.tarrpositions)
  return tarrpositions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nItemId_Normal::StageLootRewardData_nItemId_Normal()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nItemId_Normal)
}

void StageLootRewardData_nItemId_Normal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nItemId_Normal::StageLootRewardData_nItemId_Normal(const StageLootRewardData_nItemId_Normal& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nItemId_Normal)
}

void StageLootRewardData_nItemId_Normal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nItemId_Normal::~StageLootRewardData_nItemId_Normal() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nItemId_Normal)
  SharedDtor();
}

void StageLootRewardData_nItemId_Normal::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nItemId_Normal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nItemId_Normal& StageLootRewardData_nItemId_Normal::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nItemId_Normal* StageLootRewardData_nItemId_Normal::default_instance_ = NULL;

StageLootRewardData_nItemId_Normal* StageLootRewardData_nItemId_Normal::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nItemId_Normal* n = new StageLootRewardData_nItemId_Normal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nItemId_Normal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nItemId_Normal)
}

bool StageLootRewardData_nItemId_Normal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nItemId_Normal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nItemId_Normal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nItemId_Normal)
  return false;
#undef DO_
}

void StageLootRewardData_nItemId_Normal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nItemId_Normal)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nItemId_Normal)
}

int StageLootRewardData_nItemId_Normal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nItemId_Normal)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nItemId_Normal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nItemId_Normal*>(&from));
}

void StageLootRewardData_nItemId_Normal::MergeFrom(const StageLootRewardData_nItemId_Normal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nItemId_Normal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nItemId_Normal::CopyFrom(const StageLootRewardData_nItemId_Normal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nItemId_Normal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nItemId_Normal::IsInitialized() const {

  return true;
}

void StageLootRewardData_nItemId_Normal::Swap(StageLootRewardData_nItemId_Normal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nItemId_Normal::InternalSwap(StageLootRewardData_nItemId_Normal* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nItemId_Normal::GetTypeName() const {
  return "proto3.StageLootRewardData.nItemId_Normal";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nLoot_random_Normal::StageLootRewardData_nLoot_random_Normal()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nLoot_random_Normal)
}

void StageLootRewardData_nLoot_random_Normal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nLoot_random_Normal::StageLootRewardData_nLoot_random_Normal(const StageLootRewardData_nLoot_random_Normal& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nLoot_random_Normal)
}

void StageLootRewardData_nLoot_random_Normal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nLoot_random_Normal::~StageLootRewardData_nLoot_random_Normal() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nLoot_random_Normal)
  SharedDtor();
}

void StageLootRewardData_nLoot_random_Normal::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nLoot_random_Normal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nLoot_random_Normal& StageLootRewardData_nLoot_random_Normal::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nLoot_random_Normal* StageLootRewardData_nLoot_random_Normal::default_instance_ = NULL;

StageLootRewardData_nLoot_random_Normal* StageLootRewardData_nLoot_random_Normal::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nLoot_random_Normal* n = new StageLootRewardData_nLoot_random_Normal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nLoot_random_Normal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nLoot_random_Normal)
}

bool StageLootRewardData_nLoot_random_Normal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nLoot_random_Normal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nLoot_random_Normal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nLoot_random_Normal)
  return false;
#undef DO_
}

void StageLootRewardData_nLoot_random_Normal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nLoot_random_Normal)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nLoot_random_Normal)
}

int StageLootRewardData_nLoot_random_Normal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nLoot_random_Normal)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nLoot_random_Normal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nLoot_random_Normal*>(&from));
}

void StageLootRewardData_nLoot_random_Normal::MergeFrom(const StageLootRewardData_nLoot_random_Normal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nLoot_random_Normal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nLoot_random_Normal::CopyFrom(const StageLootRewardData_nLoot_random_Normal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nLoot_random_Normal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nLoot_random_Normal::IsInitialized() const {

  return true;
}

void StageLootRewardData_nLoot_random_Normal::Swap(StageLootRewardData_nLoot_random_Normal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nLoot_random_Normal::InternalSwap(StageLootRewardData_nLoot_random_Normal* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nLoot_random_Normal::GetTypeName() const {
  return "proto3.StageLootRewardData.nLoot_random_Normal";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nItemId_Elite::StageLootRewardData_nItemId_Elite()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nItemId_Elite)
}

void StageLootRewardData_nItemId_Elite::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nItemId_Elite::StageLootRewardData_nItemId_Elite(const StageLootRewardData_nItemId_Elite& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nItemId_Elite)
}

void StageLootRewardData_nItemId_Elite::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nItemId_Elite::~StageLootRewardData_nItemId_Elite() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nItemId_Elite)
  SharedDtor();
}

void StageLootRewardData_nItemId_Elite::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nItemId_Elite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nItemId_Elite& StageLootRewardData_nItemId_Elite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nItemId_Elite* StageLootRewardData_nItemId_Elite::default_instance_ = NULL;

StageLootRewardData_nItemId_Elite* StageLootRewardData_nItemId_Elite::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nItemId_Elite* n = new StageLootRewardData_nItemId_Elite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nItemId_Elite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nItemId_Elite)
}

bool StageLootRewardData_nItemId_Elite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nItemId_Elite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nItemId_Elite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nItemId_Elite)
  return false;
#undef DO_
}

void StageLootRewardData_nItemId_Elite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nItemId_Elite)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nItemId_Elite)
}

int StageLootRewardData_nItemId_Elite::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nItemId_Elite)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nItemId_Elite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nItemId_Elite*>(&from));
}

void StageLootRewardData_nItemId_Elite::MergeFrom(const StageLootRewardData_nItemId_Elite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nItemId_Elite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nItemId_Elite::CopyFrom(const StageLootRewardData_nItemId_Elite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nItemId_Elite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nItemId_Elite::IsInitialized() const {

  return true;
}

void StageLootRewardData_nItemId_Elite::Swap(StageLootRewardData_nItemId_Elite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nItemId_Elite::InternalSwap(StageLootRewardData_nItemId_Elite* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nItemId_Elite::GetTypeName() const {
  return "proto3.StageLootRewardData.nItemId_Elite";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nLoot_random_Elite::StageLootRewardData_nLoot_random_Elite()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nLoot_random_Elite)
}

void StageLootRewardData_nLoot_random_Elite::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nLoot_random_Elite::StageLootRewardData_nLoot_random_Elite(const StageLootRewardData_nLoot_random_Elite& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nLoot_random_Elite)
}

void StageLootRewardData_nLoot_random_Elite::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nLoot_random_Elite::~StageLootRewardData_nLoot_random_Elite() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nLoot_random_Elite)
  SharedDtor();
}

void StageLootRewardData_nLoot_random_Elite::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nLoot_random_Elite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nLoot_random_Elite& StageLootRewardData_nLoot_random_Elite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nLoot_random_Elite* StageLootRewardData_nLoot_random_Elite::default_instance_ = NULL;

StageLootRewardData_nLoot_random_Elite* StageLootRewardData_nLoot_random_Elite::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nLoot_random_Elite* n = new StageLootRewardData_nLoot_random_Elite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nLoot_random_Elite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nLoot_random_Elite)
}

bool StageLootRewardData_nLoot_random_Elite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nLoot_random_Elite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nLoot_random_Elite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nLoot_random_Elite)
  return false;
#undef DO_
}

void StageLootRewardData_nLoot_random_Elite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nLoot_random_Elite)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nLoot_random_Elite)
}

int StageLootRewardData_nLoot_random_Elite::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nLoot_random_Elite)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nLoot_random_Elite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nLoot_random_Elite*>(&from));
}

void StageLootRewardData_nLoot_random_Elite::MergeFrom(const StageLootRewardData_nLoot_random_Elite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nLoot_random_Elite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nLoot_random_Elite::CopyFrom(const StageLootRewardData_nLoot_random_Elite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nLoot_random_Elite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nLoot_random_Elite::IsInitialized() const {

  return true;
}

void StageLootRewardData_nLoot_random_Elite::Swap(StageLootRewardData_nLoot_random_Elite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nLoot_random_Elite::InternalSwap(StageLootRewardData_nLoot_random_Elite* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nLoot_random_Elite::GetTypeName() const {
  return "proto3.StageLootRewardData.nLoot_random_Elite";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nItemId_BOSS::StageLootRewardData_nItemId_BOSS()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nItemId_BOSS)
}

void StageLootRewardData_nItemId_BOSS::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nItemId_BOSS::StageLootRewardData_nItemId_BOSS(const StageLootRewardData_nItemId_BOSS& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nItemId_BOSS)
}

void StageLootRewardData_nItemId_BOSS::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nItemId_BOSS::~StageLootRewardData_nItemId_BOSS() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nItemId_BOSS)
  SharedDtor();
}

void StageLootRewardData_nItemId_BOSS::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nItemId_BOSS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nItemId_BOSS& StageLootRewardData_nItemId_BOSS::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nItemId_BOSS* StageLootRewardData_nItemId_BOSS::default_instance_ = NULL;

StageLootRewardData_nItemId_BOSS* StageLootRewardData_nItemId_BOSS::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nItemId_BOSS* n = new StageLootRewardData_nItemId_BOSS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nItemId_BOSS::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nItemId_BOSS)
}

bool StageLootRewardData_nItemId_BOSS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nItemId_BOSS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nItemId_BOSS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nItemId_BOSS)
  return false;
#undef DO_
}

void StageLootRewardData_nItemId_BOSS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nItemId_BOSS)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nItemId_BOSS)
}

int StageLootRewardData_nItemId_BOSS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nItemId_BOSS)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nItemId_BOSS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nItemId_BOSS*>(&from));
}

void StageLootRewardData_nItemId_BOSS::MergeFrom(const StageLootRewardData_nItemId_BOSS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nItemId_BOSS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nItemId_BOSS::CopyFrom(const StageLootRewardData_nItemId_BOSS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nItemId_BOSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nItemId_BOSS::IsInitialized() const {

  return true;
}

void StageLootRewardData_nItemId_BOSS::Swap(StageLootRewardData_nItemId_BOSS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nItemId_BOSS::InternalSwap(StageLootRewardData_nItemId_BOSS* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nItemId_BOSS::GetTypeName() const {
  return "proto3.StageLootRewardData.nItemId_BOSS";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nLoot_random_BOSS::StageLootRewardData_nLoot_random_BOSS()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nLoot_random_BOSS)
}

void StageLootRewardData_nLoot_random_BOSS::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nLoot_random_BOSS::StageLootRewardData_nLoot_random_BOSS(const StageLootRewardData_nLoot_random_BOSS& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nLoot_random_BOSS)
}

void StageLootRewardData_nLoot_random_BOSS::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nLoot_random_BOSS::~StageLootRewardData_nLoot_random_BOSS() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nLoot_random_BOSS)
  SharedDtor();
}

void StageLootRewardData_nLoot_random_BOSS::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nLoot_random_BOSS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nLoot_random_BOSS& StageLootRewardData_nLoot_random_BOSS::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nLoot_random_BOSS* StageLootRewardData_nLoot_random_BOSS::default_instance_ = NULL;

StageLootRewardData_nLoot_random_BOSS* StageLootRewardData_nLoot_random_BOSS::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nLoot_random_BOSS* n = new StageLootRewardData_nLoot_random_BOSS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nLoot_random_BOSS::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nLoot_random_BOSS)
}

bool StageLootRewardData_nLoot_random_BOSS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nLoot_random_BOSS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nLoot_random_BOSS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nLoot_random_BOSS)
  return false;
#undef DO_
}

void StageLootRewardData_nLoot_random_BOSS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nLoot_random_BOSS)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nLoot_random_BOSS)
}

int StageLootRewardData_nLoot_random_BOSS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nLoot_random_BOSS)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nLoot_random_BOSS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nLoot_random_BOSS*>(&from));
}

void StageLootRewardData_nLoot_random_BOSS::MergeFrom(const StageLootRewardData_nLoot_random_BOSS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nLoot_random_BOSS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nLoot_random_BOSS::CopyFrom(const StageLootRewardData_nLoot_random_BOSS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nLoot_random_BOSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nLoot_random_BOSS::IsInitialized() const {

  return true;
}

void StageLootRewardData_nLoot_random_BOSS::Swap(StageLootRewardData_nLoot_random_BOSS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nLoot_random_BOSS::InternalSwap(StageLootRewardData_nLoot_random_BOSS* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nLoot_random_BOSS::GetTypeName() const {
  return "proto3.StageLootRewardData.nLoot_random_BOSS";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nItemId_Activity::StageLootRewardData_nItemId_Activity()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nItemId_Activity)
}

void StageLootRewardData_nItemId_Activity::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nItemId_Activity::StageLootRewardData_nItemId_Activity(const StageLootRewardData_nItemId_Activity& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nItemId_Activity)
}

void StageLootRewardData_nItemId_Activity::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nItemId_Activity::~StageLootRewardData_nItemId_Activity() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nItemId_Activity)
  SharedDtor();
}

void StageLootRewardData_nItemId_Activity::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nItemId_Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nItemId_Activity& StageLootRewardData_nItemId_Activity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nItemId_Activity* StageLootRewardData_nItemId_Activity::default_instance_ = NULL;

StageLootRewardData_nItemId_Activity* StageLootRewardData_nItemId_Activity::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nItemId_Activity* n = new StageLootRewardData_nItemId_Activity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nItemId_Activity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nItemId_Activity)
}

bool StageLootRewardData_nItemId_Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nItemId_Activity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nItemId_Activity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nItemId_Activity)
  return false;
#undef DO_
}

void StageLootRewardData_nItemId_Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nItemId_Activity)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nItemId_Activity)
}

int StageLootRewardData_nItemId_Activity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nItemId_Activity)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nItemId_Activity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nItemId_Activity*>(&from));
}

void StageLootRewardData_nItemId_Activity::MergeFrom(const StageLootRewardData_nItemId_Activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nItemId_Activity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nItemId_Activity::CopyFrom(const StageLootRewardData_nItemId_Activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nItemId_Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nItemId_Activity::IsInitialized() const {

  return true;
}

void StageLootRewardData_nItemId_Activity::Swap(StageLootRewardData_nItemId_Activity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nItemId_Activity::InternalSwap(StageLootRewardData_nItemId_Activity* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nItemId_Activity::GetTypeName() const {
  return "proto3.StageLootRewardData.nItemId_Activity";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nLoot_random_Activity::StageLootRewardData_nLoot_random_Activity()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nLoot_random_Activity)
}

void StageLootRewardData_nLoot_random_Activity::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nLoot_random_Activity::StageLootRewardData_nLoot_random_Activity(const StageLootRewardData_nLoot_random_Activity& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nLoot_random_Activity)
}

void StageLootRewardData_nLoot_random_Activity::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nLoot_random_Activity::~StageLootRewardData_nLoot_random_Activity() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nLoot_random_Activity)
  SharedDtor();
}

void StageLootRewardData_nLoot_random_Activity::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nLoot_random_Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nLoot_random_Activity& StageLootRewardData_nLoot_random_Activity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nLoot_random_Activity* StageLootRewardData_nLoot_random_Activity::default_instance_ = NULL;

StageLootRewardData_nLoot_random_Activity* StageLootRewardData_nLoot_random_Activity::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nLoot_random_Activity* n = new StageLootRewardData_nLoot_random_Activity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nLoot_random_Activity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nLoot_random_Activity)
}

bool StageLootRewardData_nLoot_random_Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nLoot_random_Activity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nLoot_random_Activity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nLoot_random_Activity)
  return false;
#undef DO_
}

void StageLootRewardData_nLoot_random_Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nLoot_random_Activity)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nLoot_random_Activity)
}

int StageLootRewardData_nLoot_random_Activity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nLoot_random_Activity)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nLoot_random_Activity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nLoot_random_Activity*>(&from));
}

void StageLootRewardData_nLoot_random_Activity::MergeFrom(const StageLootRewardData_nLoot_random_Activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nLoot_random_Activity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nLoot_random_Activity::CopyFrom(const StageLootRewardData_nLoot_random_Activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nLoot_random_Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nLoot_random_Activity::IsInitialized() const {

  return true;
}

void StageLootRewardData_nLoot_random_Activity::Swap(StageLootRewardData_nLoot_random_Activity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nLoot_random_Activity::InternalSwap(StageLootRewardData_nLoot_random_Activity* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nLoot_random_Activity::GetTypeName() const {
  return "proto3.StageLootRewardData.nLoot_random_Activity";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nItemId_Task::StageLootRewardData_nItemId_Task()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nItemId_Task)
}

void StageLootRewardData_nItemId_Task::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nItemId_Task::StageLootRewardData_nItemId_Task(const StageLootRewardData_nItemId_Task& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nItemId_Task)
}

void StageLootRewardData_nItemId_Task::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nItemId_Task::~StageLootRewardData_nItemId_Task() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nItemId_Task)
  SharedDtor();
}

void StageLootRewardData_nItemId_Task::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nItemId_Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nItemId_Task& StageLootRewardData_nItemId_Task::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nItemId_Task* StageLootRewardData_nItemId_Task::default_instance_ = NULL;

StageLootRewardData_nItemId_Task* StageLootRewardData_nItemId_Task::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nItemId_Task* n = new StageLootRewardData_nItemId_Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nItemId_Task::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nItemId_Task)
}

bool StageLootRewardData_nItemId_Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nItemId_Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nItemId_Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nItemId_Task)
  return false;
#undef DO_
}

void StageLootRewardData_nItemId_Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nItemId_Task)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nItemId_Task)
}

int StageLootRewardData_nItemId_Task::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nItemId_Task)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nItemId_Task::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nItemId_Task*>(&from));
}

void StageLootRewardData_nItemId_Task::MergeFrom(const StageLootRewardData_nItemId_Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nItemId_Task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nItemId_Task::CopyFrom(const StageLootRewardData_nItemId_Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nItemId_Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nItemId_Task::IsInitialized() const {

  return true;
}

void StageLootRewardData_nItemId_Task::Swap(StageLootRewardData_nItemId_Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nItemId_Task::InternalSwap(StageLootRewardData_nItemId_Task* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nItemId_Task::GetTypeName() const {
  return "proto3.StageLootRewardData.nItemId_Task";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData_nLoot_random_Task::StageLootRewardData_nLoot_random_Task()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData.nLoot_random_Task)
}

void StageLootRewardData_nLoot_random_Task::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData_nLoot_random_Task::StageLootRewardData_nLoot_random_Task(const StageLootRewardData_nLoot_random_Task& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData.nLoot_random_Task)
}

void StageLootRewardData_nLoot_random_Task::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StageLootRewardData_nLoot_random_Task::~StageLootRewardData_nLoot_random_Task() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData.nLoot_random_Task)
  SharedDtor();
}

void StageLootRewardData_nLoot_random_Task::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData_nLoot_random_Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData_nLoot_random_Task& StageLootRewardData_nLoot_random_Task::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData_nLoot_random_Task* StageLootRewardData_nLoot_random_Task::default_instance_ = NULL;

StageLootRewardData_nLoot_random_Task* StageLootRewardData_nLoot_random_Task::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData_nLoot_random_Task* n = new StageLootRewardData_nLoot_random_Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData_nLoot_random_Task::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData.nLoot_random_Task)
}

bool StageLootRewardData_nLoot_random_Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData.nLoot_random_Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData.nLoot_random_Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData.nLoot_random_Task)
  return false;
#undef DO_
}

void StageLootRewardData_nLoot_random_Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData.nLoot_random_Task)
  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData.nLoot_random_Task)
}

int StageLootRewardData_nLoot_random_Task::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData.nLoot_random_Task)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData_nLoot_random_Task::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData_nLoot_random_Task*>(&from));
}

void StageLootRewardData_nLoot_random_Task::MergeFrom(const StageLootRewardData_nLoot_random_Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData.nLoot_random_Task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void StageLootRewardData_nLoot_random_Task::CopyFrom(const StageLootRewardData_nLoot_random_Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData.nLoot_random_Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData_nLoot_random_Task::IsInitialized() const {

  return true;
}

void StageLootRewardData_nLoot_random_Task::Swap(StageLootRewardData_nLoot_random_Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData_nLoot_random_Task::InternalSwap(StageLootRewardData_nLoot_random_Task* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData_nLoot_random_Task::GetTypeName() const {
  return "proto3.StageLootRewardData.nLoot_random_Task";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StageLootRewardData::kNIDFieldNumber;
const int StageLootRewardData::kNNameIdFieldNumber;
const int StageLootRewardData::kNRewardTypeNormalFieldNumber;
const int StageLootRewardData::kNitemidNormalFieldNumber;
const int StageLootRewardData::kNlootRandomNormalFieldNumber;
const int StageLootRewardData::kNRewardTypeEliteFieldNumber;
const int StageLootRewardData::kNitemidEliteFieldNumber;
const int StageLootRewardData::kNlootRandomEliteFieldNumber;
const int StageLootRewardData::kNRewardTypeBOSSFieldNumber;
const int StageLootRewardData::kNitemidBossFieldNumber;
const int StageLootRewardData::kNlootRandomBossFieldNumber;
const int StageLootRewardData::kNRewardTypeActivityFieldNumber;
const int StageLootRewardData::kNitemidActivityFieldNumber;
const int StageLootRewardData::kNlootRandomActivityFieldNumber;
const int StageLootRewardData::kNRewardTypeTaskFieldNumber;
const int StageLootRewardData::kNitemidTaskFieldNumber;
const int StageLootRewardData::kNlootRandomTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StageLootRewardData::StageLootRewardData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.StageLootRewardData)
}

void StageLootRewardData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StageLootRewardData::StageLootRewardData(const StageLootRewardData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.StageLootRewardData)
}

void StageLootRewardData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nid_ = 0u;
  nnameid_ = 0u;
  nrewardtype_normal_ = 0u;
  nrewardtype_elite_ = 0u;
  nrewardtype_boss_ = 0u;
  nrewardtype_activity_ = 0u;
  nrewardtype_task_ = 0u;
}

StageLootRewardData::~StageLootRewardData() {
  // @@protoc_insertion_point(destructor:proto3.StageLootRewardData)
  SharedDtor();
}

void StageLootRewardData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageLootRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageLootRewardData& StageLootRewardData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

StageLootRewardData* StageLootRewardData::default_instance_ = NULL;

StageLootRewardData* StageLootRewardData::New(::google::protobuf::Arena* arena) const {
  StageLootRewardData* n = new StageLootRewardData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StageLootRewardData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.StageLootRewardData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StageLootRewardData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StageLootRewardData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nid_, nnameid_);
  ZR_(nrewardtype_normal_, nrewardtype_elite_);
  ZR_(nrewardtype_boss_, nrewardtype_activity_);
  nrewardtype_task_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  nitemid_normal_.Clear();
  nloot_random_normal_.Clear();
  nitemid_elite_.Clear();
  nloot_random_elite_.Clear();
  nitemid_boss_.Clear();
  nloot_random_boss_.Clear();
  nitemid_activity_.Clear();
  nloot_random_activity_.Clear();
  nitemid_task_.Clear();
  nloot_random_task_.Clear();
}

bool StageLootRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.StageLootRewardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nNameId;
        break;
      }

      // optional uint32 nNameId = 2;
      case 2: {
        if (tag == 16) {
         parse_nNameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nRewardType_Normal;
        break;
      }

      // optional uint32 nRewardType_Normal = 3;
      case 3: {
        if (tag == 24) {
         parse_nRewardType_Normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardtype_normal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nitemid_normal;
        break;
      }

      // repeated .proto3.StageLootRewardData.nItemId_Normal nitemid_normal = 4;
      case 4: {
        if (tag == 34) {
         parse_nitemid_normal:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nitemid_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nitemid_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_nitemid_normal;
        if (input->ExpectTag(42)) goto parse_loop_nloot_random_normal;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.StageLootRewardData.nLoot_random_Normal nloot_random_normal = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nloot_random_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nloot_random_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_nloot_random_normal;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_nRewardType_Elite;
        break;
      }

      // optional uint32 nRewardType_Elite = 6;
      case 6: {
        if (tag == 48) {
         parse_nRewardType_Elite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardtype_elite_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_nitemid_elite;
        break;
      }

      // repeated .proto3.StageLootRewardData.nItemId_Elite nitemid_elite = 7;
      case 7: {
        if (tag == 58) {
         parse_nitemid_elite:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nitemid_elite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nitemid_elite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_nitemid_elite;
        if (input->ExpectTag(66)) goto parse_loop_nloot_random_elite;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.StageLootRewardData.nLoot_random_Elite nloot_random_elite = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nloot_random_elite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nloot_random_elite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_nloot_random_elite;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_nRewardType_BOSS;
        break;
      }

      // optional uint32 nRewardType_BOSS = 9;
      case 9: {
        if (tag == 72) {
         parse_nRewardType_BOSS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardtype_boss_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_nitemid_boss;
        break;
      }

      // repeated .proto3.StageLootRewardData.nItemId_BOSS nitemid_boss = 10;
      case 10: {
        if (tag == 82) {
         parse_nitemid_boss:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nitemid_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nitemid_boss()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_nitemid_boss;
        if (input->ExpectTag(90)) goto parse_loop_nloot_random_boss;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.StageLootRewardData.nLoot_random_BOSS nloot_random_boss = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nloot_random_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nloot_random_boss()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_nloot_random_boss;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_nRewardType_Activity;
        break;
      }

      // optional uint32 nRewardType_Activity = 12;
      case 12: {
        if (tag == 96) {
         parse_nRewardType_Activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardtype_activity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_nitemid_activity;
        break;
      }

      // repeated .proto3.StageLootRewardData.nItemId_Activity nitemid_activity = 13;
      case 13: {
        if (tag == 106) {
         parse_nitemid_activity:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nitemid_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nitemid_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_nitemid_activity;
        if (input->ExpectTag(114)) goto parse_loop_nloot_random_activity;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.StageLootRewardData.nLoot_random_Activity nloot_random_activity = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nloot_random_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nloot_random_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_nloot_random_activity;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(120)) goto parse_nRewardType_Task;
        break;
      }

      // optional uint32 nRewardType_Task = 15;
      case 15: {
        if (tag == 120) {
         parse_nRewardType_Task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrewardtype_task_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_nitemid_task;
        break;
      }

      // repeated .proto3.StageLootRewardData.nItemId_Task nitemid_task = 16;
      case 16: {
        if (tag == 130) {
         parse_nitemid_task:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nitemid_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nitemid_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_nitemid_task;
        if (input->ExpectTag(138)) goto parse_loop_nloot_random_task;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.StageLootRewardData.nLoot_random_Task nloot_random_task = 17;
      case 17: {
        if (tag == 138) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nloot_random_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nloot_random_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_nloot_random_task;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.StageLootRewardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.StageLootRewardData)
  return false;
#undef DO_
}

void StageLootRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.StageLootRewardData)
  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nnameid(), output);
  }

  // optional uint32 nRewardType_Normal = 3;
  if (this->nrewardtype_normal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nrewardtype_normal(), output);
  }

  // repeated .proto3.StageLootRewardData.nItemId_Normal nitemid_normal = 4;
  for (unsigned int i = 0, n = this->nitemid_normal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->nitemid_normal(i), output);
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_Normal nloot_random_normal = 5;
  for (unsigned int i = 0, n = this->nloot_random_normal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->nloot_random_normal(i), output);
  }

  // optional uint32 nRewardType_Elite = 6;
  if (this->nrewardtype_elite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nrewardtype_elite(), output);
  }

  // repeated .proto3.StageLootRewardData.nItemId_Elite nitemid_elite = 7;
  for (unsigned int i = 0, n = this->nitemid_elite_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->nitemid_elite(i), output);
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_Elite nloot_random_elite = 8;
  for (unsigned int i = 0, n = this->nloot_random_elite_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->nloot_random_elite(i), output);
  }

  // optional uint32 nRewardType_BOSS = 9;
  if (this->nrewardtype_boss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->nrewardtype_boss(), output);
  }

  // repeated .proto3.StageLootRewardData.nItemId_BOSS nitemid_boss = 10;
  for (unsigned int i = 0, n = this->nitemid_boss_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->nitemid_boss(i), output);
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_BOSS nloot_random_boss = 11;
  for (unsigned int i = 0, n = this->nloot_random_boss_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->nloot_random_boss(i), output);
  }

  // optional uint32 nRewardType_Activity = 12;
  if (this->nrewardtype_activity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->nrewardtype_activity(), output);
  }

  // repeated .proto3.StageLootRewardData.nItemId_Activity nitemid_activity = 13;
  for (unsigned int i = 0, n = this->nitemid_activity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->nitemid_activity(i), output);
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_Activity nloot_random_activity = 14;
  for (unsigned int i = 0, n = this->nloot_random_activity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->nloot_random_activity(i), output);
  }

  // optional uint32 nRewardType_Task = 15;
  if (this->nrewardtype_task() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->nrewardtype_task(), output);
  }

  // repeated .proto3.StageLootRewardData.nItemId_Task nitemid_task = 16;
  for (unsigned int i = 0, n = this->nitemid_task_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->nitemid_task(i), output);
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_Task nloot_random_task = 17;
  for (unsigned int i = 0, n = this->nloot_random_task_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->nloot_random_task(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.StageLootRewardData)
}

int StageLootRewardData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.StageLootRewardData)
  int total_size = 0;

  // optional uint32 nID = 1;
  if (this->nid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nid());
  }

  // optional uint32 nNameId = 2;
  if (this->nnameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnameid());
  }

  // optional uint32 nRewardType_Normal = 3;
  if (this->nrewardtype_normal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardtype_normal());
  }

  // optional uint32 nRewardType_Elite = 6;
  if (this->nrewardtype_elite() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardtype_elite());
  }

  // optional uint32 nRewardType_BOSS = 9;
  if (this->nrewardtype_boss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardtype_boss());
  }

  // optional uint32 nRewardType_Activity = 12;
  if (this->nrewardtype_activity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardtype_activity());
  }

  // optional uint32 nRewardType_Task = 15;
  if (this->nrewardtype_task() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nrewardtype_task());
  }

  // repeated .proto3.StageLootRewardData.nItemId_Normal nitemid_normal = 4;
  total_size += 1 * this->nitemid_normal_size();
  for (int i = 0; i < this->nitemid_normal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nitemid_normal(i));
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_Normal nloot_random_normal = 5;
  total_size += 1 * this->nloot_random_normal_size();
  for (int i = 0; i < this->nloot_random_normal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nloot_random_normal(i));
  }

  // repeated .proto3.StageLootRewardData.nItemId_Elite nitemid_elite = 7;
  total_size += 1 * this->nitemid_elite_size();
  for (int i = 0; i < this->nitemid_elite_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nitemid_elite(i));
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_Elite nloot_random_elite = 8;
  total_size += 1 * this->nloot_random_elite_size();
  for (int i = 0; i < this->nloot_random_elite_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nloot_random_elite(i));
  }

  // repeated .proto3.StageLootRewardData.nItemId_BOSS nitemid_boss = 10;
  total_size += 1 * this->nitemid_boss_size();
  for (int i = 0; i < this->nitemid_boss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nitemid_boss(i));
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_BOSS nloot_random_boss = 11;
  total_size += 1 * this->nloot_random_boss_size();
  for (int i = 0; i < this->nloot_random_boss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nloot_random_boss(i));
  }

  // repeated .proto3.StageLootRewardData.nItemId_Activity nitemid_activity = 13;
  total_size += 1 * this->nitemid_activity_size();
  for (int i = 0; i < this->nitemid_activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nitemid_activity(i));
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_Activity nloot_random_activity = 14;
  total_size += 1 * this->nloot_random_activity_size();
  for (int i = 0; i < this->nloot_random_activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nloot_random_activity(i));
  }

  // repeated .proto3.StageLootRewardData.nItemId_Task nitemid_task = 16;
  total_size += 2 * this->nitemid_task_size();
  for (int i = 0; i < this->nitemid_task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nitemid_task(i));
  }

  // repeated .proto3.StageLootRewardData.nLoot_random_Task nloot_random_task = 17;
  total_size += 2 * this->nloot_random_task_size();
  for (int i = 0; i < this->nloot_random_task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nloot_random_task(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageLootRewardData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageLootRewardData*>(&from));
}

void StageLootRewardData::MergeFrom(const StageLootRewardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.StageLootRewardData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nitemid_normal_.MergeFrom(from.nitemid_normal_);
  nloot_random_normal_.MergeFrom(from.nloot_random_normal_);
  nitemid_elite_.MergeFrom(from.nitemid_elite_);
  nloot_random_elite_.MergeFrom(from.nloot_random_elite_);
  nitemid_boss_.MergeFrom(from.nitemid_boss_);
  nloot_random_boss_.MergeFrom(from.nloot_random_boss_);
  nitemid_activity_.MergeFrom(from.nitemid_activity_);
  nloot_random_activity_.MergeFrom(from.nloot_random_activity_);
  nitemid_task_.MergeFrom(from.nitemid_task_);
  nloot_random_task_.MergeFrom(from.nloot_random_task_);
  if (from.nid() != 0) {
    set_nid(from.nid());
  }
  if (from.nnameid() != 0) {
    set_nnameid(from.nnameid());
  }
  if (from.nrewardtype_normal() != 0) {
    set_nrewardtype_normal(from.nrewardtype_normal());
  }
  if (from.nrewardtype_elite() != 0) {
    set_nrewardtype_elite(from.nrewardtype_elite());
  }
  if (from.nrewardtype_boss() != 0) {
    set_nrewardtype_boss(from.nrewardtype_boss());
  }
  if (from.nrewardtype_activity() != 0) {
    set_nrewardtype_activity(from.nrewardtype_activity());
  }
  if (from.nrewardtype_task() != 0) {
    set_nrewardtype_task(from.nrewardtype_task());
  }
}

void StageLootRewardData::CopyFrom(const StageLootRewardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.StageLootRewardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageLootRewardData::IsInitialized() const {

  return true;
}

void StageLootRewardData::Swap(StageLootRewardData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StageLootRewardData::InternalSwap(StageLootRewardData* other) {
  std::swap(nid_, other->nid_);
  std::swap(nnameid_, other->nnameid_);
  std::swap(nrewardtype_normal_, other->nrewardtype_normal_);
  nitemid_normal_.UnsafeArenaSwap(&other->nitemid_normal_);
  nloot_random_normal_.UnsafeArenaSwap(&other->nloot_random_normal_);
  std::swap(nrewardtype_elite_, other->nrewardtype_elite_);
  nitemid_elite_.UnsafeArenaSwap(&other->nitemid_elite_);
  nloot_random_elite_.UnsafeArenaSwap(&other->nloot_random_elite_);
  std::swap(nrewardtype_boss_, other->nrewardtype_boss_);
  nitemid_boss_.UnsafeArenaSwap(&other->nitemid_boss_);
  nloot_random_boss_.UnsafeArenaSwap(&other->nloot_random_boss_);
  std::swap(nrewardtype_activity_, other->nrewardtype_activity_);
  nitemid_activity_.UnsafeArenaSwap(&other->nitemid_activity_);
  nloot_random_activity_.UnsafeArenaSwap(&other->nloot_random_activity_);
  std::swap(nrewardtype_task_, other->nrewardtype_task_);
  nitemid_task_.UnsafeArenaSwap(&other->nitemid_task_);
  nloot_random_task_.UnsafeArenaSwap(&other->nloot_random_task_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StageLootRewardData::GetTypeName() const {
  return "proto3.StageLootRewardData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StageLootRewardData_nItemId_Normal

// -------------------------------------------------------------------

// StageLootRewardData_nLoot_random_Normal

// -------------------------------------------------------------------

// StageLootRewardData_nItemId_Elite

// -------------------------------------------------------------------

// StageLootRewardData_nLoot_random_Elite

// -------------------------------------------------------------------

// StageLootRewardData_nItemId_BOSS

// -------------------------------------------------------------------

// StageLootRewardData_nLoot_random_BOSS

// -------------------------------------------------------------------

// StageLootRewardData_nItemId_Activity

// -------------------------------------------------------------------

// StageLootRewardData_nLoot_random_Activity

// -------------------------------------------------------------------

// StageLootRewardData_nItemId_Task

// -------------------------------------------------------------------

// StageLootRewardData_nLoot_random_Task

// -------------------------------------------------------------------

// StageLootRewardData

// optional uint32 nID = 1;
void StageLootRewardData::clear_nid() {
  nid_ = 0u;
}
 ::google::protobuf::uint32 StageLootRewardData::nid() const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nID)
  return nid_;
}
 void StageLootRewardData::set_nid(::google::protobuf::uint32 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageLootRewardData.nID)
}

// optional uint32 nNameId = 2;
void StageLootRewardData::clear_nnameid() {
  nnameid_ = 0u;
}
 ::google::protobuf::uint32 StageLootRewardData::nnameid() const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nNameId)
  return nnameid_;
}
 void StageLootRewardData::set_nnameid(::google::protobuf::uint32 value) {
  
  nnameid_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageLootRewardData.nNameId)
}

// optional uint32 nRewardType_Normal = 3;
void StageLootRewardData::clear_nrewardtype_normal() {
  nrewardtype_normal_ = 0u;
}
 ::google::protobuf::uint32 StageLootRewardData::nrewardtype_normal() const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nRewardType_Normal)
  return nrewardtype_normal_;
}
 void StageLootRewardData::set_nrewardtype_normal(::google::protobuf::uint32 value) {
  
  nrewardtype_normal_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageLootRewardData.nRewardType_Normal)
}

// repeated .proto3.StageLootRewardData.nItemId_Normal nitemid_normal = 4;
int StageLootRewardData::nitemid_normal_size() const {
  return nitemid_normal_.size();
}
void StageLootRewardData::clear_nitemid_normal() {
  nitemid_normal_.Clear();
}
const ::proto3::StageLootRewardData_nItemId_Normal& StageLootRewardData::nitemid_normal(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nitemid_normal)
  return nitemid_normal_.Get(index);
}
::proto3::StageLootRewardData_nItemId_Normal* StageLootRewardData::mutable_nitemid_normal(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nitemid_normal)
  return nitemid_normal_.Mutable(index);
}
::proto3::StageLootRewardData_nItemId_Normal* StageLootRewardData::add_nitemid_normal() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nitemid_normal)
  return nitemid_normal_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_Normal >*
StageLootRewardData::mutable_nitemid_normal() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nitemid_normal)
  return &nitemid_normal_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_Normal >&
StageLootRewardData::nitemid_normal() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nitemid_normal)
  return nitemid_normal_;
}

// repeated .proto3.StageLootRewardData.nLoot_random_Normal nloot_random_normal = 5;
int StageLootRewardData::nloot_random_normal_size() const {
  return nloot_random_normal_.size();
}
void StageLootRewardData::clear_nloot_random_normal() {
  nloot_random_normal_.Clear();
}
const ::proto3::StageLootRewardData_nLoot_random_Normal& StageLootRewardData::nloot_random_normal(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nloot_random_normal)
  return nloot_random_normal_.Get(index);
}
::proto3::StageLootRewardData_nLoot_random_Normal* StageLootRewardData::mutable_nloot_random_normal(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nloot_random_normal)
  return nloot_random_normal_.Mutable(index);
}
::proto3::StageLootRewardData_nLoot_random_Normal* StageLootRewardData::add_nloot_random_normal() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nloot_random_normal)
  return nloot_random_normal_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_Normal >*
StageLootRewardData::mutable_nloot_random_normal() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nloot_random_normal)
  return &nloot_random_normal_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_Normal >&
StageLootRewardData::nloot_random_normal() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nloot_random_normal)
  return nloot_random_normal_;
}

// optional uint32 nRewardType_Elite = 6;
void StageLootRewardData::clear_nrewardtype_elite() {
  nrewardtype_elite_ = 0u;
}
 ::google::protobuf::uint32 StageLootRewardData::nrewardtype_elite() const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nRewardType_Elite)
  return nrewardtype_elite_;
}
 void StageLootRewardData::set_nrewardtype_elite(::google::protobuf::uint32 value) {
  
  nrewardtype_elite_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageLootRewardData.nRewardType_Elite)
}

// repeated .proto3.StageLootRewardData.nItemId_Elite nitemid_elite = 7;
int StageLootRewardData::nitemid_elite_size() const {
  return nitemid_elite_.size();
}
void StageLootRewardData::clear_nitemid_elite() {
  nitemid_elite_.Clear();
}
const ::proto3::StageLootRewardData_nItemId_Elite& StageLootRewardData::nitemid_elite(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nitemid_elite)
  return nitemid_elite_.Get(index);
}
::proto3::StageLootRewardData_nItemId_Elite* StageLootRewardData::mutable_nitemid_elite(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nitemid_elite)
  return nitemid_elite_.Mutable(index);
}
::proto3::StageLootRewardData_nItemId_Elite* StageLootRewardData::add_nitemid_elite() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nitemid_elite)
  return nitemid_elite_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_Elite >*
StageLootRewardData::mutable_nitemid_elite() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nitemid_elite)
  return &nitemid_elite_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_Elite >&
StageLootRewardData::nitemid_elite() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nitemid_elite)
  return nitemid_elite_;
}

// repeated .proto3.StageLootRewardData.nLoot_random_Elite nloot_random_elite = 8;
int StageLootRewardData::nloot_random_elite_size() const {
  return nloot_random_elite_.size();
}
void StageLootRewardData::clear_nloot_random_elite() {
  nloot_random_elite_.Clear();
}
const ::proto3::StageLootRewardData_nLoot_random_Elite& StageLootRewardData::nloot_random_elite(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nloot_random_elite)
  return nloot_random_elite_.Get(index);
}
::proto3::StageLootRewardData_nLoot_random_Elite* StageLootRewardData::mutable_nloot_random_elite(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nloot_random_elite)
  return nloot_random_elite_.Mutable(index);
}
::proto3::StageLootRewardData_nLoot_random_Elite* StageLootRewardData::add_nloot_random_elite() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nloot_random_elite)
  return nloot_random_elite_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_Elite >*
StageLootRewardData::mutable_nloot_random_elite() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nloot_random_elite)
  return &nloot_random_elite_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_Elite >&
StageLootRewardData::nloot_random_elite() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nloot_random_elite)
  return nloot_random_elite_;
}

// optional uint32 nRewardType_BOSS = 9;
void StageLootRewardData::clear_nrewardtype_boss() {
  nrewardtype_boss_ = 0u;
}
 ::google::protobuf::uint32 StageLootRewardData::nrewardtype_boss() const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nRewardType_BOSS)
  return nrewardtype_boss_;
}
 void StageLootRewardData::set_nrewardtype_boss(::google::protobuf::uint32 value) {
  
  nrewardtype_boss_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageLootRewardData.nRewardType_BOSS)
}

// repeated .proto3.StageLootRewardData.nItemId_BOSS nitemid_boss = 10;
int StageLootRewardData::nitemid_boss_size() const {
  return nitemid_boss_.size();
}
void StageLootRewardData::clear_nitemid_boss() {
  nitemid_boss_.Clear();
}
const ::proto3::StageLootRewardData_nItemId_BOSS& StageLootRewardData::nitemid_boss(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nitemid_boss)
  return nitemid_boss_.Get(index);
}
::proto3::StageLootRewardData_nItemId_BOSS* StageLootRewardData::mutable_nitemid_boss(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nitemid_boss)
  return nitemid_boss_.Mutable(index);
}
::proto3::StageLootRewardData_nItemId_BOSS* StageLootRewardData::add_nitemid_boss() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nitemid_boss)
  return nitemid_boss_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_BOSS >*
StageLootRewardData::mutable_nitemid_boss() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nitemid_boss)
  return &nitemid_boss_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_BOSS >&
StageLootRewardData::nitemid_boss() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nitemid_boss)
  return nitemid_boss_;
}

// repeated .proto3.StageLootRewardData.nLoot_random_BOSS nloot_random_boss = 11;
int StageLootRewardData::nloot_random_boss_size() const {
  return nloot_random_boss_.size();
}
void StageLootRewardData::clear_nloot_random_boss() {
  nloot_random_boss_.Clear();
}
const ::proto3::StageLootRewardData_nLoot_random_BOSS& StageLootRewardData::nloot_random_boss(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nloot_random_boss)
  return nloot_random_boss_.Get(index);
}
::proto3::StageLootRewardData_nLoot_random_BOSS* StageLootRewardData::mutable_nloot_random_boss(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nloot_random_boss)
  return nloot_random_boss_.Mutable(index);
}
::proto3::StageLootRewardData_nLoot_random_BOSS* StageLootRewardData::add_nloot_random_boss() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nloot_random_boss)
  return nloot_random_boss_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_BOSS >*
StageLootRewardData::mutable_nloot_random_boss() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nloot_random_boss)
  return &nloot_random_boss_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_BOSS >&
StageLootRewardData::nloot_random_boss() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nloot_random_boss)
  return nloot_random_boss_;
}

// optional uint32 nRewardType_Activity = 12;
void StageLootRewardData::clear_nrewardtype_activity() {
  nrewardtype_activity_ = 0u;
}
 ::google::protobuf::uint32 StageLootRewardData::nrewardtype_activity() const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nRewardType_Activity)
  return nrewardtype_activity_;
}
 void StageLootRewardData::set_nrewardtype_activity(::google::protobuf::uint32 value) {
  
  nrewardtype_activity_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageLootRewardData.nRewardType_Activity)
}

// repeated .proto3.StageLootRewardData.nItemId_Activity nitemid_activity = 13;
int StageLootRewardData::nitemid_activity_size() const {
  return nitemid_activity_.size();
}
void StageLootRewardData::clear_nitemid_activity() {
  nitemid_activity_.Clear();
}
const ::proto3::StageLootRewardData_nItemId_Activity& StageLootRewardData::nitemid_activity(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nitemid_activity)
  return nitemid_activity_.Get(index);
}
::proto3::StageLootRewardData_nItemId_Activity* StageLootRewardData::mutable_nitemid_activity(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nitemid_activity)
  return nitemid_activity_.Mutable(index);
}
::proto3::StageLootRewardData_nItemId_Activity* StageLootRewardData::add_nitemid_activity() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nitemid_activity)
  return nitemid_activity_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_Activity >*
StageLootRewardData::mutable_nitemid_activity() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nitemid_activity)
  return &nitemid_activity_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_Activity >&
StageLootRewardData::nitemid_activity() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nitemid_activity)
  return nitemid_activity_;
}

// repeated .proto3.StageLootRewardData.nLoot_random_Activity nloot_random_activity = 14;
int StageLootRewardData::nloot_random_activity_size() const {
  return nloot_random_activity_.size();
}
void StageLootRewardData::clear_nloot_random_activity() {
  nloot_random_activity_.Clear();
}
const ::proto3::StageLootRewardData_nLoot_random_Activity& StageLootRewardData::nloot_random_activity(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nloot_random_activity)
  return nloot_random_activity_.Get(index);
}
::proto3::StageLootRewardData_nLoot_random_Activity* StageLootRewardData::mutable_nloot_random_activity(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nloot_random_activity)
  return nloot_random_activity_.Mutable(index);
}
::proto3::StageLootRewardData_nLoot_random_Activity* StageLootRewardData::add_nloot_random_activity() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nloot_random_activity)
  return nloot_random_activity_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_Activity >*
StageLootRewardData::mutable_nloot_random_activity() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nloot_random_activity)
  return &nloot_random_activity_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_Activity >&
StageLootRewardData::nloot_random_activity() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nloot_random_activity)
  return nloot_random_activity_;
}

// optional uint32 nRewardType_Task = 15;
void StageLootRewardData::clear_nrewardtype_task() {
  nrewardtype_task_ = 0u;
}
 ::google::protobuf::uint32 StageLootRewardData::nrewardtype_task() const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nRewardType_Task)
  return nrewardtype_task_;
}
 void StageLootRewardData::set_nrewardtype_task(::google::protobuf::uint32 value) {
  
  nrewardtype_task_ = value;
  // @@protoc_insertion_point(field_set:proto3.StageLootRewardData.nRewardType_Task)
}

// repeated .proto3.StageLootRewardData.nItemId_Task nitemid_task = 16;
int StageLootRewardData::nitemid_task_size() const {
  return nitemid_task_.size();
}
void StageLootRewardData::clear_nitemid_task() {
  nitemid_task_.Clear();
}
const ::proto3::StageLootRewardData_nItemId_Task& StageLootRewardData::nitemid_task(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nitemid_task)
  return nitemid_task_.Get(index);
}
::proto3::StageLootRewardData_nItemId_Task* StageLootRewardData::mutable_nitemid_task(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nitemid_task)
  return nitemid_task_.Mutable(index);
}
::proto3::StageLootRewardData_nItemId_Task* StageLootRewardData::add_nitemid_task() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nitemid_task)
  return nitemid_task_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_Task >*
StageLootRewardData::mutable_nitemid_task() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nitemid_task)
  return &nitemid_task_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nItemId_Task >&
StageLootRewardData::nitemid_task() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nitemid_task)
  return nitemid_task_;
}

// repeated .proto3.StageLootRewardData.nLoot_random_Task nloot_random_task = 17;
int StageLootRewardData::nloot_random_task_size() const {
  return nloot_random_task_.size();
}
void StageLootRewardData::clear_nloot_random_task() {
  nloot_random_task_.Clear();
}
const ::proto3::StageLootRewardData_nLoot_random_Task& StageLootRewardData::nloot_random_task(int index) const {
  // @@protoc_insertion_point(field_get:proto3.StageLootRewardData.nloot_random_task)
  return nloot_random_task_.Get(index);
}
::proto3::StageLootRewardData_nLoot_random_Task* StageLootRewardData::mutable_nloot_random_task(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.StageLootRewardData.nloot_random_task)
  return nloot_random_task_.Mutable(index);
}
::proto3::StageLootRewardData_nLoot_random_Task* StageLootRewardData::add_nloot_random_task() {
  // @@protoc_insertion_point(field_add:proto3.StageLootRewardData.nloot_random_task)
  return nloot_random_task_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_Task >*
StageLootRewardData::mutable_nloot_random_task() {
  // @@protoc_insertion_point(field_mutable_list:proto3.StageLootRewardData.nloot_random_task)
  return &nloot_random_task_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::StageLootRewardData_nLoot_random_Task >&
StageLootRewardData::nloot_random_task() const {
  // @@protoc_insertion_point(field_list:proto3.StageLootRewardData.nloot_random_task)
  return nloot_random_task_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInfoData::kNextTaskIdFieldNumber;
const int TaskInfoData::kLevelLimitFieldNumber;
const int TaskInfoData::kRecommendLevelFieldNumber;
const int TaskInfoData::kTaskNameFieldNumber;
const int TaskInfoData::kTaskTypeFieldNumber;
const int TaskInfoData::kTriggerTypeFieldNumber;
const int TaskInfoData::kLimitTimeFieldNumber;
const int TaskInfoData::kAcceptNPCIDFieldNumber;
const int TaskInfoData::kConsignNPCIDFieldNumber;
const int TaskInfoData::kTargetIDFieldNumber;
const int TaskInfoData::kSceneIDFieldNumber;
const int TaskInfoData::kTargetNumFieldNumber;
const int TaskInfoData::kRewardGoldFieldNumber;
const int TaskInfoData::kRewardEXPFieldNumber;
const int TaskInfoData::kRewardItemIDFieldNumber;
const int TaskInfoData::kTalkContentIDFieldNumber;
const int TaskInfoData::kConsignDialogIDFieldNumber;
const int TaskInfoData::kFailedDialogIDFieldNumber;
const int TaskInfoData::kDoingDialogIDFieldNumber;
const int TaskInfoData::kDescriptionIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInfoData::TaskInfoData()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.TaskInfoData)
}

void TaskInfoData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaskInfoData::TaskInfoData(const TaskInfoData& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.TaskInfoData)
}

void TaskInfoData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nexttaskid_ = 0u;
  levellimit_ = 0u;
  recommendlevel_ = 0u;
  taskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tasktype_ = 0u;
  triggertype_ = 0u;
  limittime_ = 0u;
  acceptnpcid_ = 0u;
  consignnpcid_ = 0u;
  targetid_ = 0u;
  sceneid_ = 0u;
  targetnum_ = 0u;
  rewardgold_ = 0u;
  rewardexp_ = 0u;
  consigndialogid_ = 0u;
  faileddialogid_ = 0u;
  doingdialogid_ = 0u;
  descriptionid_ = 0u;
}

TaskInfoData::~TaskInfoData() {
  // @@protoc_insertion_point(destructor:proto3.TaskInfoData)
  SharedDtor();
}

void TaskInfoData::SharedDtor() {
  taskname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskInfoData& TaskInfoData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

TaskInfoData* TaskInfoData::default_instance_ = NULL;

TaskInfoData* TaskInfoData::New(::google::protobuf::Arena* arena) const {
  TaskInfoData* n = new TaskInfoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.TaskInfoData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskInfoData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskInfoData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nexttaskid_, levellimit_);
  ZR_(recommendlevel_, acceptnpcid_);
  taskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(consignnpcid_, rewardgold_);
  rewardexp_ = 0u;
  ZR_(faileddialogid_, descriptionid_);
  consigndialogid_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  rewarditemid_.Clear();
  talkcontentid_.Clear();
}

bool TaskInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.TaskInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NextTaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexttaskid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LevelLimit;
        break;
      }

      // optional uint32 LevelLimit = 2;
      case 2: {
        if (tag == 16) {
         parse_LevelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levellimit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RecommendLevel;
        break;
      }

      // optional uint32 RecommendLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_RecommendLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recommendlevel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TaskName;
        break;
      }

      // optional string TaskName = 4;
      case 4: {
        if (tag == 34) {
         parse_TaskName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->taskname().data(), this->taskname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.TaskInfoData.TaskName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TaskType;
        break;
      }

      // optional uint32 TaskType = 5;
      case 5: {
        if (tag == 40) {
         parse_TaskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TriggerType;
        break;
      }

      // optional uint32 TriggerType = 6;
      case 6: {
        if (tag == 48) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LimitTime;
        break;
      }

      // optional uint32 LimitTime = 7;
      case 7: {
        if (tag == 56) {
         parse_LimitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limittime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AcceptNPCID;
        break;
      }

      // optional uint32 AcceptNPCID = 8;
      case 8: {
        if (tag == 64) {
         parse_AcceptNPCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acceptnpcid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ConsignNPCID;
        break;
      }

      // optional uint32 ConsignNPCID = 9;
      case 9: {
        if (tag == 72) {
         parse_ConsignNPCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consignnpcid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TargetID;
        break;
      }

      // optional uint32 TargetID = 10;
      case 10: {
        if (tag == 80) {
         parse_TargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_SceneID;
        break;
      }

      // optional uint32 SceneID = 11;
      case 11: {
        if (tag == 88) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_TargetNum;
        break;
      }

      // optional uint32 TargetNum = 12;
      case 12: {
        if (tag == 96) {
         parse_TargetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_RewardGold;
        break;
      }

      // optional uint32 RewardGold = 13;
      case 13: {
        if (tag == 104) {
         parse_RewardGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardgold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_RewardEXP;
        break;
      }

      // optional uint32 RewardEXP = 14;
      case 14: {
        if (tag == 112) {
         parse_RewardEXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardexp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_RewardItemID;
        break;
      }

      // repeated uint32 RewardItemID = 15;
      case 15: {
        if (tag == 122) {
         parse_RewardItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewarditemid())));
        } else if (tag == 120) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 122, input, this->mutable_rewarditemid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_TalkContentID;
        break;
      }

      // repeated uint32 TalkContentID = 16;
      case 16: {
        if (tag == 130) {
         parse_TalkContentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_talkcontentid())));
        } else if (tag == 128) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 130, input, this->mutable_talkcontentid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ConsignDialogID;
        break;
      }

      // optional uint32 ConsignDialogID = 17;
      case 17: {
        if (tag == 136) {
         parse_ConsignDialogID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consigndialogid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_FailedDialogID;
        break;
      }

      // optional uint32 FailedDialogID = 18;
      case 18: {
        if (tag == 144) {
         parse_FailedDialogID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faileddialogid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_DoingDialogID;
        break;
      }

      // optional uint32 DoingDialogID = 19;
      case 19: {
        if (tag == 152) {
         parse_DoingDialogID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doingdialogid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_DescriptionID;
        break;
      }

      // optional uint32 DescriptionID = 20;
      case 20: {
        if (tag == 160) {
         parse_DescriptionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &descriptionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.TaskInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.TaskInfoData)
  return false;
#undef DO_
}

void TaskInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.TaskInfoData)
  // optional uint32 NextTaskId = 1;
  if (this->nexttaskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nexttaskid(), output);
  }

  // optional uint32 LevelLimit = 2;
  if (this->levellimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levellimit(), output);
  }

  // optional uint32 RecommendLevel = 3;
  if (this->recommendlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recommendlevel(), output);
  }

  // optional string TaskName = 4;
  if (this->taskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.TaskInfoData.TaskName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->taskname(), output);
  }

  // optional uint32 TaskType = 5;
  if (this->tasktype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tasktype(), output);
  }

  // optional uint32 TriggerType = 6;
  if (this->triggertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->triggertype(), output);
  }

  // optional uint32 LimitTime = 7;
  if (this->limittime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->limittime(), output);
  }

  // optional uint32 AcceptNPCID = 8;
  if (this->acceptnpcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->acceptnpcid(), output);
  }

  // optional uint32 ConsignNPCID = 9;
  if (this->consignnpcid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->consignnpcid(), output);
  }

  // optional uint32 TargetID = 10;
  if (this->targetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->targetid(), output);
  }

  // optional uint32 SceneID = 11;
  if (this->sceneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sceneid(), output);
  }

  // optional uint32 TargetNum = 12;
  if (this->targetnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->targetnum(), output);
  }

  // optional uint32 RewardGold = 13;
  if (this->rewardgold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->rewardgold(), output);
  }

  // optional uint32 RewardEXP = 14;
  if (this->rewardexp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->rewardexp(), output);
  }

  // repeated uint32 RewardItemID = 15;
  if (this->rewarditemid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rewarditemid_cached_byte_size_);
  }
  for (int i = 0; i < this->rewarditemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->rewarditemid(i), output);
  }

  // repeated uint32 TalkContentID = 16;
  if (this->talkcontentid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_talkcontentid_cached_byte_size_);
  }
  for (int i = 0; i < this->talkcontentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->talkcontentid(i), output);
  }

  // optional uint32 ConsignDialogID = 17;
  if (this->consigndialogid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->consigndialogid(), output);
  }

  // optional uint32 FailedDialogID = 18;
  if (this->faileddialogid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->faileddialogid(), output);
  }

  // optional uint32 DoingDialogID = 19;
  if (this->doingdialogid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->doingdialogid(), output);
  }

  // optional uint32 DescriptionID = 20;
  if (this->descriptionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->descriptionid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.TaskInfoData)
}

int TaskInfoData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.TaskInfoData)
  int total_size = 0;

  // optional uint32 NextTaskId = 1;
  if (this->nexttaskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nexttaskid());
  }

  // optional uint32 LevelLimit = 2;
  if (this->levellimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->levellimit());
  }

  // optional uint32 RecommendLevel = 3;
  if (this->recommendlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recommendlevel());
  }

  // optional string TaskName = 4;
  if (this->taskname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskname());
  }

  // optional uint32 TaskType = 5;
  if (this->tasktype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tasktype());
  }

  // optional uint32 TriggerType = 6;
  if (this->triggertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->triggertype());
  }

  // optional uint32 LimitTime = 7;
  if (this->limittime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limittime());
  }

  // optional uint32 AcceptNPCID = 8;
  if (this->acceptnpcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->acceptnpcid());
  }

  // optional uint32 ConsignNPCID = 9;
  if (this->consignnpcid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->consignnpcid());
  }

  // optional uint32 TargetID = 10;
  if (this->targetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetid());
  }

  // optional uint32 SceneID = 11;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sceneid());
  }

  // optional uint32 TargetNum = 12;
  if (this->targetnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetnum());
  }

  // optional uint32 RewardGold = 13;
  if (this->rewardgold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rewardgold());
  }

  // optional uint32 RewardEXP = 14;
  if (this->rewardexp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rewardexp());
  }

  // optional uint32 ConsignDialogID = 17;
  if (this->consigndialogid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->consigndialogid());
  }

  // optional uint32 FailedDialogID = 18;
  if (this->faileddialogid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->faileddialogid());
  }

  // optional uint32 DoingDialogID = 19;
  if (this->doingdialogid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->doingdialogid());
  }

  // optional uint32 DescriptionID = 20;
  if (this->descriptionid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->descriptionid());
  }

  // repeated uint32 RewardItemID = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewarditemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewarditemid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rewarditemid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 TalkContentID = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->talkcontentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->talkcontentid(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _talkcontentid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfoData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskInfoData*>(&from));
}

void TaskInfoData::MergeFrom(const TaskInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.TaskInfoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  rewarditemid_.MergeFrom(from.rewarditemid_);
  talkcontentid_.MergeFrom(from.talkcontentid_);
  if (from.nexttaskid() != 0) {
    set_nexttaskid(from.nexttaskid());
  }
  if (from.levellimit() != 0) {
    set_levellimit(from.levellimit());
  }
  if (from.recommendlevel() != 0) {
    set_recommendlevel(from.recommendlevel());
  }
  if (from.taskname().size() > 0) {

    taskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  if (from.tasktype() != 0) {
    set_tasktype(from.tasktype());
  }
  if (from.triggertype() != 0) {
    set_triggertype(from.triggertype());
  }
  if (from.limittime() != 0) {
    set_limittime(from.limittime());
  }
  if (from.acceptnpcid() != 0) {
    set_acceptnpcid(from.acceptnpcid());
  }
  if (from.consignnpcid() != 0) {
    set_consignnpcid(from.consignnpcid());
  }
  if (from.targetid() != 0) {
    set_targetid(from.targetid());
  }
  if (from.sceneid() != 0) {
    set_sceneid(from.sceneid());
  }
  if (from.targetnum() != 0) {
    set_targetnum(from.targetnum());
  }
  if (from.rewardgold() != 0) {
    set_rewardgold(from.rewardgold());
  }
  if (from.rewardexp() != 0) {
    set_rewardexp(from.rewardexp());
  }
  if (from.consigndialogid() != 0) {
    set_consigndialogid(from.consigndialogid());
  }
  if (from.faileddialogid() != 0) {
    set_faileddialogid(from.faileddialogid());
  }
  if (from.doingdialogid() != 0) {
    set_doingdialogid(from.doingdialogid());
  }
  if (from.descriptionid() != 0) {
    set_descriptionid(from.descriptionid());
  }
}

void TaskInfoData::CopyFrom(const TaskInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.TaskInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfoData::IsInitialized() const {

  return true;
}

void TaskInfoData::Swap(TaskInfoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInfoData::InternalSwap(TaskInfoData* other) {
  std::swap(nexttaskid_, other->nexttaskid_);
  std::swap(levellimit_, other->levellimit_);
  std::swap(recommendlevel_, other->recommendlevel_);
  taskname_.Swap(&other->taskname_);
  std::swap(tasktype_, other->tasktype_);
  std::swap(triggertype_, other->triggertype_);
  std::swap(limittime_, other->limittime_);
  std::swap(acceptnpcid_, other->acceptnpcid_);
  std::swap(consignnpcid_, other->consignnpcid_);
  std::swap(targetid_, other->targetid_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(targetnum_, other->targetnum_);
  std::swap(rewardgold_, other->rewardgold_);
  std::swap(rewardexp_, other->rewardexp_);
  rewarditemid_.UnsafeArenaSwap(&other->rewarditemid_);
  talkcontentid_.UnsafeArenaSwap(&other->talkcontentid_);
  std::swap(consigndialogid_, other->consigndialogid_);
  std::swap(faileddialogid_, other->faileddialogid_);
  std::swap(doingdialogid_, other->doingdialogid_);
  std::swap(descriptionid_, other->descriptionid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TaskInfoData::GetTypeName() const {
  return "proto3.TaskInfoData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInfoData

// optional uint32 NextTaskId = 1;
void TaskInfoData::clear_nexttaskid() {
  nexttaskid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::nexttaskid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.NextTaskId)
  return nexttaskid_;
}
 void TaskInfoData::set_nexttaskid(::google::protobuf::uint32 value) {
  
  nexttaskid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.NextTaskId)
}

// optional uint32 LevelLimit = 2;
void TaskInfoData::clear_levellimit() {
  levellimit_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::levellimit() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.LevelLimit)
  return levellimit_;
}
 void TaskInfoData::set_levellimit(::google::protobuf::uint32 value) {
  
  levellimit_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.LevelLimit)
}

// optional uint32 RecommendLevel = 3;
void TaskInfoData::clear_recommendlevel() {
  recommendlevel_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::recommendlevel() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.RecommendLevel)
  return recommendlevel_;
}
 void TaskInfoData::set_recommendlevel(::google::protobuf::uint32 value) {
  
  recommendlevel_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.RecommendLevel)
}

// optional string TaskName = 4;
void TaskInfoData::clear_taskname() {
  taskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TaskInfoData::taskname() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.TaskName)
  return taskname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskInfoData::set_taskname(const ::std::string& value) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.TaskName)
}
 void TaskInfoData::set_taskname(const char* value) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.TaskInfoData.TaskName)
}
 void TaskInfoData::set_taskname(const char* value, size_t size) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.TaskInfoData.TaskName)
}
 ::std::string* TaskInfoData::mutable_taskname() {
  
  // @@protoc_insertion_point(field_mutable:proto3.TaskInfoData.TaskName)
  return taskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskInfoData::release_taskname() {
  // @@protoc_insertion_point(field_release:proto3.TaskInfoData.TaskName)
  
  return taskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskInfoData::set_allocated_taskname(::std::string* taskname) {
  if (taskname != NULL) {
    
  } else {
    
  }
  taskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskname);
  // @@protoc_insertion_point(field_set_allocated:proto3.TaskInfoData.TaskName)
}

// optional uint32 TaskType = 5;
void TaskInfoData::clear_tasktype() {
  tasktype_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::tasktype() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.TaskType)
  return tasktype_;
}
 void TaskInfoData::set_tasktype(::google::protobuf::uint32 value) {
  
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.TaskType)
}

// optional uint32 TriggerType = 6;
void TaskInfoData::clear_triggertype() {
  triggertype_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::triggertype() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.TriggerType)
  return triggertype_;
}
 void TaskInfoData::set_triggertype(::google::protobuf::uint32 value) {
  
  triggertype_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.TriggerType)
}

// optional uint32 LimitTime = 7;
void TaskInfoData::clear_limittime() {
  limittime_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::limittime() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.LimitTime)
  return limittime_;
}
 void TaskInfoData::set_limittime(::google::protobuf::uint32 value) {
  
  limittime_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.LimitTime)
}

// optional uint32 AcceptNPCID = 8;
void TaskInfoData::clear_acceptnpcid() {
  acceptnpcid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::acceptnpcid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.AcceptNPCID)
  return acceptnpcid_;
}
 void TaskInfoData::set_acceptnpcid(::google::protobuf::uint32 value) {
  
  acceptnpcid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.AcceptNPCID)
}

// optional uint32 ConsignNPCID = 9;
void TaskInfoData::clear_consignnpcid() {
  consignnpcid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::consignnpcid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.ConsignNPCID)
  return consignnpcid_;
}
 void TaskInfoData::set_consignnpcid(::google::protobuf::uint32 value) {
  
  consignnpcid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.ConsignNPCID)
}

// optional uint32 TargetID = 10;
void TaskInfoData::clear_targetid() {
  targetid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::targetid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.TargetID)
  return targetid_;
}
 void TaskInfoData::set_targetid(::google::protobuf::uint32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.TargetID)
}

// optional uint32 SceneID = 11;
void TaskInfoData::clear_sceneid() {
  sceneid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::sceneid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.SceneID)
  return sceneid_;
}
 void TaskInfoData::set_sceneid(::google::protobuf::uint32 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.SceneID)
}

// optional uint32 TargetNum = 12;
void TaskInfoData::clear_targetnum() {
  targetnum_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::targetnum() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.TargetNum)
  return targetnum_;
}
 void TaskInfoData::set_targetnum(::google::protobuf::uint32 value) {
  
  targetnum_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.TargetNum)
}

// optional uint32 RewardGold = 13;
void TaskInfoData::clear_rewardgold() {
  rewardgold_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::rewardgold() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.RewardGold)
  return rewardgold_;
}
 void TaskInfoData::set_rewardgold(::google::protobuf::uint32 value) {
  
  rewardgold_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.RewardGold)
}

// optional uint32 RewardEXP = 14;
void TaskInfoData::clear_rewardexp() {
  rewardexp_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::rewardexp() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.RewardEXP)
  return rewardexp_;
}
 void TaskInfoData::set_rewardexp(::google::protobuf::uint32 value) {
  
  rewardexp_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.RewardEXP)
}

// repeated uint32 RewardItemID = 15;
int TaskInfoData::rewarditemid_size() const {
  return rewarditemid_.size();
}
void TaskInfoData::clear_rewarditemid() {
  rewarditemid_.Clear();
}
 ::google::protobuf::uint32 TaskInfoData::rewarditemid(int index) const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.RewardItemID)
  return rewarditemid_.Get(index);
}
 void TaskInfoData::set_rewarditemid(int index, ::google::protobuf::uint32 value) {
  rewarditemid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.RewardItemID)
}
 void TaskInfoData::add_rewarditemid(::google::protobuf::uint32 value) {
  rewarditemid_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.TaskInfoData.RewardItemID)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TaskInfoData::rewarditemid() const {
  // @@protoc_insertion_point(field_list:proto3.TaskInfoData.RewardItemID)
  return rewarditemid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TaskInfoData::mutable_rewarditemid() {
  // @@protoc_insertion_point(field_mutable_list:proto3.TaskInfoData.RewardItemID)
  return &rewarditemid_;
}

// repeated uint32 TalkContentID = 16;
int TaskInfoData::talkcontentid_size() const {
  return talkcontentid_.size();
}
void TaskInfoData::clear_talkcontentid() {
  talkcontentid_.Clear();
}
 ::google::protobuf::uint32 TaskInfoData::talkcontentid(int index) const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.TalkContentID)
  return talkcontentid_.Get(index);
}
 void TaskInfoData::set_talkcontentid(int index, ::google::protobuf::uint32 value) {
  talkcontentid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.TalkContentID)
}
 void TaskInfoData::add_talkcontentid(::google::protobuf::uint32 value) {
  talkcontentid_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.TaskInfoData.TalkContentID)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TaskInfoData::talkcontentid() const {
  // @@protoc_insertion_point(field_list:proto3.TaskInfoData.TalkContentID)
  return talkcontentid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TaskInfoData::mutable_talkcontentid() {
  // @@protoc_insertion_point(field_mutable_list:proto3.TaskInfoData.TalkContentID)
  return &talkcontentid_;
}

// optional uint32 ConsignDialogID = 17;
void TaskInfoData::clear_consigndialogid() {
  consigndialogid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::consigndialogid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.ConsignDialogID)
  return consigndialogid_;
}
 void TaskInfoData::set_consigndialogid(::google::protobuf::uint32 value) {
  
  consigndialogid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.ConsignDialogID)
}

// optional uint32 FailedDialogID = 18;
void TaskInfoData::clear_faileddialogid() {
  faileddialogid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::faileddialogid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.FailedDialogID)
  return faileddialogid_;
}
 void TaskInfoData::set_faileddialogid(::google::protobuf::uint32 value) {
  
  faileddialogid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.FailedDialogID)
}

// optional uint32 DoingDialogID = 19;
void TaskInfoData::clear_doingdialogid() {
  doingdialogid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::doingdialogid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.DoingDialogID)
  return doingdialogid_;
}
 void TaskInfoData::set_doingdialogid(::google::protobuf::uint32 value) {
  
  doingdialogid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.DoingDialogID)
}

// optional uint32 DescriptionID = 20;
void TaskInfoData::clear_descriptionid() {
  descriptionid_ = 0u;
}
 ::google::protobuf::uint32 TaskInfoData::descriptionid() const {
  // @@protoc_insertion_point(field_get:proto3.TaskInfoData.DescriptionID)
  return descriptionid_;
}
 void TaskInfoData::set_descriptionid(::google::protobuf::uint32 value) {
  
  descriptionid_ = value;
  // @@protoc_insertion_point(field_set:proto3.TaskInfoData.DescriptionID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBase::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBase::MsgBase()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgBase)
}

void MsgBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgBase::MsgBase(const MsgBase& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgBase)
}

void MsgBase::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:proto3.MsgBase)
  SharedDtor();
}

void MsgBase::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgBase& MsgBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgBase* MsgBase::default_instance_ = NULL;

MsgBase* MsgBase::New(::google::protobuf::Arena* arena) const {
  MsgBase* n = new MsgBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgBase)
  mid_ = 0u;
}

bool MsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgBase)
  return false;
#undef DO_
}

void MsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgBase)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgBase)
}

int MsgBase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgBase)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgBase*>(&from));
}

void MsgBase::MergeFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {

  return true;
}

void MsgBase::Swap(MsgBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBase::InternalSwap(MsgBase* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgBase::GetTypeName() const {
  return "proto3.MsgBase";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgBase

// optional uint32 mid = 1;
void MsgBase::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgBase::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgBase.mid)
  return mid_;
}
 void MsgBase::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgBase.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCGLogin::kMidFieldNumber;
const int MsgCGLogin::kIdFieldNumber;
const int MsgCGLogin::kTypeFieldNumber;
const int MsgCGLogin::kUdidFieldNumber;
const int MsgCGLogin::kAccountFieldNumber;
const int MsgCGLogin::kPswdFieldNumber;
const int MsgCGLogin::kNameFieldNumber;
const int MsgCGLogin::kZidFieldNumber;
const int MsgCGLogin::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCGLogin::MsgCGLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCGLogin)
}

void MsgCGLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCGLogin::MsgCGLogin(const MsgCGLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCGLogin)
}

void MsgCGLogin::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  udid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zid_ = 0u;
  clientversion_ = 0u;
}

MsgCGLogin::~MsgCGLogin() {
  // @@protoc_insertion_point(destructor:proto3.MsgCGLogin)
  SharedDtor();
}

void MsgCGLogin::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCGLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCGLogin& MsgCGLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCGLogin* MsgCGLogin::default_instance_ = NULL;

MsgCGLogin* MsgCGLogin::New(::google::protobuf::Arena* arena) const {
  MsgCGLogin* n = new MsgCGLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCGLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCGLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCGLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCGLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, type_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zid_ = 0u;
  clientversion_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCGLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCGLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCGLogin.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .proto3.AccountType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto3::AccountType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_udid;
        break;
      }

      // optional string udid = 4;
      case 4: {
        if (tag == 34) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->udid().data(), this->udid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCGLogin.udid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (tag == 42) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCGLogin.account"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pswd;
        break;
      }

      // optional string pswd = 6;
      case 6: {
        if (tag == 50) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCGLogin.pswd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCGLogin.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 8;
      case 8: {
        if (tag == 64) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_clientVersion;
        break;
      }

      // optional uint32 clientVersion = 9;
      case 9: {
        if (tag == 72) {
         parse_clientVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientversion_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCGLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCGLogin)
  return false;
#undef DO_
}

void MsgCGLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCGLogin)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCGLogin.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional .proto3.AccountType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string udid = 4;
  if (this->udid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCGLogin.udid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->udid(), output);
  }

  // optional string account = 5;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCGLogin.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // optional string pswd = 6;
  if (this->pswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCGLogin.pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pswd(), output);
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCGLogin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional uint32 zid = 8;
  if (this->zid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->zid(), output);
  }

  // optional uint32 clientVersion = 9;
  if (this->clientversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->clientversion(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCGLogin)
}

int MsgCGLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCGLogin)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .proto3.AccountType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string udid = 4;
  if (this->udid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udid());
  }

  // optional string account = 5;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // optional string pswd = 6;
  if (this->pswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pswd());
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 zid = 8;
  if (this->zid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zid());
  }

  // optional uint32 clientVersion = 9;
  if (this->clientversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientversion());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCGLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCGLogin*>(&from));
}

void MsgCGLogin::MergeFrom(const MsgCGLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCGLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.udid().size() > 0) {

    udid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udid_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.pswd().size() > 0) {

    pswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pswd_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.zid() != 0) {
    set_zid(from.zid());
  }
  if (from.clientversion() != 0) {
    set_clientversion(from.clientversion());
  }
}

void MsgCGLogin::CopyFrom(const MsgCGLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCGLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCGLogin::IsInitialized() const {

  return true;
}

void MsgCGLogin::Swap(MsgCGLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCGLogin::InternalSwap(MsgCGLogin* other) {
  std::swap(mid_, other->mid_);
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  udid_.Swap(&other->udid_);
  account_.Swap(&other->account_);
  pswd_.Swap(&other->pswd_);
  name_.Swap(&other->name_);
  std::swap(zid_, other->zid_);
  std::swap(clientversion_, other->clientversion_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCGLogin::GetTypeName() const {
  return "proto3.MsgCGLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCGLogin

// optional uint32 mid = 1;
void MsgCGLogin::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCGLogin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.mid)
  return mid_;
}
 void MsgCGLogin::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.mid)
}

// optional string id = 2;
void MsgCGLogin::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCGLogin::id() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.id)
}
 void MsgCGLogin::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCGLogin.id)
}
 void MsgCGLogin::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCGLogin.id)
}
 ::std::string* MsgCGLogin::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCGLogin.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCGLogin::release_id() {
  // @@protoc_insertion_point(field_release:proto3.MsgCGLogin.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCGLogin.id)
}

// optional .proto3.AccountType type = 3;
void MsgCGLogin::clear_type() {
  type_ = 0;
}
 ::proto3::AccountType MsgCGLogin::type() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.type)
  return static_cast< ::proto3::AccountType >(type_);
}
 void MsgCGLogin::set_type(::proto3::AccountType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.type)
}

// optional string udid = 4;
void MsgCGLogin::clear_udid() {
  udid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCGLogin::udid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.udid)
  return udid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_udid(const ::std::string& value) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.udid)
}
 void MsgCGLogin::set_udid(const char* value) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCGLogin.udid)
}
 void MsgCGLogin::set_udid(const char* value, size_t size) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCGLogin.udid)
}
 ::std::string* MsgCGLogin::mutable_udid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCGLogin.udid)
  return udid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCGLogin::release_udid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCGLogin.udid)
  
  return udid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_allocated_udid(::std::string* udid) {
  if (udid != NULL) {
    
  } else {
    
  }
  udid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCGLogin.udid)
}

// optional string account = 5;
void MsgCGLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCGLogin::account() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.account)
}
 void MsgCGLogin::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCGLogin.account)
}
 void MsgCGLogin::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCGLogin.account)
}
 ::std::string* MsgCGLogin::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCGLogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCGLogin::release_account() {
  // @@protoc_insertion_point(field_release:proto3.MsgCGLogin.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCGLogin.account)
}

// optional string pswd = 6;
void MsgCGLogin::clear_pswd() {
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCGLogin::pswd() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.pswd)
  return pswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_pswd(const ::std::string& value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.pswd)
}
 void MsgCGLogin::set_pswd(const char* value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCGLogin.pswd)
}
 void MsgCGLogin::set_pswd(const char* value, size_t size) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCGLogin.pswd)
}
 ::std::string* MsgCGLogin::mutable_pswd() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCGLogin.pswd)
  return pswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCGLogin::release_pswd() {
  // @@protoc_insertion_point(field_release:proto3.MsgCGLogin.pswd)
  
  return pswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_allocated_pswd(::std::string* pswd) {
  if (pswd != NULL) {
    
  } else {
    
  }
  pswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pswd);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCGLogin.pswd)
}

// optional string name = 7;
void MsgCGLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCGLogin::name() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.name)
}
 void MsgCGLogin::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCGLogin.name)
}
 void MsgCGLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCGLogin.name)
}
 ::std::string* MsgCGLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCGLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCGLogin::release_name() {
  // @@protoc_insertion_point(field_release:proto3.MsgCGLogin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCGLogin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCGLogin.name)
}

// optional uint32 zid = 8;
void MsgCGLogin::clear_zid() {
  zid_ = 0u;
}
 ::google::protobuf::uint32 MsgCGLogin::zid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.zid)
  return zid_;
}
 void MsgCGLogin::set_zid(::google::protobuf::uint32 value) {
  
  zid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.zid)
}

// optional uint32 clientVersion = 9;
void MsgCGLogin::clear_clientversion() {
  clientversion_ = 0u;
}
 ::google::protobuf::uint32 MsgCGLogin::clientversion() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCGLogin.clientVersion)
  return clientversion_;
}
 void MsgCGLogin::set_clientversion(::google::protobuf::uint32 value) {
  
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCGLogin.clientVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgGCLogin::kMidFieldNumber;
const int MsgGCLogin::kVersionFieldNumber;
const int MsgGCLogin::kSidFieldNumber;
const int MsgGCLogin::kZoneInfoFieldNumber;
const int MsgGCLogin::kNameFieldNumber;
const int MsgGCLogin::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgGCLogin::MsgGCLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgGCLogin)
}

void MsgGCLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgGCLogin::MsgGCLogin(const MsgGCLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgGCLogin)
}

void MsgGCLogin::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
  version_ = 0u;
  sid_ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

MsgGCLogin::~MsgGCLogin() {
  // @@protoc_insertion_point(destructor:proto3.MsgGCLogin)
  SharedDtor();
}

void MsgGCLogin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgGCLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgGCLogin& MsgGCLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgGCLogin* MsgGCLogin::default_instance_ = NULL;

MsgGCLogin* MsgGCLogin::New(::google::protobuf::Arena* arena) const {
  MsgGCLogin* n = new MsgGCLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGCLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgGCLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgGCLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgGCLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, sid_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

  zoneinfo_.Clear();
}

bool MsgGCLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgGCLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sid;
        break;
      }

      // optional uint64 sid = 3;
      case 3: {
        if (tag == 24) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_zoneInfo;
        break;
      }

      // repeated .proto3.ZoneInfo zoneInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_zoneInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_zoneInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_zoneinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_zoneInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgGCLogin.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgGCLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgGCLogin)
  return false;
#undef DO_
}

void MsgGCLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgGCLogin)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional uint64 sid = 3;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sid(), output);
  }

  // repeated .proto3.ZoneInfo zoneInfo = 4;
  for (unsigned int i = 0, n = this->zoneinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->zoneinfo(i), output);
  }

  // optional .proto3.eResult result = 5;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgGCLogin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgGCLogin)
}

int MsgGCLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgGCLogin)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional uint64 sid = 3;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sid());
  }

  // optional string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .proto3.eResult result = 5;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.ZoneInfo zoneInfo = 4;
  total_size += 1 * this->zoneinfo_size();
  for (int i = 0; i < this->zoneinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zoneinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGCLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgGCLogin*>(&from));
}

void MsgGCLogin::MergeFrom(const MsgGCLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgGCLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  zoneinfo_.MergeFrom(from.zoneinfo_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgGCLogin::CopyFrom(const MsgGCLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgGCLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGCLogin::IsInitialized() const {

  return true;
}

void MsgGCLogin::Swap(MsgGCLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGCLogin::InternalSwap(MsgGCLogin* other) {
  std::swap(mid_, other->mid_);
  std::swap(version_, other->version_);
  std::swap(sid_, other->sid_);
  zoneinfo_.UnsafeArenaSwap(&other->zoneinfo_);
  name_.Swap(&other->name_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgGCLogin::GetTypeName() const {
  return "proto3.MsgGCLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgGCLogin

// optional uint32 mid = 1;
void MsgGCLogin::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgGCLogin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgGCLogin.mid)
  return mid_;
}
 void MsgGCLogin::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgGCLogin.mid)
}

// optional uint32 version = 2;
void MsgGCLogin::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgGCLogin::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgGCLogin.version)
  return version_;
}
 void MsgGCLogin::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgGCLogin.version)
}

// optional uint64 sid = 3;
void MsgGCLogin::clear_sid() {
  sid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgGCLogin::sid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgGCLogin.sid)
  return sid_;
}
 void MsgGCLogin::set_sid(::google::protobuf::uint64 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgGCLogin.sid)
}

// repeated .proto3.ZoneInfo zoneInfo = 4;
int MsgGCLogin::zoneinfo_size() const {
  return zoneinfo_.size();
}
void MsgGCLogin::clear_zoneinfo() {
  zoneinfo_.Clear();
}
const ::proto3::ZoneInfo& MsgGCLogin::zoneinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgGCLogin.zoneInfo)
  return zoneinfo_.Get(index);
}
::proto3::ZoneInfo* MsgGCLogin::mutable_zoneinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgGCLogin.zoneInfo)
  return zoneinfo_.Mutable(index);
}
::proto3::ZoneInfo* MsgGCLogin::add_zoneinfo() {
  // @@protoc_insertion_point(field_add:proto3.MsgGCLogin.zoneInfo)
  return zoneinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::ZoneInfo >*
MsgGCLogin::mutable_zoneinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgGCLogin.zoneInfo)
  return &zoneinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::ZoneInfo >&
MsgGCLogin::zoneinfo() const {
  // @@protoc_insertion_point(field_list:proto3.MsgGCLogin.zoneInfo)
  return zoneinfo_;
}

// optional string name = 7;
void MsgGCLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgGCLogin::name() const {
  // @@protoc_insertion_point(field_get:proto3.MsgGCLogin.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgGCLogin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgGCLogin.name)
}
 void MsgGCLogin::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgGCLogin.name)
}
 void MsgGCLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgGCLogin.name)
}
 ::std::string* MsgGCLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgGCLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgGCLogin::release_name() {
  // @@protoc_insertion_point(field_release:proto3.MsgGCLogin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgGCLogin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgGCLogin.name)
}

// optional .proto3.eResult result = 5;
void MsgGCLogin::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgGCLogin::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgGCLogin.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgGCLogin::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgGCLogin.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZEnter::kMidFieldNumber;
const int MsgCZEnter::kSidFieldNumber;
const int MsgCZEnter::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZEnter::MsgCZEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZEnter)
}

void MsgCZEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCZEnter::MsgCZEnter(const MsgCZEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZEnter)
}

void MsgCZEnter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
  sid_ = GOOGLE_ULONGLONG(0);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgCZEnter::~MsgCZEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZEnter)
  SharedDtor();
}

void MsgCZEnter::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCZEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZEnter& MsgCZEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZEnter* MsgCZEnter::default_instance_ = NULL;

MsgCZEnter* MsgCZEnter::New(::google::protobuf::Arena* arena) const {
  MsgCZEnter* n = new MsgCZEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZEnter)
  mid_ = 0u;
  sid_ = GOOGLE_ULONGLONG(0);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgCZEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional uint64 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (tag == 26) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCZEnter.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZEnter)
  return false;
#undef DO_
}

void MsgCZEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZEnter)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint64 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sid(), output);
  }

  // optional string uid = 3;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCZEnter.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZEnter)
}

int MsgCZEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZEnter)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint64 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sid());
  }

  // optional string uid = 3;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZEnter*>(&from));
}

void MsgCZEnter::MergeFrom(const MsgCZEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
}

void MsgCZEnter::CopyFrom(const MsgCZEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZEnter::IsInitialized() const {

  return true;
}

void MsgCZEnter::Swap(MsgCZEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZEnter::InternalSwap(MsgCZEnter* other) {
  std::swap(mid_, other->mid_);
  std::swap(sid_, other->sid_);
  uid_.Swap(&other->uid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZEnter::GetTypeName() const {
  return "proto3.MsgCZEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZEnter

// optional uint32 mid = 1;
void MsgCZEnter::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZEnter.mid)
  return mid_;
}
 void MsgCZEnter::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZEnter.mid)
}

// optional uint64 sid = 2;
void MsgCZEnter::clear_sid() {
  sid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCZEnter::sid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZEnter.sid)
  return sid_;
}
 void MsgCZEnter::set_sid(::google::protobuf::uint64 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZEnter.sid)
}

// optional string uid = 3;
void MsgCZEnter::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCZEnter::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZEnter.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCZEnter::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCZEnter.uid)
}
 void MsgCZEnter::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCZEnter.uid)
}
 void MsgCZEnter::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCZEnter.uid)
}
 ::std::string* MsgCZEnter::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZEnter.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCZEnter::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZEnter.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCZEnter::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZEnter.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCEnter::kMidFieldNumber;
const int MsgZCEnter::kActivePlayerFieldNumber;
const int MsgZCEnter::kPlayerInfoFieldNumber;
const int MsgZCEnter::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCEnter::MsgZCEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCEnter)
}

void MsgZCEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCEnter::MsgZCEnter(const MsgZCEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCEnter)
}

void MsgZCEnter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  activeplayer_ = 0u;
  result_ = 0;
}

MsgZCEnter::~MsgZCEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCEnter)
  SharedDtor();
}

void MsgZCEnter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCEnter& MsgZCEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCEnter* MsgZCEnter::default_instance_ = NULL;

MsgZCEnter* MsgZCEnter::New(::google::protobuf::Arena* arena) const {
  MsgZCEnter* n = new MsgZCEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCEnter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCEnter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCEnter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, activeplayer_);
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

  playerinfo_.Clear();
}

bool MsgZCEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activePlayer;
        break;
      }

      // optional uint32 activePlayer = 2;
      case 2: {
        if (tag == 16) {
         parse_activePlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeplayer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerInfo;
        break;
      }

      // repeated .proto3.PlayerInfo playerInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_playerInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_playerInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCEnter)
  return false;
#undef DO_
}

void MsgZCEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCEnter)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 activePlayer = 2;
  if (this->activeplayer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activeplayer(), output);
  }

  // repeated .proto3.PlayerInfo playerInfo = 3;
  for (unsigned int i = 0, n = this->playerinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->playerinfo(i), output);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCEnter)
}

int MsgZCEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCEnter)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 activePlayer = 2;
  if (this->activeplayer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activeplayer());
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.PlayerInfo playerInfo = 3;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCEnter*>(&from));
}

void MsgZCEnter::MergeFrom(const MsgZCEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.activeplayer() != 0) {
    set_activeplayer(from.activeplayer());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCEnter::CopyFrom(const MsgZCEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCEnter::IsInitialized() const {

  return true;
}

void MsgZCEnter::Swap(MsgZCEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCEnter::InternalSwap(MsgZCEnter* other) {
  std::swap(mid_, other->mid_);
  std::swap(activeplayer_, other->activeplayer_);
  playerinfo_.UnsafeArenaSwap(&other->playerinfo_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCEnter::GetTypeName() const {
  return "proto3.MsgZCEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCEnter

// optional uint32 mid = 1;
void MsgZCEnter::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnter.mid)
  return mid_;
}
 void MsgZCEnter::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnter.mid)
}

// optional uint32 activePlayer = 2;
void MsgZCEnter::clear_activeplayer() {
  activeplayer_ = 0u;
}
 ::google::protobuf::uint32 MsgZCEnter::activeplayer() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnter.activePlayer)
  return activeplayer_;
}
 void MsgZCEnter::set_activeplayer(::google::protobuf::uint32 value) {
  
  activeplayer_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnter.activePlayer)
}

// repeated .proto3.PlayerInfo playerInfo = 3;
int MsgZCEnter::playerinfo_size() const {
  return playerinfo_.size();
}
void MsgZCEnter::clear_playerinfo() {
  playerinfo_.Clear();
}
const ::proto3::PlayerInfo& MsgZCEnter::playerinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnter.playerInfo)
  return playerinfo_.Get(index);
}
::proto3::PlayerInfo* MsgZCEnter::mutable_playerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCEnter.playerInfo)
  return playerinfo_.Mutable(index);
}
::proto3::PlayerInfo* MsgZCEnter::add_playerinfo() {
  // @@protoc_insertion_point(field_add:proto3.MsgZCEnter.playerInfo)
  return playerinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >*
MsgZCEnter::mutable_playerinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZCEnter.playerInfo)
  return &playerinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >&
MsgZCEnter::playerinfo() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZCEnter.playerInfo)
  return playerinfo_;
}

// optional .proto3.eResult result = 4;
void MsgZCEnter::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCEnter::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnter.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCEnter::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnter.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCExit::kMidFieldNumber;
const int MsgZCExit::kPlayerFieldNumber;
const int MsgZCExit::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCExit::MsgZCExit()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCExit)
}

void MsgZCExit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  player_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
}

MsgZCExit::MsgZCExit(const MsgZCExit& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCExit)
}

void MsgZCExit::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  player_ = NULL;
  result_ = 0;
}

MsgZCExit::~MsgZCExit() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCExit)
  SharedDtor();
}

void MsgZCExit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_;
  }
}

void MsgZCExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCExit& MsgZCExit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCExit* MsgZCExit::default_instance_ = NULL;

MsgZCExit* MsgZCExit::New(::google::protobuf::Arena* arena) const {
  MsgZCExit* n = new MsgZCExit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCExit::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCExit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCExit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCExit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZCExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCExit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player;
        break;
      }

      // optional .proto3.PlayerInfo player = 3;
      case 3: {
        if (tag == 26) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCExit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCExit)
  return false;
#undef DO_
}

void MsgZCExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCExit)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.PlayerInfo player = 3;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->player_, output);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCExit)
}

int MsgZCExit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCExit)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.PlayerInfo player = 3;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCExit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCExit*>(&from));
}

void MsgZCExit::MergeFrom(const MsgZCExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCExit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_player()) {
    mutable_player()->::proto3::PlayerInfo::MergeFrom(from.player());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCExit::CopyFrom(const MsgZCExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCExit::IsInitialized() const {

  return true;
}

void MsgZCExit::Swap(MsgZCExit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCExit::InternalSwap(MsgZCExit* other) {
  std::swap(mid_, other->mid_);
  std::swap(player_, other->player_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCExit::GetTypeName() const {
  return "proto3.MsgZCExit";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCExit

// optional uint32 mid = 1;
void MsgZCExit::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCExit::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCExit.mid)
  return mid_;
}
 void MsgZCExit::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCExit.mid)
}

// optional .proto3.PlayerInfo player = 3;
bool MsgZCExit::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void MsgZCExit::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3::PlayerInfo& MsgZCExit::player() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCExit.player)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_ != NULL ? *player_ : *default_instance().player_;
#else
  return player_ != NULL ? *player_ : *default_instance_->player_;
#endif
}
::proto3::PlayerInfo* MsgZCExit::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCExit.player)
  return player_;
}
::proto3::PlayerInfo* MsgZCExit::release_player() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCExit.player)
  
  ::proto3::PlayerInfo* temp = player_;
  player_ = NULL;
  return temp;
}
void MsgZCExit::set_allocated_player(::proto3::PlayerInfo* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCExit.player)
}

// optional .proto3.eResult result = 4;
void MsgZCExit::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCExit::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCExit.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCExit::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCExit.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZCreatePlayer::kMidFieldNumber;
const int MsgCZCreatePlayer::kPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZCreatePlayer::MsgCZCreatePlayer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZCreatePlayer)
}

void MsgCZCreatePlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
}

MsgCZCreatePlayer::MsgCZCreatePlayer(const MsgCZCreatePlayer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZCreatePlayer)
}

void MsgCZCreatePlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  playerinfo_ = NULL;
}

MsgCZCreatePlayer::~MsgCZCreatePlayer() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZCreatePlayer)
  SharedDtor();
}

void MsgCZCreatePlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
  }
}

void MsgCZCreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZCreatePlayer& MsgCZCreatePlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZCreatePlayer* MsgCZCreatePlayer::default_instance_ = NULL;

MsgCZCreatePlayer* MsgCZCreatePlayer::New(::google::protobuf::Arena* arena) const {
  MsgCZCreatePlayer* n = new MsgCZCreatePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZCreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZCreatePlayer)
  mid_ = 0u;
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}

bool MsgCZCreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZCreatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        break;
      }

      // optional .proto3.PlayerInfo playerInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZCreatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZCreatePlayer)
  return false;
#undef DO_
}

void MsgCZCreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZCreatePlayer)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.PlayerInfo playerInfo = 2;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->playerinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZCreatePlayer)
}

int MsgCZCreatePlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZCreatePlayer)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.PlayerInfo playerInfo = 2;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZCreatePlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZCreatePlayer*>(&from));
}

void MsgCZCreatePlayer::MergeFrom(const MsgCZCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZCreatePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_playerinfo()) {
    mutable_playerinfo()->::proto3::PlayerInfo::MergeFrom(from.playerinfo());
  }
}

void MsgCZCreatePlayer::CopyFrom(const MsgCZCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZCreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZCreatePlayer::IsInitialized() const {

  return true;
}

void MsgCZCreatePlayer::Swap(MsgCZCreatePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZCreatePlayer::InternalSwap(MsgCZCreatePlayer* other) {
  std::swap(mid_, other->mid_);
  std::swap(playerinfo_, other->playerinfo_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZCreatePlayer::GetTypeName() const {
  return "proto3.MsgCZCreatePlayer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZCreatePlayer

// optional uint32 mid = 1;
void MsgCZCreatePlayer::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZCreatePlayer::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZCreatePlayer.mid)
  return mid_;
}
 void MsgCZCreatePlayer::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZCreatePlayer.mid)
}

// optional .proto3.PlayerInfo playerInfo = 2;
bool MsgCZCreatePlayer::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
void MsgCZCreatePlayer::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
const ::proto3::PlayerInfo& MsgCZCreatePlayer::playerinfo() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZCreatePlayer.playerInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance().playerinfo_;
#else
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
#endif
}
::proto3::PlayerInfo* MsgCZCreatePlayer::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZCreatePlayer.playerInfo)
  return playerinfo_;
}
::proto3::PlayerInfo* MsgCZCreatePlayer::release_playerinfo() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZCreatePlayer.playerInfo)
  
  ::proto3::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
void MsgCZCreatePlayer::set_allocated_playerinfo(::proto3::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZCreatePlayer.playerInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCCreatePlayer::kMidFieldNumber;
const int MsgZCCreatePlayer::kActivePlayerFieldNumber;
const int MsgZCCreatePlayer::kPlayerInfoFieldNumber;
const int MsgZCCreatePlayer::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCCreatePlayer::MsgZCCreatePlayer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCCreatePlayer)
}

void MsgZCCreatePlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
}

MsgZCCreatePlayer::MsgZCCreatePlayer(const MsgZCCreatePlayer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCCreatePlayer)
}

void MsgZCCreatePlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  activeplayer_ = 0u;
  playerinfo_ = NULL;
  result_ = 0;
}

MsgZCCreatePlayer::~MsgZCCreatePlayer() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCCreatePlayer)
  SharedDtor();
}

void MsgZCCreatePlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
  }
}

void MsgZCCreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCCreatePlayer& MsgZCCreatePlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCCreatePlayer* MsgZCCreatePlayer::default_instance_ = NULL;

MsgZCCreatePlayer* MsgZCCreatePlayer::New(::google::protobuf::Arena* arena) const {
  MsgZCCreatePlayer* n = new MsgZCCreatePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCCreatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCCreatePlayer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCCreatePlayer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCCreatePlayer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, activeplayer_);
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZCCreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCCreatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activePlayer;
        break;
      }

      // optional uint32 activePlayer = 2;
      case 2: {
        if (tag == 16) {
         parse_activePlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeplayer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerInfo;
        break;
      }

      // optional .proto3.PlayerInfo playerInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCCreatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCCreatePlayer)
  return false;
#undef DO_
}

void MsgZCCreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCCreatePlayer)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 activePlayer = 2;
  if (this->activeplayer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activeplayer(), output);
  }

  // optional .proto3.PlayerInfo playerInfo = 3;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->playerinfo_, output);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCCreatePlayer)
}

int MsgZCCreatePlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCCreatePlayer)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 activePlayer = 2;
  if (this->activeplayer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activeplayer());
  }

  // optional .proto3.PlayerInfo playerInfo = 3;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfo_);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCCreatePlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCCreatePlayer*>(&from));
}

void MsgZCCreatePlayer::MergeFrom(const MsgZCCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCCreatePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.activeplayer() != 0) {
    set_activeplayer(from.activeplayer());
  }
  if (from.has_playerinfo()) {
    mutable_playerinfo()->::proto3::PlayerInfo::MergeFrom(from.playerinfo());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCCreatePlayer::CopyFrom(const MsgZCCreatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCCreatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCCreatePlayer::IsInitialized() const {

  return true;
}

void MsgZCCreatePlayer::Swap(MsgZCCreatePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCCreatePlayer::InternalSwap(MsgZCCreatePlayer* other) {
  std::swap(mid_, other->mid_);
  std::swap(activeplayer_, other->activeplayer_);
  std::swap(playerinfo_, other->playerinfo_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCCreatePlayer::GetTypeName() const {
  return "proto3.MsgZCCreatePlayer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCCreatePlayer

// optional uint32 mid = 1;
void MsgZCCreatePlayer::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCCreatePlayer::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCCreatePlayer.mid)
  return mid_;
}
 void MsgZCCreatePlayer::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCCreatePlayer.mid)
}

// optional uint32 activePlayer = 2;
void MsgZCCreatePlayer::clear_activeplayer() {
  activeplayer_ = 0u;
}
 ::google::protobuf::uint32 MsgZCCreatePlayer::activeplayer() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCCreatePlayer.activePlayer)
  return activeplayer_;
}
 void MsgZCCreatePlayer::set_activeplayer(::google::protobuf::uint32 value) {
  
  activeplayer_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCCreatePlayer.activePlayer)
}

// optional .proto3.PlayerInfo playerInfo = 3;
bool MsgZCCreatePlayer::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
void MsgZCCreatePlayer::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
const ::proto3::PlayerInfo& MsgZCCreatePlayer::playerinfo() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCCreatePlayer.playerInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance().playerinfo_;
#else
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
#endif
}
::proto3::PlayerInfo* MsgZCCreatePlayer::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCCreatePlayer.playerInfo)
  return playerinfo_;
}
::proto3::PlayerInfo* MsgZCCreatePlayer::release_playerinfo() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCCreatePlayer.playerInfo)
  
  ::proto3::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
void MsgZCCreatePlayer::set_allocated_playerinfo(::proto3::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCCreatePlayer.playerInfo)
}

// optional .proto3.eResult result = 4;
void MsgZCCreatePlayer::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCCreatePlayer::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCCreatePlayer.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCCreatePlayer::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCCreatePlayer.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZUpdatePlayer::kMidFieldNumber;
const int MsgCZUpdatePlayer::kActivePlayerFieldNumber;
const int MsgCZUpdatePlayer::kPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZUpdatePlayer::MsgCZUpdatePlayer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZUpdatePlayer)
}

void MsgCZUpdatePlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
}

MsgCZUpdatePlayer::MsgCZUpdatePlayer(const MsgCZUpdatePlayer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZUpdatePlayer)
}

void MsgCZUpdatePlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  activeplayer_ = 0u;
  playerinfo_ = NULL;
}

MsgCZUpdatePlayer::~MsgCZUpdatePlayer() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZUpdatePlayer)
  SharedDtor();
}

void MsgCZUpdatePlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
  }
}

void MsgCZUpdatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZUpdatePlayer& MsgCZUpdatePlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZUpdatePlayer* MsgCZUpdatePlayer::default_instance_ = NULL;

MsgCZUpdatePlayer* MsgCZUpdatePlayer::New(::google::protobuf::Arena* arena) const {
  MsgCZUpdatePlayer* n = new MsgCZUpdatePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZUpdatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZUpdatePlayer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZUpdatePlayer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZUpdatePlayer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, activeplayer_);
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZUpdatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZUpdatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activePlayer;
        break;
      }

      // optional uint32 activePlayer = 2;
      case 2: {
        if (tag == 16) {
         parse_activePlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeplayer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerInfo;
        break;
      }

      // optional .proto3.PlayerInfo playerInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZUpdatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZUpdatePlayer)
  return false;
#undef DO_
}

void MsgCZUpdatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZUpdatePlayer)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 activePlayer = 2;
  if (this->activeplayer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activeplayer(), output);
  }

  // optional .proto3.PlayerInfo playerInfo = 3;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->playerinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZUpdatePlayer)
}

int MsgCZUpdatePlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZUpdatePlayer)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 activePlayer = 2;
  if (this->activeplayer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activeplayer());
  }

  // optional .proto3.PlayerInfo playerInfo = 3;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZUpdatePlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZUpdatePlayer*>(&from));
}

void MsgCZUpdatePlayer::MergeFrom(const MsgCZUpdatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZUpdatePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.activeplayer() != 0) {
    set_activeplayer(from.activeplayer());
  }
  if (from.has_playerinfo()) {
    mutable_playerinfo()->::proto3::PlayerInfo::MergeFrom(from.playerinfo());
  }
}

void MsgCZUpdatePlayer::CopyFrom(const MsgCZUpdatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZUpdatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZUpdatePlayer::IsInitialized() const {

  return true;
}

void MsgCZUpdatePlayer::Swap(MsgCZUpdatePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZUpdatePlayer::InternalSwap(MsgCZUpdatePlayer* other) {
  std::swap(mid_, other->mid_);
  std::swap(activeplayer_, other->activeplayer_);
  std::swap(playerinfo_, other->playerinfo_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZUpdatePlayer::GetTypeName() const {
  return "proto3.MsgCZUpdatePlayer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZUpdatePlayer

// optional uint32 mid = 1;
void MsgCZUpdatePlayer::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZUpdatePlayer::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdatePlayer.mid)
  return mid_;
}
 void MsgCZUpdatePlayer::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZUpdatePlayer.mid)
}

// optional uint32 activePlayer = 2;
void MsgCZUpdatePlayer::clear_activeplayer() {
  activeplayer_ = 0u;
}
 ::google::protobuf::uint32 MsgCZUpdatePlayer::activeplayer() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdatePlayer.activePlayer)
  return activeplayer_;
}
 void MsgCZUpdatePlayer::set_activeplayer(::google::protobuf::uint32 value) {
  
  activeplayer_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZUpdatePlayer.activePlayer)
}

// optional .proto3.PlayerInfo playerInfo = 3;
bool MsgCZUpdatePlayer::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
void MsgCZUpdatePlayer::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
const ::proto3::PlayerInfo& MsgCZUpdatePlayer::playerinfo() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdatePlayer.playerInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance().playerinfo_;
#else
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
#endif
}
::proto3::PlayerInfo* MsgCZUpdatePlayer::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZUpdatePlayer.playerInfo)
  return playerinfo_;
}
::proto3::PlayerInfo* MsgCZUpdatePlayer::release_playerinfo() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZUpdatePlayer.playerInfo)
  
  ::proto3::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
void MsgCZUpdatePlayer::set_allocated_playerinfo(::proto3::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZUpdatePlayer.playerInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCUpdatePlayer::kMidFieldNumber;
const int MsgZCUpdatePlayer::kActivePlayerFieldNumber;
const int MsgZCUpdatePlayer::kPlayerInfoFieldNumber;
const int MsgZCUpdatePlayer::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCUpdatePlayer::MsgZCUpdatePlayer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCUpdatePlayer)
}

void MsgZCUpdatePlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
}

MsgZCUpdatePlayer::MsgZCUpdatePlayer(const MsgZCUpdatePlayer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCUpdatePlayer)
}

void MsgZCUpdatePlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  activeplayer_ = 0u;
  playerinfo_ = NULL;
  result_ = 0;
}

MsgZCUpdatePlayer::~MsgZCUpdatePlayer() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCUpdatePlayer)
  SharedDtor();
}

void MsgZCUpdatePlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
  }
}

void MsgZCUpdatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCUpdatePlayer& MsgZCUpdatePlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCUpdatePlayer* MsgZCUpdatePlayer::default_instance_ = NULL;

MsgZCUpdatePlayer* MsgZCUpdatePlayer::New(::google::protobuf::Arena* arena) const {
  MsgZCUpdatePlayer* n = new MsgZCUpdatePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCUpdatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCUpdatePlayer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCUpdatePlayer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCUpdatePlayer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, activeplayer_);
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZCUpdatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCUpdatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activePlayer;
        break;
      }

      // optional uint32 activePlayer = 2;
      case 2: {
        if (tag == 16) {
         parse_activePlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeplayer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerInfo;
        break;
      }

      // optional .proto3.PlayerInfo playerInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCUpdatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCUpdatePlayer)
  return false;
#undef DO_
}

void MsgZCUpdatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCUpdatePlayer)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 activePlayer = 2;
  if (this->activeplayer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activeplayer(), output);
  }

  // optional .proto3.PlayerInfo playerInfo = 3;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->playerinfo_, output);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCUpdatePlayer)
}

int MsgZCUpdatePlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCUpdatePlayer)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 activePlayer = 2;
  if (this->activeplayer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activeplayer());
  }

  // optional .proto3.PlayerInfo playerInfo = 3;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfo_);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCUpdatePlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCUpdatePlayer*>(&from));
}

void MsgZCUpdatePlayer::MergeFrom(const MsgZCUpdatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCUpdatePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.activeplayer() != 0) {
    set_activeplayer(from.activeplayer());
  }
  if (from.has_playerinfo()) {
    mutable_playerinfo()->::proto3::PlayerInfo::MergeFrom(from.playerinfo());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCUpdatePlayer::CopyFrom(const MsgZCUpdatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCUpdatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCUpdatePlayer::IsInitialized() const {

  return true;
}

void MsgZCUpdatePlayer::Swap(MsgZCUpdatePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCUpdatePlayer::InternalSwap(MsgZCUpdatePlayer* other) {
  std::swap(mid_, other->mid_);
  std::swap(activeplayer_, other->activeplayer_);
  std::swap(playerinfo_, other->playerinfo_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCUpdatePlayer::GetTypeName() const {
  return "proto3.MsgZCUpdatePlayer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCUpdatePlayer

// optional uint32 mid = 1;
void MsgZCUpdatePlayer::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCUpdatePlayer::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdatePlayer.mid)
  return mid_;
}
 void MsgZCUpdatePlayer::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCUpdatePlayer.mid)
}

// optional uint32 activePlayer = 2;
void MsgZCUpdatePlayer::clear_activeplayer() {
  activeplayer_ = 0u;
}
 ::google::protobuf::uint32 MsgZCUpdatePlayer::activeplayer() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdatePlayer.activePlayer)
  return activeplayer_;
}
 void MsgZCUpdatePlayer::set_activeplayer(::google::protobuf::uint32 value) {
  
  activeplayer_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCUpdatePlayer.activePlayer)
}

// optional .proto3.PlayerInfo playerInfo = 3;
bool MsgZCUpdatePlayer::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
void MsgZCUpdatePlayer::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
const ::proto3::PlayerInfo& MsgZCUpdatePlayer::playerinfo() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdatePlayer.playerInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance().playerinfo_;
#else
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
#endif
}
::proto3::PlayerInfo* MsgZCUpdatePlayer::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCUpdatePlayer.playerInfo)
  return playerinfo_;
}
::proto3::PlayerInfo* MsgZCUpdatePlayer::release_playerinfo() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCUpdatePlayer.playerInfo)
  
  ::proto3::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
void MsgZCUpdatePlayer::set_allocated_playerinfo(::proto3::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCUpdatePlayer.playerInfo)
}

// optional .proto3.eResult result = 4;
void MsgZCUpdatePlayer::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCUpdatePlayer::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdatePlayer.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCUpdatePlayer::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCUpdatePlayer.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZRemovePlayer::kMidFieldNumber;
const int MsgCZRemovePlayer::kPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZRemovePlayer::MsgCZRemovePlayer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZRemovePlayer)
}

void MsgCZRemovePlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCZRemovePlayer::MsgCZRemovePlayer(const MsgCZRemovePlayer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZRemovePlayer)
}

void MsgCZRemovePlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  pid_ = 0u;
}

MsgCZRemovePlayer::~MsgCZRemovePlayer() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZRemovePlayer)
  SharedDtor();
}

void MsgCZRemovePlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCZRemovePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZRemovePlayer& MsgCZRemovePlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZRemovePlayer* MsgCZRemovePlayer::default_instance_ = NULL;

MsgCZRemovePlayer* MsgCZRemovePlayer::New(::google::protobuf::Arena* arena) const {
  MsgCZRemovePlayer* n = new MsgCZRemovePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZRemovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZRemovePlayer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZRemovePlayer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZRemovePlayer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, pid_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZRemovePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZRemovePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZRemovePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZRemovePlayer)
  return false;
#undef DO_
}

void MsgCZRemovePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZRemovePlayer)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZRemovePlayer)
}

int MsgCZRemovePlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZRemovePlayer)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZRemovePlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZRemovePlayer*>(&from));
}

void MsgCZRemovePlayer::MergeFrom(const MsgCZRemovePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZRemovePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
}

void MsgCZRemovePlayer::CopyFrom(const MsgCZRemovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZRemovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZRemovePlayer::IsInitialized() const {

  return true;
}

void MsgCZRemovePlayer::Swap(MsgCZRemovePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZRemovePlayer::InternalSwap(MsgCZRemovePlayer* other) {
  std::swap(mid_, other->mid_);
  std::swap(pid_, other->pid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZRemovePlayer::GetTypeName() const {
  return "proto3.MsgCZRemovePlayer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZRemovePlayer

// optional uint32 mid = 1;
void MsgCZRemovePlayer::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZRemovePlayer::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZRemovePlayer.mid)
  return mid_;
}
 void MsgCZRemovePlayer::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZRemovePlayer.mid)
}

// optional uint32 pid = 2;
void MsgCZRemovePlayer::clear_pid() {
  pid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZRemovePlayer::pid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZRemovePlayer.pid)
  return pid_;
}
 void MsgCZRemovePlayer::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZRemovePlayer.pid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCRemovePlayer::kMidFieldNumber;
const int MsgZCRemovePlayer::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCRemovePlayer::MsgZCRemovePlayer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCRemovePlayer)
}

void MsgZCRemovePlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCRemovePlayer::MsgZCRemovePlayer(const MsgZCRemovePlayer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCRemovePlayer)
}

void MsgZCRemovePlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  result_ = 0;
}

MsgZCRemovePlayer::~MsgZCRemovePlayer() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCRemovePlayer)
  SharedDtor();
}

void MsgZCRemovePlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCRemovePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCRemovePlayer& MsgZCRemovePlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCRemovePlayer* MsgZCRemovePlayer::default_instance_ = NULL;

MsgZCRemovePlayer* MsgZCRemovePlayer::New(::google::protobuf::Arena* arena) const {
  MsgZCRemovePlayer* n = new MsgZCRemovePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCRemovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCRemovePlayer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCRemovePlayer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCRemovePlayer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZCRemovePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCRemovePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCRemovePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCRemovePlayer)
  return false;
#undef DO_
}

void MsgZCRemovePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCRemovePlayer)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCRemovePlayer)
}

int MsgZCRemovePlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCRemovePlayer)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCRemovePlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCRemovePlayer*>(&from));
}

void MsgZCRemovePlayer::MergeFrom(const MsgZCRemovePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCRemovePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCRemovePlayer::CopyFrom(const MsgZCRemovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCRemovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCRemovePlayer::IsInitialized() const {

  return true;
}

void MsgZCRemovePlayer::Swap(MsgZCRemovePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCRemovePlayer::InternalSwap(MsgZCRemovePlayer* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCRemovePlayer::GetTypeName() const {
  return "proto3.MsgZCRemovePlayer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCRemovePlayer

// optional uint32 mid = 1;
void MsgZCRemovePlayer::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCRemovePlayer::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCRemovePlayer.mid)
  return mid_;
}
 void MsgZCRemovePlayer::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCRemovePlayer.mid)
}

// optional .proto3.eResult result = 2;
void MsgZCRemovePlayer::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCRemovePlayer::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCRemovePlayer.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCRemovePlayer::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCRemovePlayer.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZGetPlayerExtra::kMidFieldNumber;
const int MsgCZGetPlayerExtra::kEpidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZGetPlayerExtra::MsgCZGetPlayerExtra()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZGetPlayerExtra)
}

void MsgCZGetPlayerExtra::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCZGetPlayerExtra::MsgCZGetPlayerExtra(const MsgCZGetPlayerExtra& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZGetPlayerExtra)
}

void MsgCZGetPlayerExtra::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  epid_ = 0u;
}

MsgCZGetPlayerExtra::~MsgCZGetPlayerExtra() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZGetPlayerExtra)
  SharedDtor();
}

void MsgCZGetPlayerExtra::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCZGetPlayerExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZGetPlayerExtra& MsgCZGetPlayerExtra::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZGetPlayerExtra* MsgCZGetPlayerExtra::default_instance_ = NULL;

MsgCZGetPlayerExtra* MsgCZGetPlayerExtra::New(::google::protobuf::Arena* arena) const {
  MsgCZGetPlayerExtra* n = new MsgCZGetPlayerExtra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZGetPlayerExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZGetPlayerExtra)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZGetPlayerExtra, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZGetPlayerExtra*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, epid_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZGetPlayerExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZGetPlayerExtra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_epid;
        break;
      }

      // optional uint32 epid = 2;
      case 2: {
        if (tag == 16) {
         parse_epid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZGetPlayerExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZGetPlayerExtra)
  return false;
#undef DO_
}

void MsgCZGetPlayerExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZGetPlayerExtra)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 epid = 2;
  if (this->epid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZGetPlayerExtra)
}

int MsgCZGetPlayerExtra::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZGetPlayerExtra)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 epid = 2;
  if (this->epid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZGetPlayerExtra::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZGetPlayerExtra*>(&from));
}

void MsgCZGetPlayerExtra::MergeFrom(const MsgCZGetPlayerExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZGetPlayerExtra)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.epid() != 0) {
    set_epid(from.epid());
  }
}

void MsgCZGetPlayerExtra::CopyFrom(const MsgCZGetPlayerExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZGetPlayerExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZGetPlayerExtra::IsInitialized() const {

  return true;
}

void MsgCZGetPlayerExtra::Swap(MsgCZGetPlayerExtra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZGetPlayerExtra::InternalSwap(MsgCZGetPlayerExtra* other) {
  std::swap(mid_, other->mid_);
  std::swap(epid_, other->epid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZGetPlayerExtra::GetTypeName() const {
  return "proto3.MsgCZGetPlayerExtra";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZGetPlayerExtra

// optional uint32 mid = 1;
void MsgCZGetPlayerExtra::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZGetPlayerExtra::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZGetPlayerExtra.mid)
  return mid_;
}
 void MsgCZGetPlayerExtra::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZGetPlayerExtra.mid)
}

// optional uint32 epid = 2;
void MsgCZGetPlayerExtra::clear_epid() {
  epid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZGetPlayerExtra::epid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZGetPlayerExtra.epid)
  return epid_;
}
 void MsgCZGetPlayerExtra::set_epid(::google::protobuf::uint32 value) {
  
  epid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZGetPlayerExtra.epid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZUpdatePlayerExtra::kMidFieldNumber;
const int MsgCZUpdatePlayerExtra::kEpidFieldNumber;
const int MsgCZUpdatePlayerExtra::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZUpdatePlayerExtra::MsgCZUpdatePlayerExtra()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZUpdatePlayerExtra)
}

void MsgCZUpdatePlayerExtra::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  extra_ = const_cast< ::proto3::PlayerExtraInfo*>(
      ::proto3::PlayerExtraInfo::internal_default_instance());
#else
  extra_ = const_cast< ::proto3::PlayerExtraInfo*>(&::proto3::PlayerExtraInfo::default_instance());
#endif
}

MsgCZUpdatePlayerExtra::MsgCZUpdatePlayerExtra(const MsgCZUpdatePlayerExtra& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZUpdatePlayerExtra)
}

void MsgCZUpdatePlayerExtra::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  epid_ = 0u;
  extra_ = NULL;
}

MsgCZUpdatePlayerExtra::~MsgCZUpdatePlayerExtra() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZUpdatePlayerExtra)
  SharedDtor();
}

void MsgCZUpdatePlayerExtra::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete extra_;
  }
}

void MsgCZUpdatePlayerExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZUpdatePlayerExtra& MsgCZUpdatePlayerExtra::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZUpdatePlayerExtra* MsgCZUpdatePlayerExtra::default_instance_ = NULL;

MsgCZUpdatePlayerExtra* MsgCZUpdatePlayerExtra::New(::google::protobuf::Arena* arena) const {
  MsgCZUpdatePlayerExtra* n = new MsgCZUpdatePlayerExtra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZUpdatePlayerExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZUpdatePlayerExtra)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZUpdatePlayerExtra, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZUpdatePlayerExtra*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, epid_);
  if (GetArenaNoVirtual() == NULL && extra_ != NULL) delete extra_;
  extra_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZUpdatePlayerExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZUpdatePlayerExtra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_epid;
        break;
      }

      // optional uint32 epid = 2;
      case 2: {
        if (tag == 16) {
         parse_epid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extra;
        break;
      }

      // optional .proto3.PlayerExtraInfo extra = 3;
      case 3: {
        if (tag == 26) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZUpdatePlayerExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZUpdatePlayerExtra)
  return false;
#undef DO_
}

void MsgCZUpdatePlayerExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZUpdatePlayerExtra)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 epid = 2;
  if (this->epid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epid(), output);
  }

  // optional .proto3.PlayerExtraInfo extra = 3;
  if (this->has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->extra_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZUpdatePlayerExtra)
}

int MsgCZUpdatePlayerExtra::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZUpdatePlayerExtra)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 epid = 2;
  if (this->epid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epid());
  }

  // optional .proto3.PlayerExtraInfo extra = 3;
  if (this->has_extra()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extra_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZUpdatePlayerExtra::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZUpdatePlayerExtra*>(&from));
}

void MsgCZUpdatePlayerExtra::MergeFrom(const MsgCZUpdatePlayerExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZUpdatePlayerExtra)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.epid() != 0) {
    set_epid(from.epid());
  }
  if (from.has_extra()) {
    mutable_extra()->::proto3::PlayerExtraInfo::MergeFrom(from.extra());
  }
}

void MsgCZUpdatePlayerExtra::CopyFrom(const MsgCZUpdatePlayerExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZUpdatePlayerExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZUpdatePlayerExtra::IsInitialized() const {

  return true;
}

void MsgCZUpdatePlayerExtra::Swap(MsgCZUpdatePlayerExtra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZUpdatePlayerExtra::InternalSwap(MsgCZUpdatePlayerExtra* other) {
  std::swap(mid_, other->mid_);
  std::swap(epid_, other->epid_);
  std::swap(extra_, other->extra_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZUpdatePlayerExtra::GetTypeName() const {
  return "proto3.MsgCZUpdatePlayerExtra";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZUpdatePlayerExtra

// optional uint32 mid = 1;
void MsgCZUpdatePlayerExtra::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZUpdatePlayerExtra::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdatePlayerExtra.mid)
  return mid_;
}
 void MsgCZUpdatePlayerExtra::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZUpdatePlayerExtra.mid)
}

// optional uint32 epid = 2;
void MsgCZUpdatePlayerExtra::clear_epid() {
  epid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZUpdatePlayerExtra::epid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdatePlayerExtra.epid)
  return epid_;
}
 void MsgCZUpdatePlayerExtra::set_epid(::google::protobuf::uint32 value) {
  
  epid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZUpdatePlayerExtra.epid)
}

// optional .proto3.PlayerExtraInfo extra = 3;
bool MsgCZUpdatePlayerExtra::has_extra() const {
  return !_is_default_instance_ && extra_ != NULL;
}
void MsgCZUpdatePlayerExtra::clear_extra() {
  if (GetArenaNoVirtual() == NULL && extra_ != NULL) delete extra_;
  extra_ = NULL;
}
const ::proto3::PlayerExtraInfo& MsgCZUpdatePlayerExtra::extra() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdatePlayerExtra.extra)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return extra_ != NULL ? *extra_ : *default_instance().extra_;
#else
  return extra_ != NULL ? *extra_ : *default_instance_->extra_;
#endif
}
::proto3::PlayerExtraInfo* MsgCZUpdatePlayerExtra::mutable_extra() {
  
  if (extra_ == NULL) {
    extra_ = new ::proto3::PlayerExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZUpdatePlayerExtra.extra)
  return extra_;
}
::proto3::PlayerExtraInfo* MsgCZUpdatePlayerExtra::release_extra() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZUpdatePlayerExtra.extra)
  
  ::proto3::PlayerExtraInfo* temp = extra_;
  extra_ = NULL;
  return temp;
}
void MsgCZUpdatePlayerExtra::set_allocated_extra(::proto3::PlayerExtraInfo* extra) {
  delete extra_;
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZUpdatePlayerExtra.extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCUpdatePlayerExtra::kMidFieldNumber;
const int MsgZCUpdatePlayerExtra::kExtraFieldNumber;
const int MsgZCUpdatePlayerExtra::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCUpdatePlayerExtra::MsgZCUpdatePlayerExtra()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCUpdatePlayerExtra)
}

void MsgZCUpdatePlayerExtra::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  extra_ = const_cast< ::proto3::PlayerExtraInfo*>(
      ::proto3::PlayerExtraInfo::internal_default_instance());
#else
  extra_ = const_cast< ::proto3::PlayerExtraInfo*>(&::proto3::PlayerExtraInfo::default_instance());
#endif
}

MsgZCUpdatePlayerExtra::MsgZCUpdatePlayerExtra(const MsgZCUpdatePlayerExtra& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCUpdatePlayerExtra)
}

void MsgZCUpdatePlayerExtra::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  extra_ = NULL;
  result_ = 0;
}

MsgZCUpdatePlayerExtra::~MsgZCUpdatePlayerExtra() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCUpdatePlayerExtra)
  SharedDtor();
}

void MsgZCUpdatePlayerExtra::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete extra_;
  }
}

void MsgZCUpdatePlayerExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCUpdatePlayerExtra& MsgZCUpdatePlayerExtra::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCUpdatePlayerExtra* MsgZCUpdatePlayerExtra::default_instance_ = NULL;

MsgZCUpdatePlayerExtra* MsgZCUpdatePlayerExtra::New(::google::protobuf::Arena* arena) const {
  MsgZCUpdatePlayerExtra* n = new MsgZCUpdatePlayerExtra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCUpdatePlayerExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCUpdatePlayerExtra)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCUpdatePlayerExtra, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCUpdatePlayerExtra*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && extra_ != NULL) delete extra_;
  extra_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZCUpdatePlayerExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCUpdatePlayerExtra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extra;
        break;
      }

      // optional .proto3.PlayerExtraInfo extra = 2;
      case 2: {
        if (tag == 18) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCUpdatePlayerExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCUpdatePlayerExtra)
  return false;
#undef DO_
}

void MsgZCUpdatePlayerExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCUpdatePlayerExtra)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.PlayerExtraInfo extra = 2;
  if (this->has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->extra_, output);
  }

  // optional .proto3.eResult result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCUpdatePlayerExtra)
}

int MsgZCUpdatePlayerExtra::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCUpdatePlayerExtra)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.PlayerExtraInfo extra = 2;
  if (this->has_extra()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extra_);
  }

  // optional .proto3.eResult result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCUpdatePlayerExtra::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCUpdatePlayerExtra*>(&from));
}

void MsgZCUpdatePlayerExtra::MergeFrom(const MsgZCUpdatePlayerExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCUpdatePlayerExtra)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_extra()) {
    mutable_extra()->::proto3::PlayerExtraInfo::MergeFrom(from.extra());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCUpdatePlayerExtra::CopyFrom(const MsgZCUpdatePlayerExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCUpdatePlayerExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCUpdatePlayerExtra::IsInitialized() const {

  return true;
}

void MsgZCUpdatePlayerExtra::Swap(MsgZCUpdatePlayerExtra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCUpdatePlayerExtra::InternalSwap(MsgZCUpdatePlayerExtra* other) {
  std::swap(mid_, other->mid_);
  std::swap(extra_, other->extra_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCUpdatePlayerExtra::GetTypeName() const {
  return "proto3.MsgZCUpdatePlayerExtra";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCUpdatePlayerExtra

// optional uint32 mid = 1;
void MsgZCUpdatePlayerExtra::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCUpdatePlayerExtra::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdatePlayerExtra.mid)
  return mid_;
}
 void MsgZCUpdatePlayerExtra::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCUpdatePlayerExtra.mid)
}

// optional .proto3.PlayerExtraInfo extra = 2;
bool MsgZCUpdatePlayerExtra::has_extra() const {
  return !_is_default_instance_ && extra_ != NULL;
}
void MsgZCUpdatePlayerExtra::clear_extra() {
  if (GetArenaNoVirtual() == NULL && extra_ != NULL) delete extra_;
  extra_ = NULL;
}
const ::proto3::PlayerExtraInfo& MsgZCUpdatePlayerExtra::extra() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdatePlayerExtra.extra)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return extra_ != NULL ? *extra_ : *default_instance().extra_;
#else
  return extra_ != NULL ? *extra_ : *default_instance_->extra_;
#endif
}
::proto3::PlayerExtraInfo* MsgZCUpdatePlayerExtra::mutable_extra() {
  
  if (extra_ == NULL) {
    extra_ = new ::proto3::PlayerExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCUpdatePlayerExtra.extra)
  return extra_;
}
::proto3::PlayerExtraInfo* MsgZCUpdatePlayerExtra::release_extra() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCUpdatePlayerExtra.extra)
  
  ::proto3::PlayerExtraInfo* temp = extra_;
  extra_ = NULL;
  return temp;
}
void MsgZCUpdatePlayerExtra::set_allocated_extra(::proto3::PlayerExtraInfo* extra) {
  delete extra_;
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCUpdatePlayerExtra.extra)
}

// optional .proto3.eResult result = 3;
void MsgZCUpdatePlayerExtra::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCUpdatePlayerExtra::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdatePlayerExtra.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCUpdatePlayerExtra::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCUpdatePlayerExtra.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZMove::kMidFieldNumber;
const int MsgCZMove::kTypeFieldNumber;
const int MsgCZMove::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZMove::MsgCZMove()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZMove)
}

void MsgCZMove::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCZMove::MsgCZMove(const MsgCZMove& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZMove)
}

void MsgCZMove::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  type_ = 0;
}

MsgCZMove::~MsgCZMove() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZMove)
  SharedDtor();
}

void MsgCZMove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCZMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZMove& MsgCZMove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZMove* MsgCZMove::default_instance_ = NULL;

MsgCZMove* MsgCZMove::New(::google::protobuf::Arena* arena) const {
  MsgCZMove* n = new MsgCZMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZMove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZMove)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZMove, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZMove*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, type_);

#undef ZR_HELPER_
#undef ZR_

  to_.Clear();
}

bool MsgCZMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .proto3.eMoveType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto3::eMoveType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to;
        break;
      }

      // repeated .proto3.PlaceInfo to = 3;
      case 3: {
        if (tag == 26) {
         parse_to:
          DO_(input->IncrementRecursionDepth());
         parse_loop_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_to;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZMove)
  return false;
#undef DO_
}

void MsgCZMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZMove)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.eMoveType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .proto3.PlaceInfo to = 3;
  for (unsigned int i = 0, n = this->to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->to(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZMove)
}

int MsgCZMove::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZMove)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.eMoveType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .proto3.PlaceInfo to = 3;
  total_size += 1 * this->to_size();
  for (int i = 0; i < this->to_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->to(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZMove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZMove*>(&from));
}

void MsgCZMove::MergeFrom(const MsgCZMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  to_.MergeFrom(from.to_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MsgCZMove::CopyFrom(const MsgCZMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZMove::IsInitialized() const {

  return true;
}

void MsgCZMove::Swap(MsgCZMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZMove::InternalSwap(MsgCZMove* other) {
  std::swap(mid_, other->mid_);
  std::swap(type_, other->type_);
  to_.UnsafeArenaSwap(&other->to_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZMove::GetTypeName() const {
  return "proto3.MsgCZMove";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZMove

// optional uint32 mid = 1;
void MsgCZMove::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZMove::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZMove.mid)
  return mid_;
}
 void MsgCZMove::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZMove.mid)
}

// optional .proto3.eMoveType type = 2;
void MsgCZMove::clear_type() {
  type_ = 0;
}
 ::proto3::eMoveType MsgCZMove::type() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZMove.type)
  return static_cast< ::proto3::eMoveType >(type_);
}
 void MsgCZMove::set_type(::proto3::eMoveType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZMove.type)
}

// repeated .proto3.PlaceInfo to = 3;
int MsgCZMove::to_size() const {
  return to_.size();
}
void MsgCZMove::clear_to() {
  to_.Clear();
}
const ::proto3::PlaceInfo& MsgCZMove::to(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZMove.to)
  return to_.Get(index);
}
::proto3::PlaceInfo* MsgCZMove::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZMove.to)
  return to_.Mutable(index);
}
::proto3::PlaceInfo* MsgCZMove::add_to() {
  // @@protoc_insertion_point(field_add:proto3.MsgCZMove.to)
  return to_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlaceInfo >*
MsgCZMove::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgCZMove.to)
  return &to_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlaceInfo >&
MsgCZMove::to() const {
  // @@protoc_insertion_point(field_list:proto3.MsgCZMove.to)
  return to_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCMove::kMidFieldNumber;
const int MsgZCMove::kTypeFieldNumber;
const int MsgZCMove::kToFieldNumber;
const int MsgZCMove::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCMove::MsgZCMove()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCMove)
}

void MsgZCMove::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCMove::MsgZCMove(const MsgZCMove& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCMove)
}

void MsgZCMove::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  type_ = 0;
  result_ = 0;
}

MsgZCMove::~MsgZCMove() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCMove)
  SharedDtor();
}

void MsgZCMove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCMove& MsgZCMove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCMove* MsgZCMove::default_instance_ = NULL;

MsgZCMove* MsgZCMove::New(::google::protobuf::Arena* arena) const {
  MsgZCMove* n = new MsgZCMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCMove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCMove)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCMove, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCMove*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, type_);
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

  to_.Clear();
}

bool MsgZCMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .proto3.eMoveType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto3::eMoveType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to;
        break;
      }

      // repeated .proto3.PlaceInfo to = 3;
      case 3: {
        if (tag == 26) {
         parse_to:
          DO_(input->IncrementRecursionDepth());
         parse_loop_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_to;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCMove)
  return false;
#undef DO_
}

void MsgZCMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCMove)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.eMoveType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .proto3.PlaceInfo to = 3;
  for (unsigned int i = 0, n = this->to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->to(i), output);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCMove)
}

int MsgZCMove::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCMove)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.eMoveType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.PlaceInfo to = 3;
  total_size += 1 * this->to_size();
  for (int i = 0; i < this->to_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->to(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCMove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCMove*>(&from));
}

void MsgZCMove::MergeFrom(const MsgZCMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  to_.MergeFrom(from.to_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCMove::CopyFrom(const MsgZCMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCMove::IsInitialized() const {

  return true;
}

void MsgZCMove::Swap(MsgZCMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCMove::InternalSwap(MsgZCMove* other) {
  std::swap(mid_, other->mid_);
  std::swap(type_, other->type_);
  to_.UnsafeArenaSwap(&other->to_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCMove::GetTypeName() const {
  return "proto3.MsgZCMove";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCMove

// optional uint32 mid = 1;
void MsgZCMove::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCMove::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCMove.mid)
  return mid_;
}
 void MsgZCMove::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCMove.mid)
}

// optional .proto3.eMoveType type = 2;
void MsgZCMove::clear_type() {
  type_ = 0;
}
 ::proto3::eMoveType MsgZCMove::type() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCMove.type)
  return static_cast< ::proto3::eMoveType >(type_);
}
 void MsgZCMove::set_type(::proto3::eMoveType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCMove.type)
}

// repeated .proto3.PlaceInfo to = 3;
int MsgZCMove::to_size() const {
  return to_.size();
}
void MsgZCMove::clear_to() {
  to_.Clear();
}
const ::proto3::PlaceInfo& MsgZCMove::to(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCMove.to)
  return to_.Get(index);
}
::proto3::PlaceInfo* MsgZCMove::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCMove.to)
  return to_.Mutable(index);
}
::proto3::PlaceInfo* MsgZCMove::add_to() {
  // @@protoc_insertion_point(field_add:proto3.MsgZCMove.to)
  return to_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlaceInfo >*
MsgZCMove::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZCMove.to)
  return &to_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlaceInfo >&
MsgZCMove::to() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZCMove.to)
  return to_;
}

// optional .proto3.eResult result = 4;
void MsgZCMove::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCMove::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCMove.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCMove::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCMove.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCBroadcastPlayer::kMidFieldNumber;
const int MsgZCBroadcastPlayer::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCBroadcastPlayer::MsgZCBroadcastPlayer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCBroadcastPlayer)
}

void MsgZCBroadcastPlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  player_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
}

MsgZCBroadcastPlayer::MsgZCBroadcastPlayer(const MsgZCBroadcastPlayer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCBroadcastPlayer)
}

void MsgZCBroadcastPlayer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  player_ = NULL;
}

MsgZCBroadcastPlayer::~MsgZCBroadcastPlayer() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCBroadcastPlayer)
  SharedDtor();
}

void MsgZCBroadcastPlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_;
  }
}

void MsgZCBroadcastPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCBroadcastPlayer& MsgZCBroadcastPlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCBroadcastPlayer* MsgZCBroadcastPlayer::default_instance_ = NULL;

MsgZCBroadcastPlayer* MsgZCBroadcastPlayer::New(::google::protobuf::Arena* arena) const {
  MsgZCBroadcastPlayer* n = new MsgZCBroadcastPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCBroadcastPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCBroadcastPlayer)
  mid_ = 0u;
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}

bool MsgZCBroadcastPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCBroadcastPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .proto3.PlayerInfo player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCBroadcastPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCBroadcastPlayer)
  return false;
#undef DO_
}

void MsgZCBroadcastPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCBroadcastPlayer)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.PlayerInfo player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->player_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCBroadcastPlayer)
}

int MsgZCBroadcastPlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCBroadcastPlayer)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.PlayerInfo player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCBroadcastPlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCBroadcastPlayer*>(&from));
}

void MsgZCBroadcastPlayer::MergeFrom(const MsgZCBroadcastPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCBroadcastPlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_player()) {
    mutable_player()->::proto3::PlayerInfo::MergeFrom(from.player());
  }
}

void MsgZCBroadcastPlayer::CopyFrom(const MsgZCBroadcastPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCBroadcastPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCBroadcastPlayer::IsInitialized() const {

  return true;
}

void MsgZCBroadcastPlayer::Swap(MsgZCBroadcastPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCBroadcastPlayer::InternalSwap(MsgZCBroadcastPlayer* other) {
  std::swap(mid_, other->mid_);
  std::swap(player_, other->player_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCBroadcastPlayer::GetTypeName() const {
  return "proto3.MsgZCBroadcastPlayer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCBroadcastPlayer

// optional uint32 mid = 1;
void MsgZCBroadcastPlayer::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCBroadcastPlayer::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCBroadcastPlayer.mid)
  return mid_;
}
 void MsgZCBroadcastPlayer::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCBroadcastPlayer.mid)
}

// optional .proto3.PlayerInfo player = 2;
bool MsgZCBroadcastPlayer::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void MsgZCBroadcastPlayer::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3::PlayerInfo& MsgZCBroadcastPlayer::player() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCBroadcastPlayer.player)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_ != NULL ? *player_ : *default_instance().player_;
#else
  return player_ != NULL ? *player_ : *default_instance_->player_;
#endif
}
::proto3::PlayerInfo* MsgZCBroadcastPlayer::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCBroadcastPlayer.player)
  return player_;
}
::proto3::PlayerInfo* MsgZCBroadcastPlayer::release_player() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCBroadcastPlayer.player)
  
  ::proto3::PlayerInfo* temp = player_;
  player_ = NULL;
  return temp;
}
void MsgZCBroadcastPlayer::set_allocated_player(::proto3::PlayerInfo* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCBroadcastPlayer.player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCSyncPlayers::kMidFieldNumber;
const int MsgZCSyncPlayers::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCSyncPlayers::MsgZCSyncPlayers()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCSyncPlayers)
}

void MsgZCSyncPlayers::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCSyncPlayers::MsgZCSyncPlayers(const MsgZCSyncPlayers& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCSyncPlayers)
}

void MsgZCSyncPlayers::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
}

MsgZCSyncPlayers::~MsgZCSyncPlayers() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCSyncPlayers)
  SharedDtor();
}

void MsgZCSyncPlayers::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCSyncPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCSyncPlayers& MsgZCSyncPlayers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCSyncPlayers* MsgZCSyncPlayers::default_instance_ = NULL;

MsgZCSyncPlayers* MsgZCSyncPlayers::New(::google::protobuf::Arena* arena) const {
  MsgZCSyncPlayers* n = new MsgZCSyncPlayers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCSyncPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCSyncPlayers)
  mid_ = 0u;
  players_.Clear();
}

bool MsgZCSyncPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCSyncPlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .proto3.PlayerInfo players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCSyncPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCSyncPlayers)
  return false;
#undef DO_
}

void MsgZCSyncPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCSyncPlayers)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // repeated .proto3.PlayerInfo players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->players(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCSyncPlayers)
}

int MsgZCSyncPlayers::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCSyncPlayers)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // repeated .proto3.PlayerInfo players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCSyncPlayers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCSyncPlayers*>(&from));
}

void MsgZCSyncPlayers::MergeFrom(const MsgZCSyncPlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCSyncPlayers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  players_.MergeFrom(from.players_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgZCSyncPlayers::CopyFrom(const MsgZCSyncPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCSyncPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCSyncPlayers::IsInitialized() const {

  return true;
}

void MsgZCSyncPlayers::Swap(MsgZCSyncPlayers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCSyncPlayers::InternalSwap(MsgZCSyncPlayers* other) {
  std::swap(mid_, other->mid_);
  players_.UnsafeArenaSwap(&other->players_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCSyncPlayers::GetTypeName() const {
  return "proto3.MsgZCSyncPlayers";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCSyncPlayers

// optional uint32 mid = 1;
void MsgZCSyncPlayers::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCSyncPlayers::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCSyncPlayers.mid)
  return mid_;
}
 void MsgZCSyncPlayers::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCSyncPlayers.mid)
}

// repeated .proto3.PlayerInfo players = 2;
int MsgZCSyncPlayers::players_size() const {
  return players_.size();
}
void MsgZCSyncPlayers::clear_players() {
  players_.Clear();
}
const ::proto3::PlayerInfo& MsgZCSyncPlayers::players(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCSyncPlayers.players)
  return players_.Get(index);
}
::proto3::PlayerInfo* MsgZCSyncPlayers::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCSyncPlayers.players)
  return players_.Mutable(index);
}
::proto3::PlayerInfo* MsgZCSyncPlayers::add_players() {
  // @@protoc_insertion_point(field_add:proto3.MsgZCSyncPlayers.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >*
MsgZCSyncPlayers::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZCSyncPlayers.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >&
MsgZCSyncPlayers::players() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZCSyncPlayers.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZUpdateName::kMidFieldNumber;
const int MsgCZUpdateName::kUidFieldNumber;
const int MsgCZUpdateName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZUpdateName::MsgCZUpdateName()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZUpdateName)
}

void MsgCZUpdateName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCZUpdateName::MsgCZUpdateName(const MsgCZUpdateName& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZUpdateName)
}

void MsgCZUpdateName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgCZUpdateName::~MsgCZUpdateName() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZUpdateName)
  SharedDtor();
}

void MsgCZUpdateName::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCZUpdateName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZUpdateName& MsgCZUpdateName::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZUpdateName* MsgCZUpdateName::default_instance_ = NULL;

MsgCZUpdateName* MsgCZUpdateName::New(::google::protobuf::Arena* arena) const {
  MsgCZUpdateName* n = new MsgCZUpdateName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZUpdateName::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZUpdateName)
  mid_ = 0u;
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgCZUpdateName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZUpdateName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCZUpdateName.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCZUpdateName.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZUpdateName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZUpdateName)
  return false;
#undef DO_
}

void MsgCZUpdateName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZUpdateName)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCZUpdateName.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCZUpdateName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZUpdateName)
}

int MsgCZUpdateName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZUpdateName)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZUpdateName::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZUpdateName*>(&from));
}

void MsgCZUpdateName::MergeFrom(const MsgCZUpdateName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZUpdateName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MsgCZUpdateName::CopyFrom(const MsgCZUpdateName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZUpdateName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZUpdateName::IsInitialized() const {

  return true;
}

void MsgCZUpdateName::Swap(MsgCZUpdateName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZUpdateName::InternalSwap(MsgCZUpdateName* other) {
  std::swap(mid_, other->mid_);
  uid_.Swap(&other->uid_);
  name_.Swap(&other->name_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZUpdateName::GetTypeName() const {
  return "proto3.MsgCZUpdateName";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZUpdateName

// optional uint32 mid = 1;
void MsgCZUpdateName::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZUpdateName::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdateName.mid)
  return mid_;
}
 void MsgCZUpdateName::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZUpdateName.mid)
}

// optional string uid = 2;
void MsgCZUpdateName::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCZUpdateName::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdateName.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCZUpdateName::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCZUpdateName.uid)
}
 void MsgCZUpdateName::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCZUpdateName.uid)
}
 void MsgCZUpdateName::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCZUpdateName.uid)
}
 ::std::string* MsgCZUpdateName::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZUpdateName.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCZUpdateName::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZUpdateName.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCZUpdateName::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZUpdateName.uid)
}

// optional string name = 3;
void MsgCZUpdateName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCZUpdateName::name() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZUpdateName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCZUpdateName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCZUpdateName.name)
}
 void MsgCZUpdateName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCZUpdateName.name)
}
 void MsgCZUpdateName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCZUpdateName.name)
}
 ::std::string* MsgCZUpdateName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZUpdateName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCZUpdateName::release_name() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZUpdateName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCZUpdateName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZUpdateName.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCUpdateName::kMidFieldNumber;
const int MsgZCUpdateName::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCUpdateName::MsgZCUpdateName()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCUpdateName)
}

void MsgZCUpdateName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCUpdateName::MsgZCUpdateName(const MsgZCUpdateName& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCUpdateName)
}

void MsgZCUpdateName::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  result_ = 0;
}

MsgZCUpdateName::~MsgZCUpdateName() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCUpdateName)
  SharedDtor();
}

void MsgZCUpdateName::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCUpdateName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCUpdateName& MsgZCUpdateName::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCUpdateName* MsgZCUpdateName::default_instance_ = NULL;

MsgZCUpdateName* MsgZCUpdateName::New(::google::protobuf::Arena* arena) const {
  MsgZCUpdateName* n = new MsgZCUpdateName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCUpdateName::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCUpdateName)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCUpdateName, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCUpdateName*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZCUpdateName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCUpdateName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCUpdateName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCUpdateName)
  return false;
#undef DO_
}

void MsgZCUpdateName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCUpdateName)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCUpdateName)
}

int MsgZCUpdateName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCUpdateName)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCUpdateName::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCUpdateName*>(&from));
}

void MsgZCUpdateName::MergeFrom(const MsgZCUpdateName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCUpdateName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCUpdateName::CopyFrom(const MsgZCUpdateName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCUpdateName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCUpdateName::IsInitialized() const {

  return true;
}

void MsgZCUpdateName::Swap(MsgZCUpdateName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCUpdateName::InternalSwap(MsgZCUpdateName* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCUpdateName::GetTypeName() const {
  return "proto3.MsgZCUpdateName";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCUpdateName

// optional uint32 mid = 1;
void MsgZCUpdateName::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCUpdateName::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdateName.mid)
  return mid_;
}
 void MsgZCUpdateName::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCUpdateName.mid)
}

// optional .proto3.eResult result = 2;
void MsgZCUpdateName::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCUpdateName::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCUpdateName.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCUpdateName::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCUpdateName.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZEnterArena::kMidFieldNumber;
const int MsgCZEnterArena::kAidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZEnterArena::MsgCZEnterArena()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZEnterArena)
}

void MsgCZEnterArena::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCZEnterArena::MsgCZEnterArena(const MsgCZEnterArena& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZEnterArena)
}

void MsgCZEnterArena::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  aid_ = 0u;
}

MsgCZEnterArena::~MsgCZEnterArena() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZEnterArena)
  SharedDtor();
}

void MsgCZEnterArena::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCZEnterArena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZEnterArena& MsgCZEnterArena::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZEnterArena* MsgCZEnterArena::default_instance_ = NULL;

MsgCZEnterArena* MsgCZEnterArena::New(::google::protobuf::Arena* arena) const {
  MsgCZEnterArena* n = new MsgCZEnterArena;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZEnterArena::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZEnterArena)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZEnterArena, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZEnterArena*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, aid_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZEnterArena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZEnterArena)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aid;
        break;
      }

      // optional uint32 aid = 2;
      case 2: {
        if (tag == 16) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZEnterArena)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZEnterArena)
  return false;
#undef DO_
}

void MsgCZEnterArena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZEnterArena)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 aid = 2;
  if (this->aid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZEnterArena)
}

int MsgCZEnterArena::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZEnterArena)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 aid = 2;
  if (this->aid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZEnterArena::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZEnterArena*>(&from));
}

void MsgCZEnterArena::MergeFrom(const MsgCZEnterArena& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZEnterArena)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.aid() != 0) {
    set_aid(from.aid());
  }
}

void MsgCZEnterArena::CopyFrom(const MsgCZEnterArena& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZEnterArena)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZEnterArena::IsInitialized() const {

  return true;
}

void MsgCZEnterArena::Swap(MsgCZEnterArena* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZEnterArena::InternalSwap(MsgCZEnterArena* other) {
  std::swap(mid_, other->mid_);
  std::swap(aid_, other->aid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZEnterArena::GetTypeName() const {
  return "proto3.MsgCZEnterArena";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZEnterArena

// optional uint32 mid = 1;
void MsgCZEnterArena::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZEnterArena::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZEnterArena.mid)
  return mid_;
}
 void MsgCZEnterArena::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZEnterArena.mid)
}

// optional uint32 aid = 2;
void MsgCZEnterArena::clear_aid() {
  aid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZEnterArena::aid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZEnterArena.aid)
  return aid_;
}
 void MsgCZEnterArena::set_aid(::google::protobuf::uint32 value) {
  
  aid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZEnterArena.aid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCEnterArena::kMidFieldNumber;
const int MsgZCEnterArena::kResultFieldNumber;
const int MsgZCEnterArena::kAidFieldNumber;
const int MsgZCEnterArena::kKeyFieldNumber;
const int MsgZCEnterArena::kHostFieldNumber;
const int MsgZCEnterArena::kPortFieldNumber;
const int MsgZCEnterArena::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCEnterArena::MsgZCEnterArena()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCEnterArena)
}

void MsgZCEnterArena::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCEnterArena::MsgZCEnterArena(const MsgZCEnterArena& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCEnterArena)
}

void MsgZCEnterArena::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
  result_ = 0;
  aid_ = 0u;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgZCEnterArena::~MsgZCEnterArena() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCEnterArena)
  SharedDtor();
}

void MsgZCEnterArena::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCEnterArena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCEnterArena& MsgZCEnterArena::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCEnterArena* MsgZCEnterArena::default_instance_ = NULL;

MsgZCEnterArena* MsgZCEnterArena::New(::google::protobuf::Arena* arena) const {
  MsgZCEnterArena* n = new MsgZCEnterArena;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCEnterArena::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCEnterArena)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCEnterArena, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCEnterArena*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  ZR_(aid_, port_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZCEnterArena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCEnterArena)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aid;
        break;
      }

      // optional uint32 aid = 3;
      case 3: {
        if (tag == 24) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional string key = 4;
      case 4: {
        if (tag == 34) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgZCEnterArena.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }

      // optional string host = 5;
      case 5: {
        if (tag == 42) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgZCEnterArena.host"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional uint32 port = 6;
      case 6: {
        if (tag == 48) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_level;
        break;
      }

      // optional string level = 7;
      case 7: {
        if (tag == 58) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), this->level().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgZCEnterArena.level"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCEnterArena)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCEnterArena)
  return false;
#undef DO_
}

void MsgZCEnterArena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCEnterArena)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional uint32 aid = 3;
  if (this->aid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->aid(), output);
  }

  // optional string key = 4;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgZCEnterArena.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->key(), output);
  }

  // optional string host = 5;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgZCEnterArena.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->host(), output);
  }

  // optional uint32 port = 6;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port(), output);
  }

  // optional string level = 7;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), this->level().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgZCEnterArena.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->level(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCEnterArena)
}

int MsgZCEnterArena::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCEnterArena)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // optional uint32 aid = 3;
  if (this->aid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aid());
  }

  // optional string key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string host = 5;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // optional uint32 port = 6;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional string level = 7;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCEnterArena::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCEnterArena*>(&from));
}

void MsgZCEnterArena::MergeFrom(const MsgZCEnterArena& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCEnterArena)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.aid() != 0) {
    set_aid(from.aid());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
}

void MsgZCEnterArena::CopyFrom(const MsgZCEnterArena& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCEnterArena)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCEnterArena::IsInitialized() const {

  return true;
}

void MsgZCEnterArena::Swap(MsgZCEnterArena* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCEnterArena::InternalSwap(MsgZCEnterArena* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  std::swap(aid_, other->aid_);
  key_.Swap(&other->key_);
  host_.Swap(&other->host_);
  std::swap(port_, other->port_);
  level_.Swap(&other->level_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCEnterArena::GetTypeName() const {
  return "proto3.MsgZCEnterArena";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCEnterArena

// optional uint32 mid = 1;
void MsgZCEnterArena::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCEnterArena::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnterArena.mid)
  return mid_;
}
 void MsgZCEnterArena::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnterArena.mid)
}

// optional .proto3.eResult result = 2;
void MsgZCEnterArena::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCEnterArena::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnterArena.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCEnterArena::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnterArena.result)
}

// optional uint32 aid = 3;
void MsgZCEnterArena::clear_aid() {
  aid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCEnterArena::aid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnterArena.aid)
  return aid_;
}
 void MsgZCEnterArena::set_aid(::google::protobuf::uint32 value) {
  
  aid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnterArena.aid)
}

// optional string key = 4;
void MsgZCEnterArena::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgZCEnterArena::key() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnterArena.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgZCEnterArena::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnterArena.key)
}
 void MsgZCEnterArena::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgZCEnterArena.key)
}
 void MsgZCEnterArena::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgZCEnterArena.key)
}
 ::std::string* MsgZCEnterArena::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCEnterArena.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgZCEnterArena::release_key() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCEnterArena.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgZCEnterArena::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCEnterArena.key)
}

// optional string host = 5;
void MsgZCEnterArena::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgZCEnterArena::host() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnterArena.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgZCEnterArena::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnterArena.host)
}
 void MsgZCEnterArena::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgZCEnterArena.host)
}
 void MsgZCEnterArena::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgZCEnterArena.host)
}
 ::std::string* MsgZCEnterArena::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCEnterArena.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgZCEnterArena::release_host() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCEnterArena.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgZCEnterArena::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCEnterArena.host)
}

// optional uint32 port = 6;
void MsgZCEnterArena::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 MsgZCEnterArena::port() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnterArena.port)
  return port_;
}
 void MsgZCEnterArena::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnterArena.port)
}

// optional string level = 7;
void MsgZCEnterArena::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgZCEnterArena::level() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCEnterArena.level)
  return level_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgZCEnterArena::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgZCEnterArena.level)
}
 void MsgZCEnterArena::set_level(const char* value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgZCEnterArena.level)
}
 void MsgZCEnterArena::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgZCEnterArena.level)
}
 ::std::string* MsgZCEnterArena::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCEnterArena.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgZCEnterArena::release_level() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCEnterArena.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgZCEnterArena::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCEnterArena.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZChallengeCreate::kMidFieldNumber;
const int MsgCZChallengeCreate::kChallengersFieldNumber;
const int MsgCZChallengeCreate::kOppositesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZChallengeCreate::MsgCZChallengeCreate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZChallengeCreate)
}

void MsgCZChallengeCreate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCZChallengeCreate::MsgCZChallengeCreate(const MsgCZChallengeCreate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZChallengeCreate)
}

void MsgCZChallengeCreate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
}

MsgCZChallengeCreate::~MsgCZChallengeCreate() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZChallengeCreate)
  SharedDtor();
}

void MsgCZChallengeCreate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCZChallengeCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZChallengeCreate& MsgCZChallengeCreate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZChallengeCreate* MsgCZChallengeCreate::default_instance_ = NULL;

MsgCZChallengeCreate* MsgCZChallengeCreate::New(::google::protobuf::Arena* arena) const {
  MsgCZChallengeCreate* n = new MsgCZChallengeCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZChallengeCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZChallengeCreate)
  mid_ = 0u;
  challengers_.Clear();
  opposites_.Clear();
}

bool MsgCZChallengeCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZChallengeCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_challengers;
        break;
      }

      // repeated string challengers = 2;
      case 2: {
        if (tag == 18) {
         parse_challengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_challengers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->challengers(this->challengers_size() - 1).data(),
            this->challengers(this->challengers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCZChallengeCreate.challengers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_challengers;
        if (input->ExpectTag(26)) goto parse_opposites;
        break;
      }

      // repeated string opposites = 3;
      case 3: {
        if (tag == 26) {
         parse_opposites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_opposites()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opposites(this->opposites_size() - 1).data(),
            this->opposites(this->opposites_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCZChallengeCreate.opposites"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_opposites;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZChallengeCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZChallengeCreate)
  return false;
#undef DO_
}

void MsgCZChallengeCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZChallengeCreate)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // repeated string challengers = 2;
  for (int i = 0; i < this->challengers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->challengers(i).data(), this->challengers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCZChallengeCreate.challengers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->challengers(i), output);
  }

  // repeated string opposites = 3;
  for (int i = 0; i < this->opposites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opposites(i).data(), this->opposites(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCZChallengeCreate.opposites");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opposites(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZChallengeCreate)
}

int MsgCZChallengeCreate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZChallengeCreate)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // repeated string challengers = 2;
  total_size += 1 * this->challengers_size();
  for (int i = 0; i < this->challengers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->challengers(i));
  }

  // repeated string opposites = 3;
  total_size += 1 * this->opposites_size();
  for (int i = 0; i < this->opposites_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->opposites(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZChallengeCreate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZChallengeCreate*>(&from));
}

void MsgCZChallengeCreate::MergeFrom(const MsgCZChallengeCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZChallengeCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  challengers_.MergeFrom(from.challengers_);
  opposites_.MergeFrom(from.opposites_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgCZChallengeCreate::CopyFrom(const MsgCZChallengeCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZChallengeCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZChallengeCreate::IsInitialized() const {

  return true;
}

void MsgCZChallengeCreate::Swap(MsgCZChallengeCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZChallengeCreate::InternalSwap(MsgCZChallengeCreate* other) {
  std::swap(mid_, other->mid_);
  challengers_.UnsafeArenaSwap(&other->challengers_);
  opposites_.UnsafeArenaSwap(&other->opposites_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZChallengeCreate::GetTypeName() const {
  return "proto3.MsgCZChallengeCreate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZChallengeCreate

// optional uint32 mid = 1;
void MsgCZChallengeCreate::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZChallengeCreate::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZChallengeCreate.mid)
  return mid_;
}
 void MsgCZChallengeCreate::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZChallengeCreate.mid)
}

// repeated string challengers = 2;
int MsgCZChallengeCreate::challengers_size() const {
  return challengers_.size();
}
void MsgCZChallengeCreate::clear_challengers() {
  challengers_.Clear();
}
 const ::std::string& MsgCZChallengeCreate::challengers(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZChallengeCreate.challengers)
  return challengers_.Get(index);
}
 ::std::string* MsgCZChallengeCreate::mutable_challengers(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZChallengeCreate.challengers)
  return challengers_.Mutable(index);
}
 void MsgCZChallengeCreate::set_challengers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto3.MsgCZChallengeCreate.challengers)
  challengers_.Mutable(index)->assign(value);
}
 void MsgCZChallengeCreate::set_challengers(int index, const char* value) {
  challengers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto3.MsgCZChallengeCreate.challengers)
}
 void MsgCZChallengeCreate::set_challengers(int index, const char* value, size_t size) {
  challengers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCZChallengeCreate.challengers)
}
 ::std::string* MsgCZChallengeCreate::add_challengers() {
  // @@protoc_insertion_point(field_add_mutable:proto3.MsgCZChallengeCreate.challengers)
  return challengers_.Add();
}
 void MsgCZChallengeCreate::add_challengers(const ::std::string& value) {
  challengers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto3.MsgCZChallengeCreate.challengers)
}
 void MsgCZChallengeCreate::add_challengers(const char* value) {
  challengers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto3.MsgCZChallengeCreate.challengers)
}
 void MsgCZChallengeCreate::add_challengers(const char* value, size_t size) {
  challengers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto3.MsgCZChallengeCreate.challengers)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgCZChallengeCreate::challengers() const {
  // @@protoc_insertion_point(field_list:proto3.MsgCZChallengeCreate.challengers)
  return challengers_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgCZChallengeCreate::mutable_challengers() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgCZChallengeCreate.challengers)
  return &challengers_;
}

// repeated string opposites = 3;
int MsgCZChallengeCreate::opposites_size() const {
  return opposites_.size();
}
void MsgCZChallengeCreate::clear_opposites() {
  opposites_.Clear();
}
 const ::std::string& MsgCZChallengeCreate::opposites(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZChallengeCreate.opposites)
  return opposites_.Get(index);
}
 ::std::string* MsgCZChallengeCreate::mutable_opposites(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZChallengeCreate.opposites)
  return opposites_.Mutable(index);
}
 void MsgCZChallengeCreate::set_opposites(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto3.MsgCZChallengeCreate.opposites)
  opposites_.Mutable(index)->assign(value);
}
 void MsgCZChallengeCreate::set_opposites(int index, const char* value) {
  opposites_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto3.MsgCZChallengeCreate.opposites)
}
 void MsgCZChallengeCreate::set_opposites(int index, const char* value, size_t size) {
  opposites_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCZChallengeCreate.opposites)
}
 ::std::string* MsgCZChallengeCreate::add_opposites() {
  // @@protoc_insertion_point(field_add_mutable:proto3.MsgCZChallengeCreate.opposites)
  return opposites_.Add();
}
 void MsgCZChallengeCreate::add_opposites(const ::std::string& value) {
  opposites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto3.MsgCZChallengeCreate.opposites)
}
 void MsgCZChallengeCreate::add_opposites(const char* value) {
  opposites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto3.MsgCZChallengeCreate.opposites)
}
 void MsgCZChallengeCreate::add_opposites(const char* value, size_t size) {
  opposites_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto3.MsgCZChallengeCreate.opposites)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgCZChallengeCreate::opposites() const {
  // @@protoc_insertion_point(field_list:proto3.MsgCZChallengeCreate.opposites)
  return opposites_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgCZChallengeCreate::mutable_opposites() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgCZChallengeCreate.opposites)
  return &opposites_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCChallengeInvite::kMidFieldNumber;
const int MsgZCChallengeInvite::kChallengersFieldNumber;
const int MsgZCChallengeInvite::kOppositesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCChallengeInvite::MsgZCChallengeInvite()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCChallengeInvite)
}

void MsgZCChallengeInvite::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCChallengeInvite::MsgZCChallengeInvite(const MsgZCChallengeInvite& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCChallengeInvite)
}

void MsgZCChallengeInvite::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
}

MsgZCChallengeInvite::~MsgZCChallengeInvite() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCChallengeInvite)
  SharedDtor();
}

void MsgZCChallengeInvite::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCChallengeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCChallengeInvite& MsgZCChallengeInvite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCChallengeInvite* MsgZCChallengeInvite::default_instance_ = NULL;

MsgZCChallengeInvite* MsgZCChallengeInvite::New(::google::protobuf::Arena* arena) const {
  MsgZCChallengeInvite* n = new MsgZCChallengeInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCChallengeInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCChallengeInvite)
  mid_ = 0u;
  challengers_.Clear();
  opposites_.Clear();
}

bool MsgZCChallengeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCChallengeInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_challengers;
        break;
      }

      // repeated string challengers = 2;
      case 2: {
        if (tag == 18) {
         parse_challengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_challengers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->challengers(this->challengers_size() - 1).data(),
            this->challengers(this->challengers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgZCChallengeInvite.challengers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_challengers;
        if (input->ExpectTag(26)) goto parse_opposites;
        break;
      }

      // repeated string opposites = 3;
      case 3: {
        if (tag == 26) {
         parse_opposites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_opposites()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opposites(this->opposites_size() - 1).data(),
            this->opposites(this->opposites_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgZCChallengeInvite.opposites"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_opposites;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCChallengeInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCChallengeInvite)
  return false;
#undef DO_
}

void MsgZCChallengeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCChallengeInvite)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // repeated string challengers = 2;
  for (int i = 0; i < this->challengers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->challengers(i).data(), this->challengers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgZCChallengeInvite.challengers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->challengers(i), output);
  }

  // repeated string opposites = 3;
  for (int i = 0; i < this->opposites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opposites(i).data(), this->opposites(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgZCChallengeInvite.opposites");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opposites(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCChallengeInvite)
}

int MsgZCChallengeInvite::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCChallengeInvite)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // repeated string challengers = 2;
  total_size += 1 * this->challengers_size();
  for (int i = 0; i < this->challengers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->challengers(i));
  }

  // repeated string opposites = 3;
  total_size += 1 * this->opposites_size();
  for (int i = 0; i < this->opposites_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->opposites(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCChallengeInvite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCChallengeInvite*>(&from));
}

void MsgZCChallengeInvite::MergeFrom(const MsgZCChallengeInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCChallengeInvite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  challengers_.MergeFrom(from.challengers_);
  opposites_.MergeFrom(from.opposites_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgZCChallengeInvite::CopyFrom(const MsgZCChallengeInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCChallengeInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCChallengeInvite::IsInitialized() const {

  return true;
}

void MsgZCChallengeInvite::Swap(MsgZCChallengeInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCChallengeInvite::InternalSwap(MsgZCChallengeInvite* other) {
  std::swap(mid_, other->mid_);
  challengers_.UnsafeArenaSwap(&other->challengers_);
  opposites_.UnsafeArenaSwap(&other->opposites_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCChallengeInvite::GetTypeName() const {
  return "proto3.MsgZCChallengeInvite";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCChallengeInvite

// optional uint32 mid = 1;
void MsgZCChallengeInvite::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCChallengeInvite::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCChallengeInvite.mid)
  return mid_;
}
 void MsgZCChallengeInvite::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCChallengeInvite.mid)
}

// repeated string challengers = 2;
int MsgZCChallengeInvite::challengers_size() const {
  return challengers_.size();
}
void MsgZCChallengeInvite::clear_challengers() {
  challengers_.Clear();
}
 const ::std::string& MsgZCChallengeInvite::challengers(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCChallengeInvite.challengers)
  return challengers_.Get(index);
}
 ::std::string* MsgZCChallengeInvite::mutable_challengers(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCChallengeInvite.challengers)
  return challengers_.Mutable(index);
}
 void MsgZCChallengeInvite::set_challengers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto3.MsgZCChallengeInvite.challengers)
  challengers_.Mutable(index)->assign(value);
}
 void MsgZCChallengeInvite::set_challengers(int index, const char* value) {
  challengers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto3.MsgZCChallengeInvite.challengers)
}
 void MsgZCChallengeInvite::set_challengers(int index, const char* value, size_t size) {
  challengers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgZCChallengeInvite.challengers)
}
 ::std::string* MsgZCChallengeInvite::add_challengers() {
  // @@protoc_insertion_point(field_add_mutable:proto3.MsgZCChallengeInvite.challengers)
  return challengers_.Add();
}
 void MsgZCChallengeInvite::add_challengers(const ::std::string& value) {
  challengers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto3.MsgZCChallengeInvite.challengers)
}
 void MsgZCChallengeInvite::add_challengers(const char* value) {
  challengers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto3.MsgZCChallengeInvite.challengers)
}
 void MsgZCChallengeInvite::add_challengers(const char* value, size_t size) {
  challengers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto3.MsgZCChallengeInvite.challengers)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgZCChallengeInvite::challengers() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZCChallengeInvite.challengers)
  return challengers_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgZCChallengeInvite::mutable_challengers() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZCChallengeInvite.challengers)
  return &challengers_;
}

// repeated string opposites = 3;
int MsgZCChallengeInvite::opposites_size() const {
  return opposites_.size();
}
void MsgZCChallengeInvite::clear_opposites() {
  opposites_.Clear();
}
 const ::std::string& MsgZCChallengeInvite::opposites(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCChallengeInvite.opposites)
  return opposites_.Get(index);
}
 ::std::string* MsgZCChallengeInvite::mutable_opposites(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCChallengeInvite.opposites)
  return opposites_.Mutable(index);
}
 void MsgZCChallengeInvite::set_opposites(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto3.MsgZCChallengeInvite.opposites)
  opposites_.Mutable(index)->assign(value);
}
 void MsgZCChallengeInvite::set_opposites(int index, const char* value) {
  opposites_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto3.MsgZCChallengeInvite.opposites)
}
 void MsgZCChallengeInvite::set_opposites(int index, const char* value, size_t size) {
  opposites_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgZCChallengeInvite.opposites)
}
 ::std::string* MsgZCChallengeInvite::add_opposites() {
  // @@protoc_insertion_point(field_add_mutable:proto3.MsgZCChallengeInvite.opposites)
  return opposites_.Add();
}
 void MsgZCChallengeInvite::add_opposites(const ::std::string& value) {
  opposites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto3.MsgZCChallengeInvite.opposites)
}
 void MsgZCChallengeInvite::add_opposites(const char* value) {
  opposites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto3.MsgZCChallengeInvite.opposites)
}
 void MsgZCChallengeInvite::add_opposites(const char* value, size_t size) {
  opposites_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto3.MsgZCChallengeInvite.opposites)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgZCChallengeInvite::opposites() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZCChallengeInvite.opposites)
  return opposites_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgZCChallengeInvite::mutable_opposites() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZCChallengeInvite.opposites)
  return &opposites_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZChallengeAgree::kMidFieldNumber;
const int MsgCZChallengeAgree::kChallengersFieldNumber;
const int MsgCZChallengeAgree::kOppositesFieldNumber;
const int MsgCZChallengeAgree::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZChallengeAgree::MsgCZChallengeAgree()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZChallengeAgree)
}

void MsgCZChallengeAgree::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCZChallengeAgree::MsgCZChallengeAgree(const MsgCZChallengeAgree& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZChallengeAgree)
}

void MsgCZChallengeAgree::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
  opposites_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

MsgCZChallengeAgree::~MsgCZChallengeAgree() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZChallengeAgree)
  SharedDtor();
}

void MsgCZChallengeAgree::SharedDtor() {
  opposites_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCZChallengeAgree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZChallengeAgree& MsgCZChallengeAgree::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZChallengeAgree* MsgCZChallengeAgree::default_instance_ = NULL;

MsgCZChallengeAgree* MsgCZChallengeAgree::New(::google::protobuf::Arena* arena) const {
  MsgCZChallengeAgree* n = new MsgCZChallengeAgree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZChallengeAgree::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZChallengeAgree)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZChallengeAgree, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZChallengeAgree*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  opposites_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  challengers_.Clear();
}

bool MsgCZChallengeAgree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZChallengeAgree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_challengers;
        break;
      }

      // repeated string challengers = 2;
      case 2: {
        if (tag == 18) {
         parse_challengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_challengers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->challengers(this->challengers_size() - 1).data(),
            this->challengers(this->challengers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCZChallengeAgree.challengers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_challengers;
        if (input->ExpectTag(26)) goto parse_opposites;
        break;
      }

      // optional string opposites = 3;
      case 3: {
        if (tag == 26) {
         parse_opposites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opposites()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opposites().data(), this->opposites().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCZChallengeAgree.opposites"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZChallengeAgree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZChallengeAgree)
  return false;
#undef DO_
}

void MsgCZChallengeAgree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZChallengeAgree)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // repeated string challengers = 2;
  for (int i = 0; i < this->challengers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->challengers(i).data(), this->challengers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCZChallengeAgree.challengers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->challengers(i), output);
  }

  // optional string opposites = 3;
  if (this->opposites().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opposites().data(), this->opposites().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCZChallengeAgree.opposites");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->opposites(), output);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZChallengeAgree)
}

int MsgCZChallengeAgree::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZChallengeAgree)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional string opposites = 3;
  if (this->opposites().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opposites());
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated string challengers = 2;
  total_size += 1 * this->challengers_size();
  for (int i = 0; i < this->challengers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->challengers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZChallengeAgree::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZChallengeAgree*>(&from));
}

void MsgCZChallengeAgree::MergeFrom(const MsgCZChallengeAgree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZChallengeAgree)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  challengers_.MergeFrom(from.challengers_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.opposites().size() > 0) {

    opposites_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opposites_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgCZChallengeAgree::CopyFrom(const MsgCZChallengeAgree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZChallengeAgree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZChallengeAgree::IsInitialized() const {

  return true;
}

void MsgCZChallengeAgree::Swap(MsgCZChallengeAgree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZChallengeAgree::InternalSwap(MsgCZChallengeAgree* other) {
  std::swap(mid_, other->mid_);
  challengers_.UnsafeArenaSwap(&other->challengers_);
  opposites_.Swap(&other->opposites_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZChallengeAgree::GetTypeName() const {
  return "proto3.MsgCZChallengeAgree";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZChallengeAgree

// optional uint32 mid = 1;
void MsgCZChallengeAgree::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZChallengeAgree::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZChallengeAgree.mid)
  return mid_;
}
 void MsgCZChallengeAgree::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZChallengeAgree.mid)
}

// repeated string challengers = 2;
int MsgCZChallengeAgree::challengers_size() const {
  return challengers_.size();
}
void MsgCZChallengeAgree::clear_challengers() {
  challengers_.Clear();
}
 const ::std::string& MsgCZChallengeAgree::challengers(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZChallengeAgree.challengers)
  return challengers_.Get(index);
}
 ::std::string* MsgCZChallengeAgree::mutable_challengers(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZChallengeAgree.challengers)
  return challengers_.Mutable(index);
}
 void MsgCZChallengeAgree::set_challengers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto3.MsgCZChallengeAgree.challengers)
  challengers_.Mutable(index)->assign(value);
}
 void MsgCZChallengeAgree::set_challengers(int index, const char* value) {
  challengers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto3.MsgCZChallengeAgree.challengers)
}
 void MsgCZChallengeAgree::set_challengers(int index, const char* value, size_t size) {
  challengers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCZChallengeAgree.challengers)
}
 ::std::string* MsgCZChallengeAgree::add_challengers() {
  // @@protoc_insertion_point(field_add_mutable:proto3.MsgCZChallengeAgree.challengers)
  return challengers_.Add();
}
 void MsgCZChallengeAgree::add_challengers(const ::std::string& value) {
  challengers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto3.MsgCZChallengeAgree.challengers)
}
 void MsgCZChallengeAgree::add_challengers(const char* value) {
  challengers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto3.MsgCZChallengeAgree.challengers)
}
 void MsgCZChallengeAgree::add_challengers(const char* value, size_t size) {
  challengers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto3.MsgCZChallengeAgree.challengers)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgCZChallengeAgree::challengers() const {
  // @@protoc_insertion_point(field_list:proto3.MsgCZChallengeAgree.challengers)
  return challengers_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgCZChallengeAgree::mutable_challengers() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgCZChallengeAgree.challengers)
  return &challengers_;
}

// optional string opposites = 3;
void MsgCZChallengeAgree::clear_opposites() {
  opposites_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCZChallengeAgree::opposites() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZChallengeAgree.opposites)
  return opposites_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCZChallengeAgree::set_opposites(const ::std::string& value) {
  
  opposites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCZChallengeAgree.opposites)
}
 void MsgCZChallengeAgree::set_opposites(const char* value) {
  
  opposites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCZChallengeAgree.opposites)
}
 void MsgCZChallengeAgree::set_opposites(const char* value, size_t size) {
  
  opposites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCZChallengeAgree.opposites)
}
 ::std::string* MsgCZChallengeAgree::mutable_opposites() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZChallengeAgree.opposites)
  return opposites_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCZChallengeAgree::release_opposites() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZChallengeAgree.opposites)
  
  return opposites_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCZChallengeAgree::set_allocated_opposites(::std::string* opposites) {
  if (opposites != NULL) {
    
  } else {
    
  }
  opposites_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opposites);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZChallengeAgree.opposites)
}

// optional .proto3.eResult result = 4;
void MsgCZChallengeAgree::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgCZChallengeAgree::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZChallengeAgree.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgCZChallengeAgree::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZChallengeAgree.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCChallengeStart::kMidFieldNumber;
const int MsgZCChallengeStart::kChallengersFieldNumber;
const int MsgZCChallengeStart::kOppositesFieldNumber;
const int MsgZCChallengeStart::kNmapidFieldNumber;
const int MsgZCChallengeStart::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCChallengeStart::MsgZCChallengeStart()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCChallengeStart)
}

void MsgZCChallengeStart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCChallengeStart::MsgZCChallengeStart(const MsgZCChallengeStart& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCChallengeStart)
}

void MsgZCChallengeStart::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
  nmapid_ = 0u;
  result_ = 0;
}

MsgZCChallengeStart::~MsgZCChallengeStart() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCChallengeStart)
  SharedDtor();
}

void MsgZCChallengeStart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCChallengeStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCChallengeStart& MsgZCChallengeStart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCChallengeStart* MsgZCChallengeStart::default_instance_ = NULL;

MsgZCChallengeStart* MsgZCChallengeStart::New(::google::protobuf::Arena* arena) const {
  MsgZCChallengeStart* n = new MsgZCChallengeStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCChallengeStart::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCChallengeStart)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCChallengeStart, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCChallengeStart*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, nmapid_);
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

  challengers_.Clear();
  opposites_.Clear();
}

bool MsgZCChallengeStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCChallengeStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_challengers;
        break;
      }

      // repeated string challengers = 2;
      case 2: {
        if (tag == 18) {
         parse_challengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_challengers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->challengers(this->challengers_size() - 1).data(),
            this->challengers(this->challengers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgZCChallengeStart.challengers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_challengers;
        if (input->ExpectTag(26)) goto parse_opposites;
        break;
      }

      // repeated string opposites = 3;
      case 3: {
        if (tag == 26) {
         parse_opposites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_opposites()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opposites(this->opposites_size() - 1).data(),
            this->opposites(this->opposites_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgZCChallengeStart.opposites"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_opposites;
        if (input->ExpectTag(32)) goto parse_nmapid;
        break;
      }

      // optional uint32 nmapid = 4;
      case 4: {
        if (tag == 32) {
         parse_nmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmapid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCChallengeStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCChallengeStart)
  return false;
#undef DO_
}

void MsgZCChallengeStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCChallengeStart)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // repeated string challengers = 2;
  for (int i = 0; i < this->challengers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->challengers(i).data(), this->challengers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgZCChallengeStart.challengers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->challengers(i), output);
  }

  // repeated string opposites = 3;
  for (int i = 0; i < this->opposites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opposites(i).data(), this->opposites(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgZCChallengeStart.opposites");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opposites(i), output);
  }

  // optional uint32 nmapid = 4;
  if (this->nmapid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nmapid(), output);
  }

  // optional .proto3.eResult result = 5;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCChallengeStart)
}

int MsgZCChallengeStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCChallengeStart)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 nmapid = 4;
  if (this->nmapid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nmapid());
  }

  // optional .proto3.eResult result = 5;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated string challengers = 2;
  total_size += 1 * this->challengers_size();
  for (int i = 0; i < this->challengers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->challengers(i));
  }

  // repeated string opposites = 3;
  total_size += 1 * this->opposites_size();
  for (int i = 0; i < this->opposites_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->opposites(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCChallengeStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCChallengeStart*>(&from));
}

void MsgZCChallengeStart::MergeFrom(const MsgZCChallengeStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCChallengeStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  challengers_.MergeFrom(from.challengers_);
  opposites_.MergeFrom(from.opposites_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.nmapid() != 0) {
    set_nmapid(from.nmapid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCChallengeStart::CopyFrom(const MsgZCChallengeStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCChallengeStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCChallengeStart::IsInitialized() const {

  return true;
}

void MsgZCChallengeStart::Swap(MsgZCChallengeStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCChallengeStart::InternalSwap(MsgZCChallengeStart* other) {
  std::swap(mid_, other->mid_);
  challengers_.UnsafeArenaSwap(&other->challengers_);
  opposites_.UnsafeArenaSwap(&other->opposites_);
  std::swap(nmapid_, other->nmapid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCChallengeStart::GetTypeName() const {
  return "proto3.MsgZCChallengeStart";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCChallengeStart

// optional uint32 mid = 1;
void MsgZCChallengeStart::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCChallengeStart::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCChallengeStart.mid)
  return mid_;
}
 void MsgZCChallengeStart::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCChallengeStart.mid)
}

// repeated string challengers = 2;
int MsgZCChallengeStart::challengers_size() const {
  return challengers_.size();
}
void MsgZCChallengeStart::clear_challengers() {
  challengers_.Clear();
}
 const ::std::string& MsgZCChallengeStart::challengers(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCChallengeStart.challengers)
  return challengers_.Get(index);
}
 ::std::string* MsgZCChallengeStart::mutable_challengers(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCChallengeStart.challengers)
  return challengers_.Mutable(index);
}
 void MsgZCChallengeStart::set_challengers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto3.MsgZCChallengeStart.challengers)
  challengers_.Mutable(index)->assign(value);
}
 void MsgZCChallengeStart::set_challengers(int index, const char* value) {
  challengers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto3.MsgZCChallengeStart.challengers)
}
 void MsgZCChallengeStart::set_challengers(int index, const char* value, size_t size) {
  challengers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgZCChallengeStart.challengers)
}
 ::std::string* MsgZCChallengeStart::add_challengers() {
  // @@protoc_insertion_point(field_add_mutable:proto3.MsgZCChallengeStart.challengers)
  return challengers_.Add();
}
 void MsgZCChallengeStart::add_challengers(const ::std::string& value) {
  challengers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto3.MsgZCChallengeStart.challengers)
}
 void MsgZCChallengeStart::add_challengers(const char* value) {
  challengers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto3.MsgZCChallengeStart.challengers)
}
 void MsgZCChallengeStart::add_challengers(const char* value, size_t size) {
  challengers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto3.MsgZCChallengeStart.challengers)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgZCChallengeStart::challengers() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZCChallengeStart.challengers)
  return challengers_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgZCChallengeStart::mutable_challengers() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZCChallengeStart.challengers)
  return &challengers_;
}

// repeated string opposites = 3;
int MsgZCChallengeStart::opposites_size() const {
  return opposites_.size();
}
void MsgZCChallengeStart::clear_opposites() {
  opposites_.Clear();
}
 const ::std::string& MsgZCChallengeStart::opposites(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCChallengeStart.opposites)
  return opposites_.Get(index);
}
 ::std::string* MsgZCChallengeStart::mutable_opposites(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCChallengeStart.opposites)
  return opposites_.Mutable(index);
}
 void MsgZCChallengeStart::set_opposites(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto3.MsgZCChallengeStart.opposites)
  opposites_.Mutable(index)->assign(value);
}
 void MsgZCChallengeStart::set_opposites(int index, const char* value) {
  opposites_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto3.MsgZCChallengeStart.opposites)
}
 void MsgZCChallengeStart::set_opposites(int index, const char* value, size_t size) {
  opposites_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgZCChallengeStart.opposites)
}
 ::std::string* MsgZCChallengeStart::add_opposites() {
  // @@protoc_insertion_point(field_add_mutable:proto3.MsgZCChallengeStart.opposites)
  return opposites_.Add();
}
 void MsgZCChallengeStart::add_opposites(const ::std::string& value) {
  opposites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto3.MsgZCChallengeStart.opposites)
}
 void MsgZCChallengeStart::add_opposites(const char* value) {
  opposites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto3.MsgZCChallengeStart.opposites)
}
 void MsgZCChallengeStart::add_opposites(const char* value, size_t size) {
  opposites_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto3.MsgZCChallengeStart.opposites)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgZCChallengeStart::opposites() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZCChallengeStart.opposites)
  return opposites_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgZCChallengeStart::mutable_opposites() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZCChallengeStart.opposites)
  return &opposites_;
}

// optional uint32 nmapid = 4;
void MsgZCChallengeStart::clear_nmapid() {
  nmapid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCChallengeStart::nmapid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCChallengeStart.nmapid)
  return nmapid_;
}
 void MsgZCChallengeStart::set_nmapid(::google::protobuf::uint32 value) {
  
  nmapid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCChallengeStart.nmapid)
}

// optional .proto3.eResult result = 5;
void MsgZCChallengeStart::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCChallengeStart::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCChallengeStart.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCChallengeStart::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCChallengeStart.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCTeamBroadcast::kMidFieldNumber;
const int MsgZCTeamBroadcast::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCTeamBroadcast::MsgZCTeamBroadcast()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCTeamBroadcast)
}

void MsgZCTeamBroadcast::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZCTeamBroadcast::MsgZCTeamBroadcast(const MsgZCTeamBroadcast& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCTeamBroadcast)
}

void MsgZCTeamBroadcast::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
}

MsgZCTeamBroadcast::~MsgZCTeamBroadcast() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCTeamBroadcast)
  SharedDtor();
}

void MsgZCTeamBroadcast::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZCTeamBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCTeamBroadcast& MsgZCTeamBroadcast::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCTeamBroadcast* MsgZCTeamBroadcast::default_instance_ = NULL;

MsgZCTeamBroadcast* MsgZCTeamBroadcast::New(::google::protobuf::Arena* arena) const {
  MsgZCTeamBroadcast* n = new MsgZCTeamBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCTeamBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCTeamBroadcast)
  mid_ = 0u;
  team_.Clear();
}

bool MsgZCTeamBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCTeamBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // repeated .proto3.TeamInfo team = 2;
      case 2: {
        if (tag == 18) {
         parse_team:
          DO_(input->IncrementRecursionDepth());
         parse_loop_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_team;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCTeamBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCTeamBroadcast)
  return false;
#undef DO_
}

void MsgZCTeamBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCTeamBroadcast)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // repeated .proto3.TeamInfo team = 2;
  for (unsigned int i = 0, n = this->team_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->team(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCTeamBroadcast)
}

int MsgZCTeamBroadcast::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCTeamBroadcast)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // repeated .proto3.TeamInfo team = 2;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCTeamBroadcast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCTeamBroadcast*>(&from));
}

void MsgZCTeamBroadcast::MergeFrom(const MsgZCTeamBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCTeamBroadcast)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  team_.MergeFrom(from.team_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgZCTeamBroadcast::CopyFrom(const MsgZCTeamBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCTeamBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCTeamBroadcast::IsInitialized() const {

  return true;
}

void MsgZCTeamBroadcast::Swap(MsgZCTeamBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCTeamBroadcast::InternalSwap(MsgZCTeamBroadcast* other) {
  std::swap(mid_, other->mid_);
  team_.UnsafeArenaSwap(&other->team_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCTeamBroadcast::GetTypeName() const {
  return "proto3.MsgZCTeamBroadcast";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCTeamBroadcast

// optional uint32 mid = 1;
void MsgZCTeamBroadcast::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCTeamBroadcast::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamBroadcast.mid)
  return mid_;
}
 void MsgZCTeamBroadcast::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCTeamBroadcast.mid)
}

// repeated .proto3.TeamInfo team = 2;
int MsgZCTeamBroadcast::team_size() const {
  return team_.size();
}
void MsgZCTeamBroadcast::clear_team() {
  team_.Clear();
}
const ::proto3::TeamInfo& MsgZCTeamBroadcast::team(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamBroadcast.team)
  return team_.Get(index);
}
::proto3::TeamInfo* MsgZCTeamBroadcast::mutable_team(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCTeamBroadcast.team)
  return team_.Mutable(index);
}
::proto3::TeamInfo* MsgZCTeamBroadcast::add_team() {
  // @@protoc_insertion_point(field_add:proto3.MsgZCTeamBroadcast.team)
  return team_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::TeamInfo >*
MsgZCTeamBroadcast::mutable_team() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZCTeamBroadcast.team)
  return &team_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::TeamInfo >&
MsgZCTeamBroadcast::team() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZCTeamBroadcast.team)
  return team_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamCreate::kMidFieldNumber;
const int MsgCZTeamCreate::kReasonFieldNumber;
const int MsgCZTeamCreate::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamCreate::MsgCZTeamCreate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamCreate)
}

void MsgCZTeamCreate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgCZTeamCreate::MsgCZTeamCreate(const MsgCZTeamCreate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamCreate)
}

void MsgCZTeamCreate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  reason_ = 0u;
  team_ = NULL;
}

MsgCZTeamCreate::~MsgCZTeamCreate() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamCreate)
  SharedDtor();
}

void MsgCZTeamCreate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgCZTeamCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamCreate& MsgCZTeamCreate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamCreate* MsgCZTeamCreate::default_instance_ = NULL;

MsgCZTeamCreate* MsgCZTeamCreate::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamCreate* n = new MsgCZTeamCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamCreate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZTeamCreate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZTeamCreate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, reason_);
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZTeamCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 3;
      case 3: {
        if (tag == 26) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamCreate)
  return false;
#undef DO_
}

void MsgCZTeamCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamCreate)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->team_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamCreate)
}

int MsgCZTeamCreate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamCreate)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reason());
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamCreate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamCreate*>(&from));
}

void MsgCZTeamCreate::MergeFrom(const MsgCZTeamCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
}

void MsgCZTeamCreate::CopyFrom(const MsgCZTeamCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamCreate::IsInitialized() const {

  return true;
}

void MsgCZTeamCreate::Swap(MsgCZTeamCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamCreate::InternalSwap(MsgCZTeamCreate* other) {
  std::swap(mid_, other->mid_);
  std::swap(reason_, other->reason_);
  std::swap(team_, other->team_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamCreate::GetTypeName() const {
  return "proto3.MsgCZTeamCreate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamCreate

// optional uint32 mid = 1;
void MsgCZTeamCreate::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamCreate::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamCreate.mid)
  return mid_;
}
 void MsgCZTeamCreate::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamCreate.mid)
}

// optional uint32 reason = 2;
void MsgCZTeamCreate::clear_reason() {
  reason_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamCreate::reason() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamCreate.reason)
  return reason_;
}
 void MsgCZTeamCreate::set_reason(::google::protobuf::uint32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamCreate.reason)
}

// optional .proto3.TeamInfo team = 3;
bool MsgCZTeamCreate::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgCZTeamCreate::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgCZTeamCreate::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamCreate.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgCZTeamCreate::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamCreate.team)
  return team_;
}
::proto3::TeamInfo* MsgCZTeamCreate::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamCreate.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgCZTeamCreate::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamCreate.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamEdit::kMidFieldNumber;
const int MsgCZTeamEdit::kReasonFieldNumber;
const int MsgCZTeamEdit::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamEdit::MsgCZTeamEdit()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamEdit)
}

void MsgCZTeamEdit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgCZTeamEdit::MsgCZTeamEdit(const MsgCZTeamEdit& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamEdit)
}

void MsgCZTeamEdit::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  reason_ = 0u;
  team_ = NULL;
}

MsgCZTeamEdit::~MsgCZTeamEdit() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamEdit)
  SharedDtor();
}

void MsgCZTeamEdit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgCZTeamEdit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamEdit& MsgCZTeamEdit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamEdit* MsgCZTeamEdit::default_instance_ = NULL;

MsgCZTeamEdit* MsgCZTeamEdit::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamEdit* n = new MsgCZTeamEdit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamEdit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZTeamEdit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZTeamEdit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, reason_);
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZTeamEdit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamEdit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 3;
      case 3: {
        if (tag == 26) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamEdit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamEdit)
  return false;
#undef DO_
}

void MsgCZTeamEdit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamEdit)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->team_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamEdit)
}

int MsgCZTeamEdit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamEdit)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reason());
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamEdit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamEdit*>(&from));
}

void MsgCZTeamEdit::MergeFrom(const MsgCZTeamEdit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamEdit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
}

void MsgCZTeamEdit::CopyFrom(const MsgCZTeamEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamEdit::IsInitialized() const {

  return true;
}

void MsgCZTeamEdit::Swap(MsgCZTeamEdit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamEdit::InternalSwap(MsgCZTeamEdit* other) {
  std::swap(mid_, other->mid_);
  std::swap(reason_, other->reason_);
  std::swap(team_, other->team_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamEdit::GetTypeName() const {
  return "proto3.MsgCZTeamEdit";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamEdit

// optional uint32 mid = 1;
void MsgCZTeamEdit::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamEdit::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamEdit.mid)
  return mid_;
}
 void MsgCZTeamEdit::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamEdit.mid)
}

// optional uint32 reason = 2;
void MsgCZTeamEdit::clear_reason() {
  reason_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamEdit::reason() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamEdit.reason)
  return reason_;
}
 void MsgCZTeamEdit::set_reason(::google::protobuf::uint32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamEdit.reason)
}

// optional .proto3.TeamInfo team = 3;
bool MsgCZTeamEdit::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgCZTeamEdit::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgCZTeamEdit::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamEdit.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgCZTeamEdit::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamEdit.team)
  return team_;
}
::proto3::TeamInfo* MsgCZTeamEdit::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamEdit.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgCZTeamEdit::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamEdit.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCTeamUpdate::kMidFieldNumber;
const int MsgZCTeamUpdate::kTeamFieldNumber;
const int MsgZCTeamUpdate::kOpFieldNumber;
const int MsgZCTeamUpdate::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCTeamUpdate::MsgZCTeamUpdate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCTeamUpdate)
}

void MsgZCTeamUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgZCTeamUpdate::MsgZCTeamUpdate(const MsgZCTeamUpdate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCTeamUpdate)
}

void MsgZCTeamUpdate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  team_ = NULL;
  op_ = 0;
  result_ = 0;
}

MsgZCTeamUpdate::~MsgZCTeamUpdate() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCTeamUpdate)
  SharedDtor();
}

void MsgZCTeamUpdate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgZCTeamUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCTeamUpdate& MsgZCTeamUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCTeamUpdate* MsgZCTeamUpdate::default_instance_ = NULL;

MsgZCTeamUpdate* MsgZCTeamUpdate::New(::google::protobuf::Arena* arena) const {
  MsgZCTeamUpdate* n = new MsgZCTeamUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCTeamUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCTeamUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZCTeamUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZCTeamUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZCTeamUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCTeamUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 2;
      case 2: {
        if (tag == 18) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // optional .proto3.eTeamOp op = 3;
      case 3: {
        if (tag == 24) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::proto3::eTeamOp >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCTeamUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCTeamUpdate)
  return false;
#undef DO_
}

void MsgZCTeamUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCTeamUpdate)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->team_, output);
  }

  // optional .proto3.eTeamOp op = 3;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCTeamUpdate)
}

int MsgZCTeamUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCTeamUpdate)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  // optional .proto3.eTeamOp op = 3;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // optional .proto3.eResult result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCTeamUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCTeamUpdate*>(&from));
}

void MsgZCTeamUpdate::MergeFrom(const MsgZCTeamUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCTeamUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZCTeamUpdate::CopyFrom(const MsgZCTeamUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCTeamUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCTeamUpdate::IsInitialized() const {

  return true;
}

void MsgZCTeamUpdate::Swap(MsgZCTeamUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCTeamUpdate::InternalSwap(MsgZCTeamUpdate* other) {
  std::swap(mid_, other->mid_);
  std::swap(team_, other->team_);
  std::swap(op_, other->op_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCTeamUpdate::GetTypeName() const {
  return "proto3.MsgZCTeamUpdate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCTeamUpdate

// optional uint32 mid = 1;
void MsgZCTeamUpdate::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCTeamUpdate::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamUpdate.mid)
  return mid_;
}
 void MsgZCTeamUpdate::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCTeamUpdate.mid)
}

// optional .proto3.TeamInfo team = 2;
bool MsgZCTeamUpdate::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgZCTeamUpdate::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgZCTeamUpdate::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamUpdate.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgZCTeamUpdate::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCTeamUpdate.team)
  return team_;
}
::proto3::TeamInfo* MsgZCTeamUpdate::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCTeamUpdate.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgZCTeamUpdate::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCTeamUpdate.team)
}

// optional .proto3.eTeamOp op = 3;
void MsgZCTeamUpdate::clear_op() {
  op_ = 0;
}
 ::proto3::eTeamOp MsgZCTeamUpdate::op() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamUpdate.op)
  return static_cast< ::proto3::eTeamOp >(op_);
}
 void MsgZCTeamUpdate::set_op(::proto3::eTeamOp value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCTeamUpdate.op)
}

// optional .proto3.eResult result = 4;
void MsgZCTeamUpdate::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZCTeamUpdate::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamUpdate.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZCTeamUpdate::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCTeamUpdate.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamDismiss::kMidFieldNumber;
const int MsgCZTeamDismiss::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamDismiss::MsgCZTeamDismiss()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamDismiss)
}

void MsgCZTeamDismiss::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgCZTeamDismiss::MsgCZTeamDismiss(const MsgCZTeamDismiss& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamDismiss)
}

void MsgCZTeamDismiss::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  team_ = NULL;
}

MsgCZTeamDismiss::~MsgCZTeamDismiss() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamDismiss)
  SharedDtor();
}

void MsgCZTeamDismiss::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgCZTeamDismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamDismiss& MsgCZTeamDismiss::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamDismiss* MsgCZTeamDismiss::default_instance_ = NULL;

MsgCZTeamDismiss* MsgCZTeamDismiss::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamDismiss* n = new MsgCZTeamDismiss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamDismiss::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamDismiss)
  mid_ = 0u;
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}

bool MsgCZTeamDismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamDismiss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 3;
      case 3: {
        if (tag == 26) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamDismiss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamDismiss)
  return false;
#undef DO_
}

void MsgCZTeamDismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamDismiss)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->team_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamDismiss)
}

int MsgCZTeamDismiss::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamDismiss)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamDismiss::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamDismiss*>(&from));
}

void MsgCZTeamDismiss::MergeFrom(const MsgCZTeamDismiss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamDismiss)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
}

void MsgCZTeamDismiss::CopyFrom(const MsgCZTeamDismiss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamDismiss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamDismiss::IsInitialized() const {

  return true;
}

void MsgCZTeamDismiss::Swap(MsgCZTeamDismiss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamDismiss::InternalSwap(MsgCZTeamDismiss* other) {
  std::swap(mid_, other->mid_);
  std::swap(team_, other->team_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamDismiss::GetTypeName() const {
  return "proto3.MsgCZTeamDismiss";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamDismiss

// optional uint32 mid = 1;
void MsgCZTeamDismiss::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamDismiss::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamDismiss.mid)
  return mid_;
}
 void MsgCZTeamDismiss::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamDismiss.mid)
}

// optional .proto3.TeamInfo team = 3;
bool MsgCZTeamDismiss::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgCZTeamDismiss::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgCZTeamDismiss::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamDismiss.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgCZTeamDismiss::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamDismiss.team)
  return team_;
}
::proto3::TeamInfo* MsgCZTeamDismiss::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamDismiss.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgCZTeamDismiss::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamDismiss.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamKick::kMidFieldNumber;
const int MsgCZTeamKick::kTeamFieldNumber;
const int MsgCZTeamKick::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamKick::MsgCZTeamKick()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamKick)
}

void MsgCZTeamKick::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  targets_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  targets_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
}

MsgCZTeamKick::MsgCZTeamKick(const MsgCZTeamKick& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamKick)
}

void MsgCZTeamKick::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  team_ = NULL;
  targets_ = NULL;
}

MsgCZTeamKick::~MsgCZTeamKick() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamKick)
  SharedDtor();
}

void MsgCZTeamKick::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
    delete targets_;
  }
}

void MsgCZTeamKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamKick& MsgCZTeamKick::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamKick* MsgCZTeamKick::default_instance_ = NULL;

MsgCZTeamKick* MsgCZTeamKick::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamKick* n = new MsgCZTeamKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamKick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamKick)
  mid_ = 0u;
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
  if (GetArenaNoVirtual() == NULL && targets_ != NULL) delete targets_;
  targets_ = NULL;
}

bool MsgCZTeamKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 3;
      case 3: {
        if (tag == 26) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targets;
        break;
      }

      // optional .proto3.PlayerInfo targets = 4;
      case 4: {
        if (tag == 34) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamKick)
  return false;
#undef DO_
}

void MsgCZTeamKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamKick)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->team_, output);
  }

  // optional .proto3.PlayerInfo targets = 4;
  if (this->has_targets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->targets_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamKick)
}

int MsgCZTeamKick::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamKick)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  // optional .proto3.PlayerInfo targets = 4;
  if (this->has_targets()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->targets_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamKick::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamKick*>(&from));
}

void MsgCZTeamKick::MergeFrom(const MsgCZTeamKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamKick)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
  if (from.has_targets()) {
    mutable_targets()->::proto3::PlayerInfo::MergeFrom(from.targets());
  }
}

void MsgCZTeamKick::CopyFrom(const MsgCZTeamKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamKick::IsInitialized() const {

  return true;
}

void MsgCZTeamKick::Swap(MsgCZTeamKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamKick::InternalSwap(MsgCZTeamKick* other) {
  std::swap(mid_, other->mid_);
  std::swap(team_, other->team_);
  std::swap(targets_, other->targets_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamKick::GetTypeName() const {
  return "proto3.MsgCZTeamKick";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamKick

// optional uint32 mid = 1;
void MsgCZTeamKick::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamKick::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamKick.mid)
  return mid_;
}
 void MsgCZTeamKick::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamKick.mid)
}

// optional .proto3.TeamInfo team = 3;
bool MsgCZTeamKick::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgCZTeamKick::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgCZTeamKick::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamKick.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgCZTeamKick::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamKick.team)
  return team_;
}
::proto3::TeamInfo* MsgCZTeamKick::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamKick.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgCZTeamKick::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamKick.team)
}

// optional .proto3.PlayerInfo targets = 4;
bool MsgCZTeamKick::has_targets() const {
  return !_is_default_instance_ && targets_ != NULL;
}
void MsgCZTeamKick::clear_targets() {
  if (GetArenaNoVirtual() == NULL && targets_ != NULL) delete targets_;
  targets_ = NULL;
}
const ::proto3::PlayerInfo& MsgCZTeamKick::targets() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamKick.targets)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return targets_ != NULL ? *targets_ : *default_instance().targets_;
#else
  return targets_ != NULL ? *targets_ : *default_instance_->targets_;
#endif
}
::proto3::PlayerInfo* MsgCZTeamKick::mutable_targets() {
  
  if (targets_ == NULL) {
    targets_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamKick.targets)
  return targets_;
}
::proto3::PlayerInfo* MsgCZTeamKick::release_targets() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamKick.targets)
  
  ::proto3::PlayerInfo* temp = targets_;
  targets_ = NULL;
  return temp;
}
void MsgCZTeamKick::set_allocated_targets(::proto3::PlayerInfo* targets) {
  delete targets_;
  targets_ = targets;
  if (targets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamKick.targets)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamLeave::kMidFieldNumber;
const int MsgCZTeamLeave::kReasonFieldNumber;
const int MsgCZTeamLeave::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamLeave::MsgCZTeamLeave()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamLeave)
}

void MsgCZTeamLeave::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgCZTeamLeave::MsgCZTeamLeave(const MsgCZTeamLeave& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamLeave)
}

void MsgCZTeamLeave::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  reason_ = 0u;
  team_ = NULL;
}

MsgCZTeamLeave::~MsgCZTeamLeave() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamLeave)
  SharedDtor();
}

void MsgCZTeamLeave::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgCZTeamLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamLeave& MsgCZTeamLeave::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamLeave* MsgCZTeamLeave::default_instance_ = NULL;

MsgCZTeamLeave* MsgCZTeamLeave::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamLeave* n = new MsgCZTeamLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamLeave)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZTeamLeave, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZTeamLeave*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, reason_);
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZTeamLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 3;
      case 3: {
        if (tag == 26) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamLeave)
  return false;
#undef DO_
}

void MsgCZTeamLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamLeave)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->team_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamLeave)
}

int MsgCZTeamLeave::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamLeave)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reason());
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamLeave::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamLeave*>(&from));
}

void MsgCZTeamLeave::MergeFrom(const MsgCZTeamLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamLeave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
}

void MsgCZTeamLeave::CopyFrom(const MsgCZTeamLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamLeave::IsInitialized() const {

  return true;
}

void MsgCZTeamLeave::Swap(MsgCZTeamLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamLeave::InternalSwap(MsgCZTeamLeave* other) {
  std::swap(mid_, other->mid_);
  std::swap(reason_, other->reason_);
  std::swap(team_, other->team_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamLeave::GetTypeName() const {
  return "proto3.MsgCZTeamLeave";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamLeave

// optional uint32 mid = 1;
void MsgCZTeamLeave::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamLeave::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamLeave.mid)
  return mid_;
}
 void MsgCZTeamLeave::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamLeave.mid)
}

// optional uint32 reason = 2;
void MsgCZTeamLeave::clear_reason() {
  reason_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamLeave::reason() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamLeave.reason)
  return reason_;
}
 void MsgCZTeamLeave::set_reason(::google::protobuf::uint32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamLeave.reason)
}

// optional .proto3.TeamInfo team = 3;
bool MsgCZTeamLeave::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgCZTeamLeave::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgCZTeamLeave::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamLeave.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgCZTeamLeave::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamLeave.team)
  return team_;
}
::proto3::TeamInfo* MsgCZTeamLeave::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamLeave.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgCZTeamLeave::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamLeave.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamRecruitStart::kMidFieldNumber;
const int MsgCZTeamRecruitStart::kReasonFieldNumber;
const int MsgCZTeamRecruitStart::kTeamFieldNumber;
const int MsgCZTeamRecruitStart::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamRecruitStart::MsgCZTeamRecruitStart()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamRecruitStart)
}

void MsgCZTeamRecruitStart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgCZTeamRecruitStart::MsgCZTeamRecruitStart(const MsgCZTeamRecruitStart& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamRecruitStart)
}

void MsgCZTeamRecruitStart::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  reason_ = 0u;
  team_ = NULL;
}

MsgCZTeamRecruitStart::~MsgCZTeamRecruitStart() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamRecruitStart)
  SharedDtor();
}

void MsgCZTeamRecruitStart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgCZTeamRecruitStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamRecruitStart& MsgCZTeamRecruitStart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamRecruitStart* MsgCZTeamRecruitStart::default_instance_ = NULL;

MsgCZTeamRecruitStart* MsgCZTeamRecruitStart::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamRecruitStart* n = new MsgCZTeamRecruitStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamRecruitStart::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamRecruitStart)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZTeamRecruitStart, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZTeamRecruitStart*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, reason_);
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  targets_.Clear();
}

bool MsgCZTeamRecruitStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamRecruitStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 3;
      case 3: {
        if (tag == 26) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targets;
        break;
      }

      // repeated .proto3.PlayerInfo targets = 4;
      case 4: {
        if (tag == 34) {
         parse_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamRecruitStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamRecruitStart)
  return false;
#undef DO_
}

void MsgCZTeamRecruitStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamRecruitStart)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->team_, output);
  }

  // repeated .proto3.PlayerInfo targets = 4;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->targets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamRecruitStart)
}

int MsgCZTeamRecruitStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamRecruitStart)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reason());
  }

  // optional .proto3.TeamInfo team = 3;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  // repeated .proto3.PlayerInfo targets = 4;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamRecruitStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamRecruitStart*>(&from));
}

void MsgCZTeamRecruitStart::MergeFrom(const MsgCZTeamRecruitStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamRecruitStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  targets_.MergeFrom(from.targets_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
}

void MsgCZTeamRecruitStart::CopyFrom(const MsgCZTeamRecruitStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamRecruitStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamRecruitStart::IsInitialized() const {

  return true;
}

void MsgCZTeamRecruitStart::Swap(MsgCZTeamRecruitStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamRecruitStart::InternalSwap(MsgCZTeamRecruitStart* other) {
  std::swap(mid_, other->mid_);
  std::swap(reason_, other->reason_);
  std::swap(team_, other->team_);
  targets_.UnsafeArenaSwap(&other->targets_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamRecruitStart::GetTypeName() const {
  return "proto3.MsgCZTeamRecruitStart";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamRecruitStart

// optional uint32 mid = 1;
void MsgCZTeamRecruitStart::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamRecruitStart::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamRecruitStart.mid)
  return mid_;
}
 void MsgCZTeamRecruitStart::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamRecruitStart.mid)
}

// optional uint32 reason = 2;
void MsgCZTeamRecruitStart::clear_reason() {
  reason_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamRecruitStart::reason() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamRecruitStart.reason)
  return reason_;
}
 void MsgCZTeamRecruitStart::set_reason(::google::protobuf::uint32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamRecruitStart.reason)
}

// optional .proto3.TeamInfo team = 3;
bool MsgCZTeamRecruitStart::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgCZTeamRecruitStart::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgCZTeamRecruitStart::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamRecruitStart.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgCZTeamRecruitStart::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamRecruitStart.team)
  return team_;
}
::proto3::TeamInfo* MsgCZTeamRecruitStart::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamRecruitStart.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgCZTeamRecruitStart::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamRecruitStart.team)
}

// repeated .proto3.PlayerInfo targets = 4;
int MsgCZTeamRecruitStart::targets_size() const {
  return targets_.size();
}
void MsgCZTeamRecruitStart::clear_targets() {
  targets_.Clear();
}
const ::proto3::PlayerInfo& MsgCZTeamRecruitStart::targets(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamRecruitStart.targets)
  return targets_.Get(index);
}
::proto3::PlayerInfo* MsgCZTeamRecruitStart::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamRecruitStart.targets)
  return targets_.Mutable(index);
}
::proto3::PlayerInfo* MsgCZTeamRecruitStart::add_targets() {
  // @@protoc_insertion_point(field_add:proto3.MsgCZTeamRecruitStart.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >*
MsgCZTeamRecruitStart::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgCZTeamRecruitStart.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::PlayerInfo >&
MsgCZTeamRecruitStart::targets() const {
  // @@protoc_insertion_point(field_list:proto3.MsgCZTeamRecruitStart.targets)
  return targets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCTeamRecruitAsk::kMidFieldNumber;
const int MsgZCTeamRecruitAsk::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCTeamRecruitAsk::MsgZCTeamRecruitAsk()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCTeamRecruitAsk)
}

void MsgZCTeamRecruitAsk::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgZCTeamRecruitAsk::MsgZCTeamRecruitAsk(const MsgZCTeamRecruitAsk& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCTeamRecruitAsk)
}

void MsgZCTeamRecruitAsk::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  team_ = NULL;
}

MsgZCTeamRecruitAsk::~MsgZCTeamRecruitAsk() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCTeamRecruitAsk)
  SharedDtor();
}

void MsgZCTeamRecruitAsk::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgZCTeamRecruitAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCTeamRecruitAsk& MsgZCTeamRecruitAsk::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCTeamRecruitAsk* MsgZCTeamRecruitAsk::default_instance_ = NULL;

MsgZCTeamRecruitAsk* MsgZCTeamRecruitAsk::New(::google::protobuf::Arena* arena) const {
  MsgZCTeamRecruitAsk* n = new MsgZCTeamRecruitAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCTeamRecruitAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCTeamRecruitAsk)
  mid_ = 0u;
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}

bool MsgZCTeamRecruitAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCTeamRecruitAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 2;
      case 2: {
        if (tag == 18) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCTeamRecruitAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCTeamRecruitAsk)
  return false;
#undef DO_
}

void MsgZCTeamRecruitAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCTeamRecruitAsk)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->team_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCTeamRecruitAsk)
}

int MsgZCTeamRecruitAsk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCTeamRecruitAsk)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCTeamRecruitAsk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCTeamRecruitAsk*>(&from));
}

void MsgZCTeamRecruitAsk::MergeFrom(const MsgZCTeamRecruitAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCTeamRecruitAsk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
}

void MsgZCTeamRecruitAsk::CopyFrom(const MsgZCTeamRecruitAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCTeamRecruitAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCTeamRecruitAsk::IsInitialized() const {

  return true;
}

void MsgZCTeamRecruitAsk::Swap(MsgZCTeamRecruitAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCTeamRecruitAsk::InternalSwap(MsgZCTeamRecruitAsk* other) {
  std::swap(mid_, other->mid_);
  std::swap(team_, other->team_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCTeamRecruitAsk::GetTypeName() const {
  return "proto3.MsgZCTeamRecruitAsk";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCTeamRecruitAsk

// optional uint32 mid = 1;
void MsgZCTeamRecruitAsk::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCTeamRecruitAsk::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamRecruitAsk.mid)
  return mid_;
}
 void MsgZCTeamRecruitAsk::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCTeamRecruitAsk.mid)
}

// optional .proto3.TeamInfo team = 2;
bool MsgZCTeamRecruitAsk::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgZCTeamRecruitAsk::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgZCTeamRecruitAsk::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamRecruitAsk.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgZCTeamRecruitAsk::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCTeamRecruitAsk.team)
  return team_;
}
::proto3::TeamInfo* MsgZCTeamRecruitAsk::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCTeamRecruitAsk.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgZCTeamRecruitAsk::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCTeamRecruitAsk.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamRecruitReply::kMidFieldNumber;
const int MsgCZTeamRecruitReply::kTeamFieldNumber;
const int MsgCZTeamRecruitReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamRecruitReply::MsgCZTeamRecruitReply()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamRecruitReply)
}

void MsgCZTeamRecruitReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgCZTeamRecruitReply::MsgCZTeamRecruitReply(const MsgCZTeamRecruitReply& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamRecruitReply)
}

void MsgCZTeamRecruitReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  team_ = NULL;
  result_ = 0;
}

MsgCZTeamRecruitReply::~MsgCZTeamRecruitReply() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamRecruitReply)
  SharedDtor();
}

void MsgCZTeamRecruitReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgCZTeamRecruitReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamRecruitReply& MsgCZTeamRecruitReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamRecruitReply* MsgCZTeamRecruitReply::default_instance_ = NULL;

MsgCZTeamRecruitReply* MsgCZTeamRecruitReply::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamRecruitReply* n = new MsgCZTeamRecruitReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamRecruitReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamRecruitReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZTeamRecruitReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZTeamRecruitReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZTeamRecruitReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamRecruitReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 2;
      case 2: {
        if (tag == 18) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamRecruitReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamRecruitReply)
  return false;
#undef DO_
}

void MsgCZTeamRecruitReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamRecruitReply)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->team_, output);
  }

  // optional .proto3.eResult result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamRecruitReply)
}

int MsgCZTeamRecruitReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamRecruitReply)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  // optional .proto3.eResult result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamRecruitReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamRecruitReply*>(&from));
}

void MsgCZTeamRecruitReply::MergeFrom(const MsgCZTeamRecruitReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamRecruitReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgCZTeamRecruitReply::CopyFrom(const MsgCZTeamRecruitReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamRecruitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamRecruitReply::IsInitialized() const {

  return true;
}

void MsgCZTeamRecruitReply::Swap(MsgCZTeamRecruitReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamRecruitReply::InternalSwap(MsgCZTeamRecruitReply* other) {
  std::swap(mid_, other->mid_);
  std::swap(team_, other->team_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamRecruitReply::GetTypeName() const {
  return "proto3.MsgCZTeamRecruitReply";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamRecruitReply

// optional uint32 mid = 1;
void MsgCZTeamRecruitReply::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamRecruitReply::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamRecruitReply.mid)
  return mid_;
}
 void MsgCZTeamRecruitReply::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamRecruitReply.mid)
}

// optional .proto3.TeamInfo team = 2;
bool MsgCZTeamRecruitReply::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgCZTeamRecruitReply::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgCZTeamRecruitReply::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamRecruitReply.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgCZTeamRecruitReply::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamRecruitReply.team)
  return team_;
}
::proto3::TeamInfo* MsgCZTeamRecruitReply::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamRecruitReply.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgCZTeamRecruitReply::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamRecruitReply.team)
}

// optional .proto3.eResult result = 3;
void MsgCZTeamRecruitReply::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgCZTeamRecruitReply::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamRecruitReply.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgCZTeamRecruitReply::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamRecruitReply.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamJoinStart::kMidFieldNumber;
const int MsgCZTeamJoinStart::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamJoinStart::MsgCZTeamJoinStart()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamJoinStart)
}

void MsgCZTeamJoinStart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgCZTeamJoinStart::MsgCZTeamJoinStart(const MsgCZTeamJoinStart& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamJoinStart)
}

void MsgCZTeamJoinStart::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  team_ = NULL;
}

MsgCZTeamJoinStart::~MsgCZTeamJoinStart() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamJoinStart)
  SharedDtor();
}

void MsgCZTeamJoinStart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgCZTeamJoinStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamJoinStart& MsgCZTeamJoinStart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamJoinStart* MsgCZTeamJoinStart::default_instance_ = NULL;

MsgCZTeamJoinStart* MsgCZTeamJoinStart::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamJoinStart* n = new MsgCZTeamJoinStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamJoinStart::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamJoinStart)
  mid_ = 0u;
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}

bool MsgCZTeamJoinStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamJoinStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 2;
      case 2: {
        if (tag == 18) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamJoinStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamJoinStart)
  return false;
#undef DO_
}

void MsgCZTeamJoinStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamJoinStart)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->team_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamJoinStart)
}

int MsgCZTeamJoinStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamJoinStart)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamJoinStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamJoinStart*>(&from));
}

void MsgCZTeamJoinStart::MergeFrom(const MsgCZTeamJoinStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamJoinStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
}

void MsgCZTeamJoinStart::CopyFrom(const MsgCZTeamJoinStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamJoinStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamJoinStart::IsInitialized() const {

  return true;
}

void MsgCZTeamJoinStart::Swap(MsgCZTeamJoinStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamJoinStart::InternalSwap(MsgCZTeamJoinStart* other) {
  std::swap(mid_, other->mid_);
  std::swap(team_, other->team_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamJoinStart::GetTypeName() const {
  return "proto3.MsgCZTeamJoinStart";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamJoinStart

// optional uint32 mid = 1;
void MsgCZTeamJoinStart::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamJoinStart::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamJoinStart.mid)
  return mid_;
}
 void MsgCZTeamJoinStart::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamJoinStart.mid)
}

// optional .proto3.TeamInfo team = 2;
bool MsgCZTeamJoinStart::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgCZTeamJoinStart::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgCZTeamJoinStart::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamJoinStart.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgCZTeamJoinStart::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamJoinStart.team)
  return team_;
}
::proto3::TeamInfo* MsgCZTeamJoinStart::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamJoinStart.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgCZTeamJoinStart::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamJoinStart.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZCTeamJoinAsk::kMidFieldNumber;
const int MsgZCTeamJoinAsk::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZCTeamJoinAsk::MsgZCTeamJoinAsk()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZCTeamJoinAsk)
}

void MsgZCTeamJoinAsk::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  team_ = const_cast< ::proto3::TeamInfo*>(
      ::proto3::TeamInfo::internal_default_instance());
#else
  team_ = const_cast< ::proto3::TeamInfo*>(&::proto3::TeamInfo::default_instance());
#endif
}

MsgZCTeamJoinAsk::MsgZCTeamJoinAsk(const MsgZCTeamJoinAsk& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZCTeamJoinAsk)
}

void MsgZCTeamJoinAsk::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  team_ = NULL;
}

MsgZCTeamJoinAsk::~MsgZCTeamJoinAsk() {
  // @@protoc_insertion_point(destructor:proto3.MsgZCTeamJoinAsk)
  SharedDtor();
}

void MsgZCTeamJoinAsk::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete team_;
  }
}

void MsgZCTeamJoinAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZCTeamJoinAsk& MsgZCTeamJoinAsk::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZCTeamJoinAsk* MsgZCTeamJoinAsk::default_instance_ = NULL;

MsgZCTeamJoinAsk* MsgZCTeamJoinAsk::New(::google::protobuf::Arena* arena) const {
  MsgZCTeamJoinAsk* n = new MsgZCTeamJoinAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZCTeamJoinAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZCTeamJoinAsk)
  mid_ = 0u;
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}

bool MsgZCTeamJoinAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZCTeamJoinAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .proto3.TeamInfo team = 2;
      case 2: {
        if (tag == 18) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZCTeamJoinAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZCTeamJoinAsk)
  return false;
#undef DO_
}

void MsgZCTeamJoinAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZCTeamJoinAsk)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->team_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZCTeamJoinAsk)
}

int MsgZCTeamJoinAsk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZCTeamJoinAsk)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.TeamInfo team = 2;
  if (this->has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZCTeamJoinAsk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZCTeamJoinAsk*>(&from));
}

void MsgZCTeamJoinAsk::MergeFrom(const MsgZCTeamJoinAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZCTeamJoinAsk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_team()) {
    mutable_team()->::proto3::TeamInfo::MergeFrom(from.team());
  }
}

void MsgZCTeamJoinAsk::CopyFrom(const MsgZCTeamJoinAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZCTeamJoinAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZCTeamJoinAsk::IsInitialized() const {

  return true;
}

void MsgZCTeamJoinAsk::Swap(MsgZCTeamJoinAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZCTeamJoinAsk::InternalSwap(MsgZCTeamJoinAsk* other) {
  std::swap(mid_, other->mid_);
  std::swap(team_, other->team_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZCTeamJoinAsk::GetTypeName() const {
  return "proto3.MsgZCTeamJoinAsk";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZCTeamJoinAsk

// optional uint32 mid = 1;
void MsgZCTeamJoinAsk::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZCTeamJoinAsk::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamJoinAsk.mid)
  return mid_;
}
 void MsgZCTeamJoinAsk::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZCTeamJoinAsk.mid)
}

// optional .proto3.TeamInfo team = 2;
bool MsgZCTeamJoinAsk::has_team() const {
  return !_is_default_instance_ && team_ != NULL;
}
void MsgZCTeamJoinAsk::clear_team() {
  if (GetArenaNoVirtual() == NULL && team_ != NULL) delete team_;
  team_ = NULL;
}
const ::proto3::TeamInfo& MsgZCTeamJoinAsk::team() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZCTeamJoinAsk.team)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return team_ != NULL ? *team_ : *default_instance().team_;
#else
  return team_ != NULL ? *team_ : *default_instance_->team_;
#endif
}
::proto3::TeamInfo* MsgZCTeamJoinAsk::mutable_team() {
  
  if (team_ == NULL) {
    team_ = new ::proto3::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgZCTeamJoinAsk.team)
  return team_;
}
::proto3::TeamInfo* MsgZCTeamJoinAsk::release_team() {
  // @@protoc_insertion_point(field_release:proto3.MsgZCTeamJoinAsk.team)
  
  ::proto3::TeamInfo* temp = team_;
  team_ = NULL;
  return temp;
}
void MsgZCTeamJoinAsk::set_allocated_team(::proto3::TeamInfo* team) {
  delete team_;
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgZCTeamJoinAsk.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCZTeamJoinReply::kMidFieldNumber;
const int MsgCZTeamJoinReply::kApplicantFieldNumber;
const int MsgCZTeamJoinReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCZTeamJoinReply::MsgCZTeamJoinReply()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCZTeamJoinReply)
}

void MsgCZTeamJoinReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  applicant_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  applicant_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
}

MsgCZTeamJoinReply::MsgCZTeamJoinReply(const MsgCZTeamJoinReply& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCZTeamJoinReply)
}

void MsgCZTeamJoinReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  applicant_ = NULL;
  result_ = 0;
}

MsgCZTeamJoinReply::~MsgCZTeamJoinReply() {
  // @@protoc_insertion_point(destructor:proto3.MsgCZTeamJoinReply)
  SharedDtor();
}

void MsgCZTeamJoinReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete applicant_;
  }
}

void MsgCZTeamJoinReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCZTeamJoinReply& MsgCZTeamJoinReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCZTeamJoinReply* MsgCZTeamJoinReply::default_instance_ = NULL;

MsgCZTeamJoinReply* MsgCZTeamJoinReply::New(::google::protobuf::Arena* arena) const {
  MsgCZTeamJoinReply* n = new MsgCZTeamJoinReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCZTeamJoinReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCZTeamJoinReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCZTeamJoinReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCZTeamJoinReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && applicant_ != NULL) delete applicant_;
  applicant_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCZTeamJoinReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCZTeamJoinReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_applicant;
        break;
      }

      // optional .proto3.PlayerInfo applicant = 2;
      case 2: {
        if (tag == 18) {
         parse_applicant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applicant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCZTeamJoinReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCZTeamJoinReply)
  return false;
#undef DO_
}

void MsgCZTeamJoinReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCZTeamJoinReply)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.PlayerInfo applicant = 2;
  if (this->has_applicant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->applicant_, output);
  }

  // optional .proto3.eResult result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCZTeamJoinReply)
}

int MsgCZTeamJoinReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCZTeamJoinReply)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.PlayerInfo applicant = 2;
  if (this->has_applicant()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->applicant_);
  }

  // optional .proto3.eResult result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCZTeamJoinReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCZTeamJoinReply*>(&from));
}

void MsgCZTeamJoinReply::MergeFrom(const MsgCZTeamJoinReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCZTeamJoinReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_applicant()) {
    mutable_applicant()->::proto3::PlayerInfo::MergeFrom(from.applicant());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgCZTeamJoinReply::CopyFrom(const MsgCZTeamJoinReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCZTeamJoinReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCZTeamJoinReply::IsInitialized() const {

  return true;
}

void MsgCZTeamJoinReply::Swap(MsgCZTeamJoinReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCZTeamJoinReply::InternalSwap(MsgCZTeamJoinReply* other) {
  std::swap(mid_, other->mid_);
  std::swap(applicant_, other->applicant_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCZTeamJoinReply::GetTypeName() const {
  return "proto3.MsgCZTeamJoinReply";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCZTeamJoinReply

// optional uint32 mid = 1;
void MsgCZTeamJoinReply::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCZTeamJoinReply::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamJoinReply.mid)
  return mid_;
}
 void MsgCZTeamJoinReply::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamJoinReply.mid)
}

// optional .proto3.PlayerInfo applicant = 2;
bool MsgCZTeamJoinReply::has_applicant() const {
  return !_is_default_instance_ && applicant_ != NULL;
}
void MsgCZTeamJoinReply::clear_applicant() {
  if (GetArenaNoVirtual() == NULL && applicant_ != NULL) delete applicant_;
  applicant_ = NULL;
}
const ::proto3::PlayerInfo& MsgCZTeamJoinReply::applicant() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamJoinReply.applicant)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return applicant_ != NULL ? *applicant_ : *default_instance().applicant_;
#else
  return applicant_ != NULL ? *applicant_ : *default_instance_->applicant_;
#endif
}
::proto3::PlayerInfo* MsgCZTeamJoinReply::mutable_applicant() {
  
  if (applicant_ == NULL) {
    applicant_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCZTeamJoinReply.applicant)
  return applicant_;
}
::proto3::PlayerInfo* MsgCZTeamJoinReply::release_applicant() {
  // @@protoc_insertion_point(field_release:proto3.MsgCZTeamJoinReply.applicant)
  
  ::proto3::PlayerInfo* temp = applicant_;
  applicant_ = NULL;
  return temp;
}
void MsgCZTeamJoinReply::set_allocated_applicant(::proto3::PlayerInfo* applicant) {
  delete applicant_;
  applicant_ = applicant;
  if (applicant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCZTeamJoinReply.applicant)
}

// optional .proto3.eResult result = 3;
void MsgCZTeamJoinReply::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgCZTeamJoinReply::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCZTeamJoinReply.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgCZTeamJoinReply::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCZTeamJoinReply.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCAEnter::kMidFieldNumber;
const int MsgCAEnter::kSidFieldNumber;
const int MsgCAEnter::kKeyFieldNumber;
const int MsgCAEnter::kPlayerInfoFieldNumber;
const int MsgCAEnter::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCAEnter::MsgCAEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCAEnter)
}

void MsgCAEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(
      ::proto3::PlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::proto3::PlayerInfo*>(&::proto3::PlayerInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  extra_ = const_cast< ::proto3::PlayerExtraInfo*>(
      ::proto3::PlayerExtraInfo::internal_default_instance());
#else
  extra_ = const_cast< ::proto3::PlayerExtraInfo*>(&::proto3::PlayerExtraInfo::default_instance());
#endif
}

MsgCAEnter::MsgCAEnter(const MsgCAEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCAEnter)
}

void MsgCAEnter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0u;
  sid_ = GOOGLE_ULONGLONG(0);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerinfo_ = NULL;
  extra_ = NULL;
}

MsgCAEnter::~MsgCAEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgCAEnter)
  SharedDtor();
}

void MsgCAEnter::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
    delete extra_;
  }
}

void MsgCAEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCAEnter& MsgCAEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgCAEnter* MsgCAEnter::default_instance_ = NULL;

MsgCAEnter* MsgCAEnter::New(::google::protobuf::Arena* arena) const {
  MsgCAEnter* n = new MsgCAEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCAEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCAEnter)
  mid_ = 0u;
  sid_ = GOOGLE_ULONGLONG(0);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && extra_ != NULL) delete extra_;
  extra_ = NULL;
}

bool MsgCAEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCAEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional uint64 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCAEnter.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_playerInfo;
        break;
      }

      // optional .proto3.PlayerInfo playerInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extra;
        break;
      }

      // optional .proto3.PlayerExtraInfo extra = 5;
      case 5: {
        if (tag == 42) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCAEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCAEnter)
  return false;
#undef DO_
}

void MsgCAEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCAEnter)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint64 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sid(), output);
  }

  // optional string key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCAEnter.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional .proto3.PlayerInfo playerInfo = 4;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->playerinfo_, output);
  }

  // optional .proto3.PlayerExtraInfo extra = 5;
  if (this->has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->extra_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCAEnter)
}

int MsgCAEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCAEnter)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint64 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sid());
  }

  // optional string key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional .proto3.PlayerInfo playerInfo = 4;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfo_);
  }

  // optional .proto3.PlayerExtraInfo extra = 5;
  if (this->has_extra()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extra_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCAEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCAEnter*>(&from));
}

void MsgCAEnter::MergeFrom(const MsgCAEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCAEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_playerinfo()) {
    mutable_playerinfo()->::proto3::PlayerInfo::MergeFrom(from.playerinfo());
  }
  if (from.has_extra()) {
    mutable_extra()->::proto3::PlayerExtraInfo::MergeFrom(from.extra());
  }
}

void MsgCAEnter::CopyFrom(const MsgCAEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCAEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCAEnter::IsInitialized() const {

  return true;
}

void MsgCAEnter::Swap(MsgCAEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCAEnter::InternalSwap(MsgCAEnter* other) {
  std::swap(mid_, other->mid_);
  std::swap(sid_, other->sid_);
  key_.Swap(&other->key_);
  std::swap(playerinfo_, other->playerinfo_);
  std::swap(extra_, other->extra_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCAEnter::GetTypeName() const {
  return "proto3.MsgCAEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCAEnter

// optional uint32 mid = 1;
void MsgCAEnter::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgCAEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCAEnter.mid)
  return mid_;
}
 void MsgCAEnter::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCAEnter.mid)
}

// optional uint64 sid = 2;
void MsgCAEnter::clear_sid() {
  sid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCAEnter::sid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCAEnter.sid)
  return sid_;
}
 void MsgCAEnter::set_sid(::google::protobuf::uint64 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCAEnter.sid)
}

// optional string key = 3;
void MsgCAEnter::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCAEnter::key() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCAEnter.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCAEnter::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCAEnter.key)
}
 void MsgCAEnter::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCAEnter.key)
}
 void MsgCAEnter::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCAEnter.key)
}
 ::std::string* MsgCAEnter::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCAEnter.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCAEnter::release_key() {
  // @@protoc_insertion_point(field_release:proto3.MsgCAEnter.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCAEnter::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCAEnter.key)
}

// optional .proto3.PlayerInfo playerInfo = 4;
bool MsgCAEnter::has_playerinfo() const {
  return !_is_default_instance_ && playerinfo_ != NULL;
}
void MsgCAEnter::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
const ::proto3::PlayerInfo& MsgCAEnter::playerinfo() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCAEnter.playerInfo)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance().playerinfo_;
#else
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
#endif
}
::proto3::PlayerInfo* MsgCAEnter::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::proto3::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCAEnter.playerInfo)
  return playerinfo_;
}
::proto3::PlayerInfo* MsgCAEnter::release_playerinfo() {
  // @@protoc_insertion_point(field_release:proto3.MsgCAEnter.playerInfo)
  
  ::proto3::PlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
void MsgCAEnter::set_allocated_playerinfo(::proto3::PlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCAEnter.playerInfo)
}

// optional .proto3.PlayerExtraInfo extra = 5;
bool MsgCAEnter::has_extra() const {
  return !_is_default_instance_ && extra_ != NULL;
}
void MsgCAEnter::clear_extra() {
  if (GetArenaNoVirtual() == NULL && extra_ != NULL) delete extra_;
  extra_ = NULL;
}
const ::proto3::PlayerExtraInfo& MsgCAEnter::extra() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCAEnter.extra)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return extra_ != NULL ? *extra_ : *default_instance().extra_;
#else
  return extra_ != NULL ? *extra_ : *default_instance_->extra_;
#endif
}
::proto3::PlayerExtraInfo* MsgCAEnter::mutable_extra() {
  
  if (extra_ == NULL) {
    extra_ = new ::proto3::PlayerExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCAEnter.extra)
  return extra_;
}
::proto3::PlayerExtraInfo* MsgCAEnter::release_extra() {
  // @@protoc_insertion_point(field_release:proto3.MsgCAEnter.extra)
  
  ::proto3::PlayerExtraInfo* temp = extra_;
  extra_ = NULL;
  return temp;
}
void MsgCAEnter::set_allocated_extra(::proto3::PlayerExtraInfo* extra) {
  delete extra_;
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCAEnter.extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgACEnter::kMidFieldNumber;
const int MsgACEnter::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgACEnter::MsgACEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgACEnter)
}

void MsgACEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgACEnter::MsgACEnter(const MsgACEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgACEnter)
}

void MsgACEnter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  result_ = 0;
}

MsgACEnter::~MsgACEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgACEnter)
  SharedDtor();
}

void MsgACEnter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgACEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgACEnter& MsgACEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgACEnter* MsgACEnter::default_instance_ = NULL;

MsgACEnter* MsgACEnter::New(::google::protobuf::Arena* arena) const {
  MsgACEnter* n = new MsgACEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgACEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgACEnter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgACEnter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgACEnter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgACEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgACEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgACEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgACEnter)
  return false;
#undef DO_
}

void MsgACEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgACEnter)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgACEnter)
}

int MsgACEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgACEnter)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgACEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgACEnter*>(&from));
}

void MsgACEnter::MergeFrom(const MsgACEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgACEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgACEnter::CopyFrom(const MsgACEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgACEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgACEnter::IsInitialized() const {

  return true;
}

void MsgACEnter::Swap(MsgACEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgACEnter::InternalSwap(MsgACEnter* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgACEnter::GetTypeName() const {
  return "proto3.MsgACEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgACEnter

// optional uint32 mid = 1;
void MsgACEnter::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgACEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgACEnter.mid)
  return mid_;
}
 void MsgACEnter::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgACEnter.mid)
}

// optional .proto3.eResult result = 2;
void MsgACEnter::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgACEnter::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgACEnter.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgACEnter::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgACEnter.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZGConnect::kMidFieldNumber;
const int MsgZGConnect::kZidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZGConnect::MsgZGConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZGConnect)
}

void MsgZGConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZGConnect::MsgZGConnect(const MsgZGConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZGConnect)
}

void MsgZGConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  zid_ = 0u;
}

MsgZGConnect::~MsgZGConnect() {
  // @@protoc_insertion_point(destructor:proto3.MsgZGConnect)
  SharedDtor();
}

void MsgZGConnect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZGConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZGConnect& MsgZGConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZGConnect* MsgZGConnect::default_instance_ = NULL;

MsgZGConnect* MsgZGConnect::New(::google::protobuf::Arena* arena) const {
  MsgZGConnect* n = new MsgZGConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZGConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZGConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZGConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZGConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, zid_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZGConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZGConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (tag == 16) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZGConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZGConnect)
  return false;
#undef DO_
}

void MsgZGConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZGConnect)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 zid = 2;
  if (this->zid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZGConnect)
}

int MsgZGConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZGConnect)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 zid = 2;
  if (this->zid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZGConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZGConnect*>(&from));
}

void MsgZGConnect::MergeFrom(const MsgZGConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZGConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.zid() != 0) {
    set_zid(from.zid());
  }
}

void MsgZGConnect::CopyFrom(const MsgZGConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZGConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZGConnect::IsInitialized() const {

  return true;
}

void MsgZGConnect::Swap(MsgZGConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZGConnect::InternalSwap(MsgZGConnect* other) {
  std::swap(mid_, other->mid_);
  std::swap(zid_, other->zid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZGConnect::GetTypeName() const {
  return "proto3.MsgZGConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZGConnect

// optional uint32 mid = 1;
void MsgZGConnect::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZGConnect::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZGConnect.mid)
  return mid_;
}
 void MsgZGConnect::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZGConnect.mid)
}

// optional uint32 zid = 2;
void MsgZGConnect::clear_zid() {
  zid_ = 0u;
}
 ::google::protobuf::uint32 MsgZGConnect::zid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZGConnect.zid)
  return zid_;
}
 void MsgZGConnect::set_zid(::google::protobuf::uint32 value) {
  
  zid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZGConnect.zid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgGZConnect::kMidFieldNumber;
const int MsgGZConnect::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgGZConnect::MsgGZConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgGZConnect)
}

void MsgGZConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgGZConnect::MsgGZConnect(const MsgGZConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgGZConnect)
}

void MsgGZConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  result_ = 0;
}

MsgGZConnect::~MsgGZConnect() {
  // @@protoc_insertion_point(destructor:proto3.MsgGZConnect)
  SharedDtor();
}

void MsgGZConnect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgGZConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgGZConnect& MsgGZConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgGZConnect* MsgGZConnect::default_instance_ = NULL;

MsgGZConnect* MsgGZConnect::New(::google::protobuf::Arena* arena) const {
  MsgGZConnect* n = new MsgGZConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgGZConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgGZConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgGZConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgGZConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgGZConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgGZConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgGZConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgGZConnect)
  return false;
#undef DO_
}

void MsgGZConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgGZConnect)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgGZConnect)
}

int MsgGZConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgGZConnect)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGZConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgGZConnect*>(&from));
}

void MsgGZConnect::MergeFrom(const MsgGZConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgGZConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgGZConnect::CopyFrom(const MsgGZConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgGZConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGZConnect::IsInitialized() const {

  return true;
}

void MsgGZConnect::Swap(MsgGZConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgGZConnect::InternalSwap(MsgGZConnect* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgGZConnect::GetTypeName() const {
  return "proto3.MsgGZConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgGZConnect

// optional uint32 mid = 1;
void MsgGZConnect::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgGZConnect::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgGZConnect.mid)
  return mid_;
}
 void MsgGZConnect::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgGZConnect.mid)
}

// optional .proto3.eResult result = 2;
void MsgGZConnect::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgGZConnect::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgGZConnect.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgGZConnect::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgGZConnect.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZWConnect::kMidFieldNumber;
const int MsgZWConnect::kZidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZWConnect::MsgZWConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZWConnect)
}

void MsgZWConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZWConnect::MsgZWConnect(const MsgZWConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZWConnect)
}

void MsgZWConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  zid_ = 0u;
}

MsgZWConnect::~MsgZWConnect() {
  // @@protoc_insertion_point(destructor:proto3.MsgZWConnect)
  SharedDtor();
}

void MsgZWConnect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZWConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZWConnect& MsgZWConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZWConnect* MsgZWConnect::default_instance_ = NULL;

MsgZWConnect* MsgZWConnect::New(::google::protobuf::Arena* arena) const {
  MsgZWConnect* n = new MsgZWConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZWConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZWConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZWConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZWConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, zid_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZWConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZWConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (tag == 16) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZWConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZWConnect)
  return false;
#undef DO_
}

void MsgZWConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZWConnect)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 zid = 2;
  if (this->zid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZWConnect)
}

int MsgZWConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZWConnect)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 zid = 2;
  if (this->zid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZWConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZWConnect*>(&from));
}

void MsgZWConnect::MergeFrom(const MsgZWConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZWConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.zid() != 0) {
    set_zid(from.zid());
  }
}

void MsgZWConnect::CopyFrom(const MsgZWConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZWConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZWConnect::IsInitialized() const {

  return true;
}

void MsgZWConnect::Swap(MsgZWConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZWConnect::InternalSwap(MsgZWConnect* other) {
  std::swap(mid_, other->mid_);
  std::swap(zid_, other->zid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZWConnect::GetTypeName() const {
  return "proto3.MsgZWConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZWConnect

// optional uint32 mid = 1;
void MsgZWConnect::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZWConnect::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZWConnect.mid)
  return mid_;
}
 void MsgZWConnect::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZWConnect.mid)
}

// optional uint32 zid = 2;
void MsgZWConnect::clear_zid() {
  zid_ = 0u;
}
 ::google::protobuf::uint32 MsgZWConnect::zid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZWConnect.zid)
  return zid_;
}
 void MsgZWConnect::set_zid(::google::protobuf::uint32 value) {
  
  zid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZWConnect.zid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgWZConnect::kMidFieldNumber;
const int MsgWZConnect::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgWZConnect::MsgWZConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgWZConnect)
}

void MsgWZConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgWZConnect::MsgWZConnect(const MsgWZConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgWZConnect)
}

void MsgWZConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  result_ = 0;
}

MsgWZConnect::~MsgWZConnect() {
  // @@protoc_insertion_point(destructor:proto3.MsgWZConnect)
  SharedDtor();
}

void MsgWZConnect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgWZConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgWZConnect& MsgWZConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgWZConnect* MsgWZConnect::default_instance_ = NULL;

MsgWZConnect* MsgWZConnect::New(::google::protobuf::Arena* arena) const {
  MsgWZConnect* n = new MsgWZConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgWZConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgWZConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgWZConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgWZConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgWZConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgWZConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgWZConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgWZConnect)
  return false;
#undef DO_
}

void MsgWZConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgWZConnect)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgWZConnect)
}

int MsgWZConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgWZConnect)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional .proto3.eResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgWZConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgWZConnect*>(&from));
}

void MsgWZConnect::MergeFrom(const MsgWZConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgWZConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgWZConnect::CopyFrom(const MsgWZConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgWZConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWZConnect::IsInitialized() const {

  return true;
}

void MsgWZConnect::Swap(MsgWZConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgWZConnect::InternalSwap(MsgWZConnect* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgWZConnect::GetTypeName() const {
  return "proto3.MsgWZConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgWZConnect

// optional uint32 mid = 1;
void MsgWZConnect::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgWZConnect::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgWZConnect.mid)
  return mid_;
}
 void MsgWZConnect::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgWZConnect.mid)
}

// optional .proto3.eResult result = 2;
void MsgWZConnect::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgWZConnect::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgWZConnect.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgWZConnect::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgWZConnect.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgAZConnect::kMidFieldNumber;
const int MsgAZConnect::kAidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgAZConnect::MsgAZConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgAZConnect)
}

void MsgAZConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgAZConnect::MsgAZConnect(const MsgAZConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgAZConnect)
}

void MsgAZConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  aid_ = 0u;
}

MsgAZConnect::~MsgAZConnect() {
  // @@protoc_insertion_point(destructor:proto3.MsgAZConnect)
  SharedDtor();
}

void MsgAZConnect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgAZConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgAZConnect& MsgAZConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgAZConnect* MsgAZConnect::default_instance_ = NULL;

MsgAZConnect* MsgAZConnect::New(::google::protobuf::Arena* arena) const {
  MsgAZConnect* n = new MsgAZConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgAZConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgAZConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgAZConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgAZConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, aid_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgAZConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgAZConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aid;
        break;
      }

      // optional uint32 aid = 2;
      case 2: {
        if (tag == 16) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgAZConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgAZConnect)
  return false;
#undef DO_
}

void MsgAZConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgAZConnect)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 aid = 2;
  if (this->aid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgAZConnect)
}

int MsgAZConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgAZConnect)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 aid = 2;
  if (this->aid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAZConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgAZConnect*>(&from));
}

void MsgAZConnect::MergeFrom(const MsgAZConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgAZConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.aid() != 0) {
    set_aid(from.aid());
  }
}

void MsgAZConnect::CopyFrom(const MsgAZConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgAZConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAZConnect::IsInitialized() const {

  return true;
}

void MsgAZConnect::Swap(MsgAZConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgAZConnect::InternalSwap(MsgAZConnect* other) {
  std::swap(mid_, other->mid_);
  std::swap(aid_, other->aid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgAZConnect::GetTypeName() const {
  return "proto3.MsgAZConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgAZConnect

// optional uint32 mid = 1;
void MsgAZConnect::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgAZConnect::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgAZConnect.mid)
  return mid_;
}
 void MsgAZConnect::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgAZConnect.mid)
}

// optional uint32 aid = 2;
void MsgAZConnect::clear_aid() {
  aid_ = 0u;
}
 ::google::protobuf::uint32 MsgAZConnect::aid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgAZConnect.aid)
  return aid_;
}
 void MsgAZConnect::set_aid(::google::protobuf::uint32 value) {
  
  aid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgAZConnect.aid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZAConnect::kMidFieldNumber;
const int MsgZAConnect::kZidFieldNumber;
const int MsgZAConnect::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZAConnect::MsgZAConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZAConnect)
}

void MsgZAConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZAConnect::MsgZAConnect(const MsgZAConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZAConnect)
}

void MsgZAConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  zid_ = 0u;
  result_ = 0;
}

MsgZAConnect::~MsgZAConnect() {
  // @@protoc_insertion_point(destructor:proto3.MsgZAConnect)
  SharedDtor();
}

void MsgZAConnect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZAConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZAConnect& MsgZAConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZAConnect* MsgZAConnect::default_instance_ = NULL;

MsgZAConnect* MsgZAConnect::New(::google::protobuf::Arena* arena) const {
  MsgZAConnect* n = new MsgZAConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZAConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZAConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgZAConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgZAConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgZAConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZAConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (tag == 16) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.eResult result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::eResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZAConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZAConnect)
  return false;
#undef DO_
}

void MsgZAConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZAConnect)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 zid = 2;
  if (this->zid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional .proto3.eResult result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZAConnect)
}

int MsgZAConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZAConnect)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 zid = 2;
  if (this->zid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->zid());
  }

  // optional .proto3.eResult result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZAConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZAConnect*>(&from));
}

void MsgZAConnect::MergeFrom(const MsgZAConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZAConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.zid() != 0) {
    set_zid(from.zid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgZAConnect::CopyFrom(const MsgZAConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZAConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZAConnect::IsInitialized() const {

  return true;
}

void MsgZAConnect::Swap(MsgZAConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZAConnect::InternalSwap(MsgZAConnect* other) {
  std::swap(mid_, other->mid_);
  std::swap(zid_, other->zid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZAConnect::GetTypeName() const {
  return "proto3.MsgZAConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZAConnect

// optional uint32 mid = 1;
void MsgZAConnect::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZAConnect::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZAConnect.mid)
  return mid_;
}
 void MsgZAConnect::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZAConnect.mid)
}

// optional uint32 zid = 2;
void MsgZAConnect::clear_zid() {
  zid_ = 0u;
}
 ::google::protobuf::uint32 MsgZAConnect::zid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZAConnect.zid)
  return zid_;
}
 void MsgZAConnect::set_zid(::google::protobuf::uint32 value) {
  
  zid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZAConnect.zid)
}

// optional .proto3.eResult result = 3;
void MsgZAConnect::clear_result() {
  result_ = 0;
}
 ::proto3::eResult MsgZAConnect::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZAConnect.result)
  return static_cast< ::proto3::eResult >(result_);
}
 void MsgZAConnect::set_result(::proto3::eResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZAConnect.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgZAClientEnter::kMidFieldNumber;
const int MsgZAClientEnter::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgZAClientEnter::MsgZAClientEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgZAClientEnter)
}

void MsgZAClientEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgZAClientEnter::MsgZAClientEnter(const MsgZAClientEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgZAClientEnter)
}

void MsgZAClientEnter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
}

MsgZAClientEnter::~MsgZAClientEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgZAClientEnter)
  SharedDtor();
}

void MsgZAClientEnter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgZAClientEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgZAClientEnter& MsgZAClientEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgZAClientEnter* MsgZAClientEnter::default_instance_ = NULL;

MsgZAClientEnter* MsgZAClientEnter::New(::google::protobuf::Arena* arena) const {
  MsgZAClientEnter* n = new MsgZAClientEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgZAClientEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgZAClientEnter)
  mid_ = 0u;
  keys_.Clear();
}

bool MsgZAClientEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgZAClientEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated uint32 keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgZAClientEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgZAClientEnter)
  return false;
#undef DO_
}

void MsgZAClientEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgZAClientEnter)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // repeated uint32 keys = 2;
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgZAClientEnter)
}

int MsgZAClientEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgZAClientEnter)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // repeated uint32 keys = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgZAClientEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgZAClientEnter*>(&from));
}

void MsgZAClientEnter::MergeFrom(const MsgZAClientEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgZAClientEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgZAClientEnter::CopyFrom(const MsgZAClientEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgZAClientEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgZAClientEnter::IsInitialized() const {

  return true;
}

void MsgZAClientEnter::Swap(MsgZAClientEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgZAClientEnter::InternalSwap(MsgZAClientEnter* other) {
  std::swap(mid_, other->mid_);
  keys_.UnsafeArenaSwap(&other->keys_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgZAClientEnter::GetTypeName() const {
  return "proto3.MsgZAClientEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgZAClientEnter

// optional uint32 mid = 1;
void MsgZAClientEnter::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgZAClientEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgZAClientEnter.mid)
  return mid_;
}
 void MsgZAClientEnter::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgZAClientEnter.mid)
}

// repeated uint32 keys = 2;
int MsgZAClientEnter::keys_size() const {
  return keys_.size();
}
void MsgZAClientEnter::clear_keys() {
  keys_.Clear();
}
 ::google::protobuf::uint32 MsgZAClientEnter::keys(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgZAClientEnter.keys)
  return keys_.Get(index);
}
 void MsgZAClientEnter::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgZAClientEnter.keys)
}
 void MsgZAClientEnter::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgZAClientEnter.keys)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgZAClientEnter::keys() const {
  // @@protoc_insertion_point(field_list:proto3.MsgZAClientEnter.keys)
  return keys_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgZAClientEnter::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgZAClientEnter.keys)
  return &keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgAZClientEnter::kMidFieldNumber;
const int MsgAZClientEnter::kAidFieldNumber;
const int MsgAZClientEnter::kSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgAZClientEnter::MsgAZClientEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgAZClientEnter)
}

void MsgAZClientEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgAZClientEnter::MsgAZClientEnter(const MsgAZClientEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgAZClientEnter)
}

void MsgAZClientEnter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  aid_ = 0u;
}

MsgAZClientEnter::~MsgAZClientEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgAZClientEnter)
  SharedDtor();
}

void MsgAZClientEnter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgAZClientEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgAZClientEnter& MsgAZClientEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

MsgAZClientEnter* MsgAZClientEnter::default_instance_ = NULL;

MsgAZClientEnter* MsgAZClientEnter::New(::google::protobuf::Arena* arena) const {
  MsgAZClientEnter* n = new MsgAZClientEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgAZClientEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgAZClientEnter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgAZClientEnter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgAZClientEnter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, aid_);

#undef ZR_HELPER_
#undef ZR_

  sid_.Clear();
}

bool MsgAZClientEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgAZClientEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aid;
        break;
      }

      // optional uint32 aid = 2;
      case 2: {
        if (tag == 16) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }

      // repeated uint64 sid = 3;
      case 3: {
        if (tag == 26) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sid())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_sid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgAZClientEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgAZClientEnter)
  return false;
#undef DO_
}

void MsgAZClientEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgAZClientEnter)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 aid = 2;
  if (this->aid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aid(), output);
  }

  // repeated uint64 sid = 3;
  if (this->sid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sid_cached_byte_size_);
  }
  for (int i = 0; i < this->sid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->sid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgAZClientEnter)
}

int MsgAZClientEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgAZClientEnter)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 aid = 2;
  if (this->aid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aid());
  }

  // repeated uint64 sid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->sid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->sid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAZClientEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgAZClientEnter*>(&from));
}

void MsgAZClientEnter::MergeFrom(const MsgAZClientEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgAZClientEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  sid_.MergeFrom(from.sid_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.aid() != 0) {
    set_aid(from.aid());
  }
}

void MsgAZClientEnter::CopyFrom(const MsgAZClientEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgAZClientEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAZClientEnter::IsInitialized() const {

  return true;
}

void MsgAZClientEnter::Swap(MsgAZClientEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgAZClientEnter::InternalSwap(MsgAZClientEnter* other) {
  std::swap(mid_, other->mid_);
  std::swap(aid_, other->aid_);
  sid_.UnsafeArenaSwap(&other->sid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgAZClientEnter::GetTypeName() const {
  return "proto3.MsgAZClientEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgAZClientEnter

// optional uint32 mid = 1;
void MsgAZClientEnter::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 MsgAZClientEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgAZClientEnter.mid)
  return mid_;
}
 void MsgAZClientEnter::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgAZClientEnter.mid)
}

// optional uint32 aid = 2;
void MsgAZClientEnter::clear_aid() {
  aid_ = 0u;
}
 ::google::protobuf::uint32 MsgAZClientEnter::aid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgAZClientEnter.aid)
  return aid_;
}
 void MsgAZClientEnter::set_aid(::google::protobuf::uint32 value) {
  
  aid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgAZClientEnter.aid)
}

// repeated uint64 sid = 3;
int MsgAZClientEnter::sid_size() const {
  return sid_.size();
}
void MsgAZClientEnter::clear_sid() {
  sid_.Clear();
}
 ::google::protobuf::uint64 MsgAZClientEnter::sid(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgAZClientEnter.sid)
  return sid_.Get(index);
}
 void MsgAZClientEnter::set_sid(int index, ::google::protobuf::uint64 value) {
  sid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgAZClientEnter.sid)
}
 void MsgAZClientEnter::add_sid(::google::protobuf::uint64 value) {
  sid_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgAZClientEnter.sid)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MsgAZClientEnter::sid() const {
  // @@protoc_insertion_point(field_list:proto3.MsgAZClientEnter.sid)
  return sid_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MsgAZClientEnter::mutable_sid() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgAZClientEnter.sid)
  return &sid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int game_ItemInfo::kMidFieldNumber;
const int game_ItemInfo::kItemIdFieldNumber;
const int game_ItemInfo::kItemDataIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

game_ItemInfo::game_ItemInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.game_ItemInfo)
}

void game_ItemInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

game_ItemInfo::game_ItemInfo(const game_ItemInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.game_ItemInfo)
}

void game_ItemInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
  itemid_ = 0u;
  itemdataid_ = 0u;
}

game_ItemInfo::~game_ItemInfo() {
  // @@protoc_insertion_point(destructor:proto3.game_ItemInfo)
  SharedDtor();
}

void game_ItemInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void game_ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const game_ItemInfo& game_ItemInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

game_ItemInfo* game_ItemInfo::default_instance_ = NULL;

game_ItemInfo* game_ItemInfo::New(::google::protobuf::Arena* arena) const {
  game_ItemInfo* n = new game_ItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void game_ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.game_ItemInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(game_ItemInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<game_ItemInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, itemdataid_);

#undef ZR_HELPER_
#undef ZR_

}

bool game_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.game_ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (tag == 16) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemDataId;
        break;
      }

      // optional uint32 itemDataId = 3;
      case 3: {
        if (tag == 24) {
         parse_itemDataId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemdataid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.game_ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.game_ItemInfo)
  return false;
#undef DO_
}

void game_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.game_ItemInfo)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // optional uint32 itemId = 2;
  if (this->itemid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional uint32 itemDataId = 3;
  if (this->itemdataid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemdataid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.game_ItemInfo)
}

int game_ItemInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.game_ItemInfo)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // optional uint32 itemId = 2;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemid());
  }

  // optional uint32 itemDataId = 3;
  if (this->itemdataid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemdataid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_ItemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const game_ItemInfo*>(&from));
}

void game_ItemInfo::MergeFrom(const game_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.game_ItemInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.itemid() != 0) {
    set_itemid(from.itemid());
  }
  if (from.itemdataid() != 0) {
    set_itemdataid(from.itemdataid());
  }
}

void game_ItemInfo::CopyFrom(const game_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.game_ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_ItemInfo::IsInitialized() const {

  return true;
}

void game_ItemInfo::Swap(game_ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void game_ItemInfo::InternalSwap(game_ItemInfo* other) {
  std::swap(mid_, other->mid_);
  std::swap(itemid_, other->itemid_);
  std::swap(itemdataid_, other->itemdataid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string game_ItemInfo::GetTypeName() const {
  return "proto3.game_ItemInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// game_ItemInfo

// optional uint32 mid = 1;
void game_ItemInfo::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 game_ItemInfo::mid() const {
  // @@protoc_insertion_point(field_get:proto3.game_ItemInfo.mid)
  return mid_;
}
 void game_ItemInfo::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_ItemInfo.mid)
}

// optional uint32 itemId = 2;
void game_ItemInfo::clear_itemid() {
  itemid_ = 0u;
}
 ::google::protobuf::uint32 game_ItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:proto3.game_ItemInfo.itemId)
  return itemid_;
}
 void game_ItemInfo::set_itemid(::google::protobuf::uint32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_ItemInfo.itemId)
}

// optional uint32 itemDataId = 3;
void game_ItemInfo::clear_itemdataid() {
  itemdataid_ = 0u;
}
 ::google::protobuf::uint32 game_ItemInfo::itemdataid() const {
  // @@protoc_insertion_point(field_get:proto3.game_ItemInfo.itemDataId)
  return itemdataid_;
}
 void game_ItemInfo::set_itemdataid(::google::protobuf::uint32 value) {
  
  itemdataid_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_ItemInfo.itemDataId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int game_itemInfos::kMidFieldNumber;
const int game_itemInfos::kItemInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

game_itemInfos::game_itemInfos()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.game_itemInfos)
}

void game_itemInfos::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

game_itemInfos::game_itemInfos(const game_itemInfos& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.game_itemInfos)
}

void game_itemInfos::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0u;
}

game_itemInfos::~game_itemInfos() {
  // @@protoc_insertion_point(destructor:proto3.game_itemInfos)
  SharedDtor();
}

void game_itemInfos::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void game_itemInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const game_itemInfos& game_itemInfos::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_5fprotocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fprotocol_2eproto();
#endif
  return *default_instance_;
}

game_itemInfos* game_itemInfos::default_instance_ = NULL;

game_itemInfos* game_itemInfos::New(::google::protobuf::Arena* arena) const {
  game_itemInfos* n = new game_itemInfos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void game_itemInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.game_itemInfos)
  mid_ = 0u;
  iteminfos_.Clear();
}

bool game_itemInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.game_itemInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemInfos;
        break;
      }

      // repeated .proto3.game_ItemInfo itemInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_itemInfos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_itemInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_iteminfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_itemInfos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.game_itemInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.game_itemInfos)
  return false;
#undef DO_
}

void game_itemInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.game_itemInfos)
  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mid(), output);
  }

  // repeated .proto3.game_ItemInfo itemInfos = 2;
  for (unsigned int i = 0, n = this->iteminfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->iteminfos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.game_itemInfos)
}

int game_itemInfos::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.game_itemInfos)
  int total_size = 0;

  // optional uint32 mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mid());
  }

  // repeated .proto3.game_ItemInfo itemInfos = 2;
  total_size += 1 * this->iteminfos_size();
  for (int i = 0; i < this->iteminfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_itemInfos::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const game_itemInfos*>(&from));
}

void game_itemInfos::MergeFrom(const game_itemInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.game_itemInfos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  iteminfos_.MergeFrom(from.iteminfos_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void game_itemInfos::CopyFrom(const game_itemInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.game_itemInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_itemInfos::IsInitialized() const {

  return true;
}

void game_itemInfos::Swap(game_itemInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void game_itemInfos::InternalSwap(game_itemInfos* other) {
  std::swap(mid_, other->mid_);
  iteminfos_.UnsafeArenaSwap(&other->iteminfos_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string game_itemInfos::GetTypeName() const {
  return "proto3.game_itemInfos";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// game_itemInfos

// optional uint32 mid = 1;
void game_itemInfos::clear_mid() {
  mid_ = 0u;
}
 ::google::protobuf::uint32 game_itemInfos::mid() const {
  // @@protoc_insertion_point(field_get:proto3.game_itemInfos.mid)
  return mid_;
}
 void game_itemInfos::set_mid(::google::protobuf::uint32 value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_itemInfos.mid)
}

// repeated .proto3.game_ItemInfo itemInfos = 2;
int game_itemInfos::iteminfos_size() const {
  return iteminfos_.size();
}
void game_itemInfos::clear_iteminfos() {
  iteminfos_.Clear();
}
const ::proto3::game_ItemInfo& game_itemInfos::iteminfos(int index) const {
  // @@protoc_insertion_point(field_get:proto3.game_itemInfos.itemInfos)
  return iteminfos_.Get(index);
}
::proto3::game_ItemInfo* game_itemInfos::mutable_iteminfos(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.game_itemInfos.itemInfos)
  return iteminfos_.Mutable(index);
}
::proto3::game_ItemInfo* game_itemInfos::add_iteminfos() {
  // @@protoc_insertion_point(field_add:proto3.game_itemInfos.itemInfos)
  return iteminfos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::game_ItemInfo >*
game_itemInfos::mutable_iteminfos() {
  // @@protoc_insertion_point(field_mutable_list:proto3.game_itemInfos.itemInfos)
  return &iteminfos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::game_ItemInfo >&
game_itemInfos::iteminfos() const {
  // @@protoc_insertion_point(field_list:proto3.game_itemInfos.itemInfos)
  return iteminfos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3

// @@protoc_insertion_point(global_scope)
