// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto3 {

void protobuf_ShutdownFile_protocol_2eproto() {
  delete key_value::default_instance_;
  delete user_t::default_instance_;
  delete player_t::default_instance_;
  delete win_t::default_instance_;
  delete achv_t::default_instance_;
  delete game_t::default_instance_;
  delete lobby_t::default_instance_;
  delete pawn_t::default_instance_;
  delete bunch_t::default_instance_;
  delete game_data_t::default_instance_;
  delete MsgBase::default_instance_;
  delete MsgCSLogin::default_instance_;
  delete MsgSCLogin::default_instance_;
  delete MsgCLEnter::default_instance_;
  delete MsgLCEnter::default_instance_;
  delete MsgCNEnter::default_instance_;
  delete MsgNCEnter::default_instance_;
  delete MsgCNCreate::default_instance_;
  delete MsgNCCreate::default_instance_;
  delete MsgCNJoin::default_instance_;
  delete MsgNCJoin::default_instance_;
  delete MsgCNReady::default_instance_;
  delete MsgNCReady::default_instance_;
  delete MsgNCStart::default_instance_;
  delete MsgCNDiscard::default_instance_;
  delete MsgNCDiscard::default_instance_;
  delete MsgCNMeld::default_instance_;
  delete MsgNCMeld::default_instance_;
  delete MsgCNDismissSync::default_instance_;
  delete MsgNCDismissSync::default_instance_;
  delete MsgCNDismissAck::default_instance_;
  delete MsgNCDismissAck::default_instance_;
  delete MsgNCSettle::default_instance_;
  delete MsgNCFinish::default_instance_;
  delete MsgCNStats::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_protocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_protocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  key_value::default_instance_ = new key_value();
  user_t::default_instance_ = new user_t();
  player_t::default_instance_ = new player_t();
  win_t::default_instance_ = new win_t();
  achv_t::default_instance_ = new achv_t();
  game_t::default_instance_ = new game_t();
  lobby_t::default_instance_ = new lobby_t();
  pawn_t::default_instance_ = new pawn_t();
  bunch_t::default_instance_ = new bunch_t();
  game_data_t::default_instance_ = new game_data_t();
  MsgBase::default_instance_ = new MsgBase();
  MsgCSLogin::default_instance_ = new MsgCSLogin();
  MsgSCLogin::default_instance_ = new MsgSCLogin();
  MsgCLEnter::default_instance_ = new MsgCLEnter();
  MsgLCEnter::default_instance_ = new MsgLCEnter();
  MsgCNEnter::default_instance_ = new MsgCNEnter();
  MsgNCEnter::default_instance_ = new MsgNCEnter();
  MsgCNCreate::default_instance_ = new MsgCNCreate();
  MsgNCCreate::default_instance_ = new MsgNCCreate();
  MsgCNJoin::default_instance_ = new MsgCNJoin();
  MsgNCJoin::default_instance_ = new MsgNCJoin();
  MsgCNReady::default_instance_ = new MsgCNReady();
  MsgNCReady::default_instance_ = new MsgNCReady();
  MsgNCStart::default_instance_ = new MsgNCStart();
  MsgCNDiscard::default_instance_ = new MsgCNDiscard();
  MsgNCDiscard::default_instance_ = new MsgNCDiscard();
  MsgCNMeld::default_instance_ = new MsgCNMeld();
  MsgNCMeld::default_instance_ = new MsgNCMeld();
  MsgCNDismissSync::default_instance_ = new MsgCNDismissSync();
  MsgNCDismissSync::default_instance_ = new MsgNCDismissSync();
  MsgCNDismissAck::default_instance_ = new MsgCNDismissAck();
  MsgNCDismissAck::default_instance_ = new MsgNCDismissAck();
  MsgNCSettle::default_instance_ = new MsgNCSettle();
  MsgNCFinish::default_instance_ = new MsgNCFinish();
  MsgCNStats::default_instance_ = new MsgCNStats();
  key_value::default_instance_->InitAsDefaultInstance();
  user_t::default_instance_->InitAsDefaultInstance();
  player_t::default_instance_->InitAsDefaultInstance();
  win_t::default_instance_->InitAsDefaultInstance();
  achv_t::default_instance_->InitAsDefaultInstance();
  game_t::default_instance_->InitAsDefaultInstance();
  lobby_t::default_instance_->InitAsDefaultInstance();
  pawn_t::default_instance_->InitAsDefaultInstance();
  bunch_t::default_instance_->InitAsDefaultInstance();
  game_data_t::default_instance_->InitAsDefaultInstance();
  MsgBase::default_instance_->InitAsDefaultInstance();
  MsgCSLogin::default_instance_->InitAsDefaultInstance();
  MsgSCLogin::default_instance_->InitAsDefaultInstance();
  MsgCLEnter::default_instance_->InitAsDefaultInstance();
  MsgLCEnter::default_instance_->InitAsDefaultInstance();
  MsgCNEnter::default_instance_->InitAsDefaultInstance();
  MsgNCEnter::default_instance_->InitAsDefaultInstance();
  MsgCNCreate::default_instance_->InitAsDefaultInstance();
  MsgNCCreate::default_instance_->InitAsDefaultInstance();
  MsgCNJoin::default_instance_->InitAsDefaultInstance();
  MsgNCJoin::default_instance_->InitAsDefaultInstance();
  MsgCNReady::default_instance_->InitAsDefaultInstance();
  MsgNCReady::default_instance_->InitAsDefaultInstance();
  MsgNCStart::default_instance_->InitAsDefaultInstance();
  MsgCNDiscard::default_instance_->InitAsDefaultInstance();
  MsgNCDiscard::default_instance_->InitAsDefaultInstance();
  MsgCNMeld::default_instance_->InitAsDefaultInstance();
  MsgNCMeld::default_instance_->InitAsDefaultInstance();
  MsgCNDismissSync::default_instance_->InitAsDefaultInstance();
  MsgNCDismissSync::default_instance_->InitAsDefaultInstance();
  MsgCNDismissAck::default_instance_->InitAsDefaultInstance();
  MsgNCDismissAck::default_instance_->InitAsDefaultInstance();
  MsgNCSettle::default_instance_->InitAsDefaultInstance();
  MsgNCFinish::default_instance_->InitAsDefaultInstance();
  MsgCNStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protocol_2eproto_once_);
void protobuf_AddDesc_protocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protocol_2eproto_once_,
                 &protobuf_AddDesc_protocol_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;
#endif
bool pb_enum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
    case 21:
    case 22:
    case 23:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 999:
    case 1000:
    case 100000:
      return true;
    default:
      return false;
  }
}

bool pb_msg_IsValid(int value) {
  switch(value) {
    case 0:
    case 1000:
    case 1001:
    case 2000:
    case 2001:
    case 2002:
    case 3999:
    case 4000:
    case 4001:
    case 4002:
    case 4004:
    case 5999:
    case 6000:
    case 6001:
    case 6002:
    case 6011:
    case 6012:
    case 6013:
    case 6014:
    case 6021:
    case 6022:
    case 6023:
    case 6024:
    case 6031:
    case 6032:
    case 6034:
    case 6036:
    case 6038:
    case 6051:
    case 6052:
    case 6053:
    case 6054:
    case 6081:
    case 6999:
    case 9999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int key_value::kKeyFieldNumber;
const int key_value::kValueFieldNumber;
const int key_value::kIkeyFieldNumber;
const int key_value::kIvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

key_value::key_value()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.key_value)
}

void key_value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

key_value::key_value(const key_value& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.key_value)
}

void key_value::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ikey_ = 0;
  ivalue_ = 0u;
}

key_value::~key_value() {
  // @@protoc_insertion_point(destructor:proto3.key_value)
  SharedDtor();
}

void key_value::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void key_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const key_value& key_value::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

key_value* key_value::default_instance_ = NULL;

key_value* key_value::New(::google::protobuf::Arena* arena) const {
  key_value* n = new key_value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void key_value::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.key_value)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(key_value, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<key_value*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ikey_, ivalue_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool key_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.key_value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.key_value.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.key_value.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ikey;
        break;
      }

      // optional .proto3.pb_enum ikey = 3;
      case 3: {
        if (tag == 24) {
         parse_ikey:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ikey(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ivalue;
        break;
      }

      // optional uint32 ivalue = 4;
      case 4: {
        if (tag == 32) {
         parse_ivalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ivalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.key_value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.key_value)
  return false;
#undef DO_
}

void key_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.key_value)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.key_value.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.key_value.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional .proto3.pb_enum ikey = 3;
  if (this->ikey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ikey(), output);
  }

  // optional uint32 ivalue = 4;
  if (this->ivalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ivalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.key_value)
}

int key_value::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.key_value)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional .proto3.pb_enum ikey = 3;
  if (this->ikey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ikey());
  }

  // optional uint32 ivalue = 4;
  if (this->ivalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ivalue());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void key_value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const key_value*>(&from));
}

void key_value::MergeFrom(const key_value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.key_value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.ikey() != 0) {
    set_ikey(from.ikey());
  }
  if (from.ivalue() != 0) {
    set_ivalue(from.ivalue());
  }
}

void key_value::CopyFrom(const key_value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.key_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool key_value::IsInitialized() const {

  return true;
}

void key_value::Swap(key_value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void key_value::InternalSwap(key_value* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(ikey_, other->ikey_);
  std::swap(ivalue_, other->ivalue_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string key_value::GetTypeName() const {
  return "proto3.key_value";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// key_value

// optional string key = 1;
void key_value::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& key_value::key() const {
  // @@protoc_insertion_point(field_get:proto3.key_value.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void key_value::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.key_value.key)
}
 void key_value::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.key_value.key)
}
 void key_value::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.key_value.key)
}
 ::std::string* key_value::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto3.key_value.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* key_value::release_key() {
  // @@protoc_insertion_point(field_release:proto3.key_value.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void key_value::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto3.key_value.key)
}

// optional string value = 2;
void key_value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& key_value::value() const {
  // @@protoc_insertion_point(field_get:proto3.key_value.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void key_value::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.key_value.value)
}
 void key_value::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.key_value.value)
}
 void key_value::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.key_value.value)
}
 ::std::string* key_value::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:proto3.key_value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* key_value::release_value() {
  // @@protoc_insertion_point(field_release:proto3.key_value.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void key_value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto3.key_value.value)
}

// optional .proto3.pb_enum ikey = 3;
void key_value::clear_ikey() {
  ikey_ = 0;
}
 ::proto3::pb_enum key_value::ikey() const {
  // @@protoc_insertion_point(field_get:proto3.key_value.ikey)
  return static_cast< ::proto3::pb_enum >(ikey_);
}
 void key_value::set_ikey(::proto3::pb_enum value) {
  
  ikey_ = value;
  // @@protoc_insertion_point(field_set:proto3.key_value.ikey)
}

// optional uint32 ivalue = 4;
void key_value::clear_ivalue() {
  ivalue_ = 0u;
}
 ::google::protobuf::uint32 key_value::ivalue() const {
  // @@protoc_insertion_point(field_get:proto3.key_value.ivalue)
  return ivalue_;
}
 void key_value::set_ivalue(::google::protobuf::uint32 value) {
  
  ivalue_ = value;
  // @@protoc_insertion_point(field_set:proto3.key_value.ivalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_t::kUidFieldNumber;
const int user_t::kFlagFieldNumber;
const int user_t::kDevTypeFieldNumber;
const int user_t::kAccountFieldNumber;
const int user_t::kNameFieldNumber;
const int user_t::kPswdFieldNumber;
const int user_t::kGenderFieldNumber;
const int user_t::kAgeFieldNumber;
const int user_t::kUdidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_t::user_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.user_t)
}

void user_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

user_t::user_t(const user_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.user_t)
}

void user_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0u;
  dev_type_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0u;
  age_ = 0u;
  udid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

user_t::~user_t() {
  // @@protoc_insertion_point(destructor:proto3.user_t)
  SharedDtor();
}

void user_t::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void user_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const user_t& user_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

user_t* user_t::default_instance_ = NULL;

user_t* user_t::New(::google::protobuf::Arena* arena) const {
  user_t* n = new user_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.user_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(user_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<user_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(flag_, dev_type_);
  ZR_(gender_, age_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool user_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.user_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dev_type;
        break;
      }

      // optional .proto3.pb_enum dev_type = 3;
      case 3: {
        if (tag == 24) {
         parse_dev_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dev_type(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (tag == 34) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.account"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pswd;
        break;
      }

      // optional string pswd = 6;
      case 6: {
        if (tag == 50) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.pswd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 7;
      case 7: {
        if (tag == 56) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_age;
        break;
      }

      // optional uint32 age = 8;
      case 8: {
        if (tag == 64) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_udid;
        break;
      }

      // optional string udid = 9;
      case 9: {
        if (tag == 74) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->udid().data(), this->udid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.udid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.user_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.user_t)
  return false;
#undef DO_
}

void user_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.user_t)
  // optional string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional uint32 flag = 2;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional .proto3.pb_enum dev_type = 3;
  if (this->dev_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dev_type(), output);
  }

  // optional string account = 4;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account(), output);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional string pswd = 6;
  if (this->pswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pswd(), output);
  }

  // optional uint32 gender = 7;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gender(), output);
  }

  // optional uint32 age = 8;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->age(), output);
  }

  // optional string udid = 9;
  if (this->udid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.udid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->udid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.user_t)
}

int user_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.user_t)
  int total_size = 0;

  // optional string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 flag = 2;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  // optional .proto3.pb_enum dev_type = 3;
  if (this->dev_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dev_type());
  }

  // optional string account = 4;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string pswd = 6;
  if (this->pswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pswd());
  }

  // optional uint32 gender = 7;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional uint32 age = 8;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->age());
  }

  // optional string udid = 9;
  if (this->udid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const user_t*>(&from));
}

void user_t::MergeFrom(const user_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.user_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
  if (from.dev_type() != 0) {
    set_dev_type(from.dev_type());
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pswd().size() > 0) {

    pswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pswd_);
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.udid().size() > 0) {

    udid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udid_);
  }
}

void user_t::CopyFrom(const user_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.user_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_t::IsInitialized() const {

  return true;
}

void user_t::Swap(user_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_t::InternalSwap(user_t* other) {
  uid_.Swap(&other->uid_);
  std::swap(flag_, other->flag_);
  std::swap(dev_type_, other->dev_type_);
  account_.Swap(&other->account_);
  name_.Swap(&other->name_);
  pswd_.Swap(&other->pswd_);
  std::swap(gender_, other->gender_);
  std::swap(age_, other->age_);
  udid_.Swap(&other->udid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string user_t::GetTypeName() const {
  return "proto3.user_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_t

// optional string uid = 1;
void user_t::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::uid() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.uid)
}
 void user_t::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.uid)
}
 void user_t::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.uid)
}
 ::std::string* user_t::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.user_t.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.uid)
}

// optional uint32 flag = 2;
void user_t::clear_flag() {
  flag_ = 0u;
}
 ::google::protobuf::uint32 user_t::flag() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.flag)
  return flag_;
}
 void user_t::set_flag(::google::protobuf::uint32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:proto3.user_t.flag)
}

// optional .proto3.pb_enum dev_type = 3;
void user_t::clear_dev_type() {
  dev_type_ = 0;
}
 ::proto3::pb_enum user_t::dev_type() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.dev_type)
  return static_cast< ::proto3::pb_enum >(dev_type_);
}
 void user_t::set_dev_type(::proto3::pb_enum value) {
  
  dev_type_ = value;
  // @@protoc_insertion_point(field_set:proto3.user_t.dev_type)
}

// optional string account = 4;
void user_t::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::account() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.account)
}
 void user_t::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.account)
}
 void user_t::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.account)
}
 ::std::string* user_t::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_account() {
  // @@protoc_insertion_point(field_release:proto3.user_t.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.account)
}

// optional string name = 5;
void user_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::name() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.name)
}
 void user_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.name)
}
 void user_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.name)
}
 ::std::string* user_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_name() {
  // @@protoc_insertion_point(field_release:proto3.user_t.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.name)
}

// optional string pswd = 6;
void user_t::clear_pswd() {
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::pswd() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.pswd)
  return pswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_pswd(const ::std::string& value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.pswd)
}
 void user_t::set_pswd(const char* value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.pswd)
}
 void user_t::set_pswd(const char* value, size_t size) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.pswd)
}
 ::std::string* user_t::mutable_pswd() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.pswd)
  return pswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_pswd() {
  // @@protoc_insertion_point(field_release:proto3.user_t.pswd)
  
  return pswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_pswd(::std::string* pswd) {
  if (pswd != NULL) {
    
  } else {
    
  }
  pswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pswd);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.pswd)
}

// optional uint32 gender = 7;
void user_t::clear_gender() {
  gender_ = 0u;
}
 ::google::protobuf::uint32 user_t::gender() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.gender)
  return gender_;
}
 void user_t::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:proto3.user_t.gender)
}

// optional uint32 age = 8;
void user_t::clear_age() {
  age_ = 0u;
}
 ::google::protobuf::uint32 user_t::age() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.age)
  return age_;
}
 void user_t::set_age(::google::protobuf::uint32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:proto3.user_t.age)
}

// optional string udid = 9;
void user_t::clear_udid() {
  udid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::udid() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.udid)
  return udid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_udid(const ::std::string& value) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.udid)
}
 void user_t::set_udid(const char* value) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.udid)
}
 void user_t::set_udid(const char* value, size_t size) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.udid)
}
 ::std::string* user_t::mutable_udid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.udid)
  return udid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_udid() {
  // @@protoc_insertion_point(field_release:proto3.user_t.udid)
  
  return udid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_udid(::std::string* udid) {
  if (udid != NULL) {
    
  } else {
    
  }
  udid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udid);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.udid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int player_t::kUidFieldNumber;
const int player_t::kPidFieldNumber;
const int player_t::kLevelFieldNumber;
const int player_t::kXpFieldNumber;
const int player_t::kCurrencyFieldNumber;
const int player_t::kEnergyFieldNumber;
const int player_t::kWinsFieldNumber;
const int player_t::kAchvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

player_t::player_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.player_t)
}

void player_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

player_t::player_t(const player_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.player_t)
}

void player_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = 0u;
  level_ = 0u;
  xp_ = 0u;
  currency_ = 0u;
  energy_ = 0u;
}

player_t::~player_t() {
  // @@protoc_insertion_point(destructor:proto3.player_t)
  SharedDtor();
}

void player_t::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void player_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const player_t& player_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

player_t* player_t::default_instance_ = NULL;

player_t* player_t::New(::google::protobuf::Arena* arena) const {
  player_t* n = new player_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void player_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.player_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(player_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<player_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pid_, currency_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  energy_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  wins_.Clear();
  achvs_.Clear();
}

bool player_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.player_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.player_t.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_xp;
        break;
      }

      // optional uint32 xp = 4;
      case 4: {
        if (tag == 32) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_currency;
        break;
      }

      // optional uint32 currency = 5;
      case 5: {
        if (tag == 40) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 6;
      case 6: {
        if (tag == 48) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_wins;
        break;
      }

      // repeated .proto3.win_t wins = 7;
      case 7: {
        if (tag == 58) {
         parse_wins:
          DO_(input->IncrementRecursionDepth());
         parse_loop_wins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_wins;
        if (input->ExpectTag(66)) goto parse_loop_achvs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.achv_t achvs = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_achvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_achvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_achvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.player_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.player_t)
  return false;
#undef DO_
}

void player_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.player_t)
  // optional string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.player_t.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional uint32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // optional uint32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 xp = 4;
  if (this->xp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->xp(), output);
  }

  // optional uint32 currency = 5;
  if (this->currency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currency(), output);
  }

  // optional uint32 energy = 6;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->energy(), output);
  }

  // repeated .proto3.win_t wins = 7;
  for (unsigned int i = 0, n = this->wins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->wins(i), output);
  }

  // repeated .proto3.achv_t achvs = 8;
  for (unsigned int i = 0, n = this->achvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->achvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.player_t)
}

int player_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.player_t)
  int total_size = 0;

  // optional string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  // optional uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional uint32 xp = 4;
  if (this->xp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xp());
  }

  // optional uint32 currency = 5;
  if (this->currency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currency());
  }

  // optional uint32 energy = 6;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->energy());
  }

  // repeated .proto3.win_t wins = 7;
  total_size += 1 * this->wins_size();
  for (int i = 0; i < this->wins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wins(i));
  }

  // repeated .proto3.achv_t achvs = 8;
  total_size += 1 * this->achvs_size();
  for (int i = 0; i < this->achvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const player_t*>(&from));
}

void player_t::MergeFrom(const player_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.player_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  wins_.MergeFrom(from.wins_);
  achvs_.MergeFrom(from.achvs_);
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.xp() != 0) {
    set_xp(from.xp());
  }
  if (from.currency() != 0) {
    set_currency(from.currency());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
}

void player_t::CopyFrom(const player_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.player_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_t::IsInitialized() const {

  return true;
}

void player_t::Swap(player_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void player_t::InternalSwap(player_t* other) {
  uid_.Swap(&other->uid_);
  std::swap(pid_, other->pid_);
  std::swap(level_, other->level_);
  std::swap(xp_, other->xp_);
  std::swap(currency_, other->currency_);
  std::swap(energy_, other->energy_);
  wins_.UnsafeArenaSwap(&other->wins_);
  achvs_.UnsafeArenaSwap(&other->achvs_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string player_t::GetTypeName() const {
  return "proto3.player_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// player_t

// optional string uid = 1;
void player_t::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& player_t::uid() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void player_t::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.player_t.uid)
}
 void player_t::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.player_t.uid)
}
 void player_t::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.player_t.uid)
}
 ::std::string* player_t::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.player_t.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* player_t::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.player_t.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void player_t::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.player_t.uid)
}

// optional uint32 pid = 2;
void player_t::clear_pid() {
  pid_ = 0u;
}
 ::google::protobuf::uint32 player_t::pid() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.pid)
  return pid_;
}
 void player_t::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.pid)
}

// optional uint32 level = 3;
void player_t::clear_level() {
  level_ = 0u;
}
 ::google::protobuf::uint32 player_t::level() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.level)
  return level_;
}
 void player_t::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.level)
}

// optional uint32 xp = 4;
void player_t::clear_xp() {
  xp_ = 0u;
}
 ::google::protobuf::uint32 player_t::xp() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.xp)
  return xp_;
}
 void player_t::set_xp(::google::protobuf::uint32 value) {
  
  xp_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.xp)
}

// optional uint32 currency = 5;
void player_t::clear_currency() {
  currency_ = 0u;
}
 ::google::protobuf::uint32 player_t::currency() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.currency)
  return currency_;
}
 void player_t::set_currency(::google::protobuf::uint32 value) {
  
  currency_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.currency)
}

// optional uint32 energy = 6;
void player_t::clear_energy() {
  energy_ = 0u;
}
 ::google::protobuf::uint32 player_t::energy() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.energy)
  return energy_;
}
 void player_t::set_energy(::google::protobuf::uint32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.energy)
}

// repeated .proto3.win_t wins = 7;
int player_t::wins_size() const {
  return wins_.size();
}
void player_t::clear_wins() {
  wins_.Clear();
}
const ::proto3::win_t& player_t::wins(int index) const {
  // @@protoc_insertion_point(field_get:proto3.player_t.wins)
  return wins_.Get(index);
}
::proto3::win_t* player_t::mutable_wins(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.player_t.wins)
  return wins_.Mutable(index);
}
::proto3::win_t* player_t::add_wins() {
  // @@protoc_insertion_point(field_add:proto3.player_t.wins)
  return wins_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::win_t >*
player_t::mutable_wins() {
  // @@protoc_insertion_point(field_mutable_list:proto3.player_t.wins)
  return &wins_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::win_t >&
player_t::wins() const {
  // @@protoc_insertion_point(field_list:proto3.player_t.wins)
  return wins_;
}

// repeated .proto3.achv_t achvs = 8;
int player_t::achvs_size() const {
  return achvs_.size();
}
void player_t::clear_achvs() {
  achvs_.Clear();
}
const ::proto3::achv_t& player_t::achvs(int index) const {
  // @@protoc_insertion_point(field_get:proto3.player_t.achvs)
  return achvs_.Get(index);
}
::proto3::achv_t* player_t::mutable_achvs(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.player_t.achvs)
  return achvs_.Mutable(index);
}
::proto3::achv_t* player_t::add_achvs() {
  // @@protoc_insertion_point(field_add:proto3.player_t.achvs)
  return achvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::achv_t >*
player_t::mutable_achvs() {
  // @@protoc_insertion_point(field_mutable_list:proto3.player_t.achvs)
  return &achvs_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::achv_t >&
player_t::achvs() const {
  // @@protoc_insertion_point(field_list:proto3.player_t.achvs)
  return achvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int win_t::kUidFieldNumber;
const int win_t::kGidFieldNumber;
const int win_t::kWinFieldNumber;
const int win_t::kLoseFieldNumber;
const int win_t::kDrawFieldNumber;
const int win_t::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

win_t::win_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.win_t)
}

void win_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

win_t::win_t(const win_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.win_t)
}

void win_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_ = 0u;
  win_ = 0u;
  lose_ = 0u;
  draw_ = 0u;
  score_ = 0u;
}

win_t::~win_t() {
  // @@protoc_insertion_point(destructor:proto3.win_t)
  SharedDtor();
}

void win_t::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void win_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const win_t& win_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

win_t* win_t::default_instance_ = NULL;

win_t* win_t::New(::google::protobuf::Arena* arena) const {
  win_t* n = new win_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void win_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.win_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(win_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<win_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gid_, score_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool win_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.win_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.win_t.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // optional uint32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }

      // optional uint32 win = 3;
      case 3: {
        if (tag == 24) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lose;
        break;
      }

      // optional uint32 lose = 4;
      case 4: {
        if (tag == 32) {
         parse_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_draw;
        break;
      }

      // optional uint32 draw = 5;
      case 5: {
        if (tag == 40) {
         parse_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional uint32 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.win_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.win_t)
  return false;
#undef DO_
}

void win_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.win_t)
  // optional string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.win_t.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional uint32 gid = 2;
  if (this->gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gid(), output);
  }

  // optional uint32 win = 3;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win(), output);
  }

  // optional uint32 lose = 4;
  if (this->lose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lose(), output);
  }

  // optional uint32 draw = 5;
  if (this->draw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->draw(), output);
  }

  // optional uint32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.win_t)
}

int win_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.win_t)
  int total_size = 0;

  // optional string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 gid = 2;
  if (this->gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  // optional uint32 win = 3;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->win());
  }

  // optional uint32 lose = 4;
  if (this->lose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lose());
  }

  // optional uint32 draw = 5;
  if (this->draw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->draw());
  }

  // optional uint32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void win_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const win_t*>(&from));
}

void win_t::MergeFrom(const win_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.win_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.gid() != 0) {
    set_gid(from.gid());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.lose() != 0) {
    set_lose(from.lose());
  }
  if (from.draw() != 0) {
    set_draw(from.draw());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void win_t::CopyFrom(const win_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.win_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool win_t::IsInitialized() const {

  return true;
}

void win_t::Swap(win_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void win_t::InternalSwap(win_t* other) {
  uid_.Swap(&other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(win_, other->win_);
  std::swap(lose_, other->lose_);
  std::swap(draw_, other->draw_);
  std::swap(score_, other->score_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string win_t::GetTypeName() const {
  return "proto3.win_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// win_t

// optional string uid = 1;
void win_t::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& win_t::uid() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void win_t::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.win_t.uid)
}
 void win_t::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.win_t.uid)
}
 void win_t::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.win_t.uid)
}
 ::std::string* win_t::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.win_t.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* win_t::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.win_t.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void win_t::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.win_t.uid)
}

// optional uint32 gid = 2;
void win_t::clear_gid() {
  gid_ = 0u;
}
 ::google::protobuf::uint32 win_t::gid() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.gid)
  return gid_;
}
 void win_t::set_gid(::google::protobuf::uint32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.gid)
}

// optional uint32 win = 3;
void win_t::clear_win() {
  win_ = 0u;
}
 ::google::protobuf::uint32 win_t::win() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.win)
  return win_;
}
 void win_t::set_win(::google::protobuf::uint32 value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.win)
}

// optional uint32 lose = 4;
void win_t::clear_lose() {
  lose_ = 0u;
}
 ::google::protobuf::uint32 win_t::lose() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.lose)
  return lose_;
}
 void win_t::set_lose(::google::protobuf::uint32 value) {
  
  lose_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.lose)
}

// optional uint32 draw = 5;
void win_t::clear_draw() {
  draw_ = 0u;
}
 ::google::protobuf::uint32 win_t::draw() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.draw)
  return draw_;
}
 void win_t::set_draw(::google::protobuf::uint32 value) {
  
  draw_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.draw)
}

// optional uint32 score = 6;
void win_t::clear_score() {
  score_ = 0u;
}
 ::google::protobuf::uint32 win_t::score() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.score)
  return score_;
}
 void win_t::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int achv_t::kTypeFieldNumber;
const int achv_t::kNameFieldNumber;
const int achv_t::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

achv_t::achv_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.achv_t)
}

void achv_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

achv_t::achv_t(const achv_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.achv_t)
}

void achv_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
}

achv_t::~achv_t() {
  // @@protoc_insertion_point(destructor:proto3.achv_t)
  SharedDtor();
}

void achv_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void achv_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const achv_t& achv_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

achv_t* achv_t::default_instance_ = NULL;

achv_t* achv_t::New(::google::protobuf::Arena* arena) const {
  achv_t* n = new achv_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void achv_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.achv_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(achv_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<achv_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, value_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool achv_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.achv_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_enum type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.achv_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.achv_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.achv_t)
  return false;
#undef DO_
}

void achv_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.achv_t)
  // optional .proto3.pb_enum type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.achv_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.achv_t)
}

int achv_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.achv_t)
  int total_size = 0;

  // optional .proto3.pb_enum type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void achv_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const achv_t*>(&from));
}

void achv_t::MergeFrom(const achv_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.achv_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void achv_t::CopyFrom(const achv_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.achv_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool achv_t::IsInitialized() const {

  return true;
}

void achv_t::Swap(achv_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void achv_t::InternalSwap(achv_t* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string achv_t::GetTypeName() const {
  return "proto3.achv_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// achv_t

// optional .proto3.pb_enum type = 1;
void achv_t::clear_type() {
  type_ = 0;
}
 ::proto3::pb_enum achv_t::type() const {
  // @@protoc_insertion_point(field_get:proto3.achv_t.type)
  return static_cast< ::proto3::pb_enum >(type_);
}
 void achv_t::set_type(::proto3::pb_enum value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3.achv_t.type)
}

// optional string name = 2;
void achv_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& achv_t::name() const {
  // @@protoc_insertion_point(field_get:proto3.achv_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void achv_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.achv_t.name)
}
 void achv_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.achv_t.name)
}
 void achv_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.achv_t.name)
}
 ::std::string* achv_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.achv_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* achv_t::release_name() {
  // @@protoc_insertion_point(field_release:proto3.achv_t.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void achv_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.achv_t.name)
}

// optional uint32 value = 3;
void achv_t::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 achv_t::value() const {
  // @@protoc_insertion_point(field_get:proto3.achv_t.value)
  return value_;
}
 void achv_t::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto3.achv_t.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int game_t::kIdFieldNumber;
const int game_t::kVersionFieldNumber;
const int game_t::kIpFieldNumber;
const int game_t::kPortFieldNumber;
const int game_t::kOccupiedFieldNumber;
const int game_t::kCapacityFieldNumber;
const int game_t::kDescFieldNumber;
const int game_t::kStatusFieldNumber;
const int game_t::kOpenningTimeFieldNumber;
const int game_t::kMaintainStartFieldNumber;
const int game_t::kMaintainEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

game_t::game_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.game_t)
}

void game_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

game_t::game_t(const game_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.game_t)
}

void game_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  version_ = 0u;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  occupied_ = 0u;
  capacity_ = 0u;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  openning_time_ = 0u;
  maintain_start_ = 0u;
  maintain_end_ = 0u;
}

game_t::~game_t() {
  // @@protoc_insertion_point(destructor:proto3.game_t)
  SharedDtor();
}

void game_t::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void game_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const game_t& game_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

game_t* game_t::default_instance_ = NULL;

game_t* game_t::New(::google::protobuf::Arena* arena) const {
  game_t* n = new game_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void game_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.game_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(game_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<game_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, version_);
  ZR_(port_, occupied_);
  ZR_(capacity_, status_);
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(openning_time_, maintain_end_);

#undef ZR_HELPER_
#undef ZR_

}

bool game_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.game_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.game_t.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_occupied;
        break;
      }

      // optional uint32 occupied = 5;
      case 5: {
        if (tag == 40) {
         parse_occupied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupied_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_capacity;
        break;
      }

      // optional uint32 capacity = 6;
      case 6: {
        if (tag == 48) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_desc;
        break;
      }

      // optional string desc = 7;
      case 7: {
        if (tag == 58) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.game_t.desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (tag == 64) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_openning_time;
        break;
      }

      // optional uint32 openning_time = 9;
      case 9: {
        if (tag == 72) {
         parse_openning_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openning_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maintain_start;
        break;
      }

      // optional uint32 maintain_start = 10;
      case 10: {
        if (tag == 80) {
         parse_maintain_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintain_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maintain_end;
        break;
      }

      // optional uint32 maintain_end = 11;
      case 11: {
        if (tag == 88) {
         parse_maintain_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintain_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.game_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.game_t)
  return false;
#undef DO_
}

void game_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.game_t)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.game_t.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional uint32 occupied = 5;
  if (this->occupied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->occupied(), output);
  }

  // optional uint32 capacity = 6;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->capacity(), output);
  }

  // optional string desc = 7;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.game_t.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->desc(), output);
  }

  // optional uint32 status = 8;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional uint32 openning_time = 9;
  if (this->openning_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->openning_time(), output);
  }

  // optional uint32 maintain_start = 10;
  if (this->maintain_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maintain_start(), output);
  }

  // optional uint32 maintain_end = 11;
  if (this->maintain_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maintain_end(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.game_t)
}

int game_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.game_t)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional uint32 occupied = 5;
  if (this->occupied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->occupied());
  }

  // optional uint32 capacity = 6;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capacity());
  }

  // optional string desc = 7;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // optional uint32 status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 openning_time = 9;
  if (this->openning_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->openning_time());
  }

  // optional uint32 maintain_start = 10;
  if (this->maintain_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintain_start());
  }

  // optional uint32 maintain_end = 11;
  if (this->maintain_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintain_end());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const game_t*>(&from));
}

void game_t::MergeFrom(const game_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.game_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.occupied() != 0) {
    set_occupied(from.occupied());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.openning_time() != 0) {
    set_openning_time(from.openning_time());
  }
  if (from.maintain_start() != 0) {
    set_maintain_start(from.maintain_start());
  }
  if (from.maintain_end() != 0) {
    set_maintain_end(from.maintain_end());
  }
}

void game_t::CopyFrom(const game_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.game_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_t::IsInitialized() const {

  return true;
}

void game_t::Swap(game_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void game_t::InternalSwap(game_t* other) {
  std::swap(id_, other->id_);
  std::swap(version_, other->version_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(occupied_, other->occupied_);
  std::swap(capacity_, other->capacity_);
  desc_.Swap(&other->desc_);
  std::swap(status_, other->status_);
  std::swap(openning_time_, other->openning_time_);
  std::swap(maintain_start_, other->maintain_start_);
  std::swap(maintain_end_, other->maintain_end_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string game_t::GetTypeName() const {
  return "proto3.game_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// game_t

// optional uint32 id = 1;
void game_t::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 game_t::id() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.id)
  return id_;
}
 void game_t::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.id)
}

// optional uint32 version = 2;
void game_t::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 game_t::version() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.version)
  return version_;
}
 void game_t::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.version)
}

// optional string ip = 3;
void game_t::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& game_t::ip() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void game_t::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.game_t.ip)
}
 void game_t::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.game_t.ip)
}
 void game_t::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.game_t.ip)
}
 ::std::string* game_t::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto3.game_t.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* game_t::release_ip() {
  // @@protoc_insertion_point(field_release:proto3.game_t.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void game_t::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto3.game_t.ip)
}

// optional uint32 port = 4;
void game_t::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 game_t::port() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.port)
  return port_;
}
 void game_t::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.port)
}

// optional uint32 occupied = 5;
void game_t::clear_occupied() {
  occupied_ = 0u;
}
 ::google::protobuf::uint32 game_t::occupied() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.occupied)
  return occupied_;
}
 void game_t::set_occupied(::google::protobuf::uint32 value) {
  
  occupied_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.occupied)
}

// optional uint32 capacity = 6;
void game_t::clear_capacity() {
  capacity_ = 0u;
}
 ::google::protobuf::uint32 game_t::capacity() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.capacity)
  return capacity_;
}
 void game_t::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.capacity)
}

// optional string desc = 7;
void game_t::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& game_t::desc() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void game_t::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.game_t.desc)
}
 void game_t::set_desc(const char* value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.game_t.desc)
}
 void game_t::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.game_t.desc)
}
 ::std::string* game_t::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:proto3.game_t.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* game_t::release_desc() {
  // @@protoc_insertion_point(field_release:proto3.game_t.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void game_t::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:proto3.game_t.desc)
}

// optional uint32 status = 8;
void game_t::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 game_t::status() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.status)
  return status_;
}
 void game_t::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.status)
}

// optional uint32 openning_time = 9;
void game_t::clear_openning_time() {
  openning_time_ = 0u;
}
 ::google::protobuf::uint32 game_t::openning_time() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.openning_time)
  return openning_time_;
}
 void game_t::set_openning_time(::google::protobuf::uint32 value) {
  
  openning_time_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.openning_time)
}

// optional uint32 maintain_start = 10;
void game_t::clear_maintain_start() {
  maintain_start_ = 0u;
}
 ::google::protobuf::uint32 game_t::maintain_start() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.maintain_start)
  return maintain_start_;
}
 void game_t::set_maintain_start(::google::protobuf::uint32 value) {
  
  maintain_start_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.maintain_start)
}

// optional uint32 maintain_end = 11;
void game_t::clear_maintain_end() {
  maintain_end_ = 0u;
}
 ::google::protobuf::uint32 game_t::maintain_end() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.maintain_end)
  return maintain_end_;
}
 void game_t::set_maintain_end(::google::protobuf::uint32 value) {
  
  maintain_end_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.maintain_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lobby_t::kVersionFieldNumber;
const int lobby_t::kIpFieldNumber;
const int lobby_t::kPortFieldNumber;
const int lobby_t::kOccupiedFieldNumber;
const int lobby_t::kCapacityFieldNumber;
const int lobby_t::kDescFieldNumber;
const int lobby_t::kBulletinFieldNumber;
const int lobby_t::kStatusFieldNumber;
const int lobby_t::kMaintainStartFieldNumber;
const int lobby_t::kMaintainEndFieldNumber;
const int lobby_t::kTimeZoneFieldNumber;
const int lobby_t::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lobby_t::lobby_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.lobby_t)
}

void lobby_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

lobby_t::lobby_t(const lobby_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.lobby_t)
}

void lobby_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  occupied_ = 0u;
  capacity_ = 0u;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  maintain_start_ = 0u;
  maintain_end_ = 0u;
  time_zone_ = 0u;
}

lobby_t::~lobby_t() {
  // @@protoc_insertion_point(destructor:proto3.lobby_t)
  SharedDtor();
}

void lobby_t::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void lobby_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const lobby_t& lobby_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

lobby_t* lobby_t::default_instance_ = NULL;

lobby_t* lobby_t::New(::google::protobuf::Arena* arena) const {
  lobby_t* n = new lobby_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lobby_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.lobby_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(lobby_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<lobby_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, capacity_);
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  ZR_(maintain_start_, time_zone_);

#undef ZR_HELPER_
#undef ZR_

  games_.Clear();
}

bool lobby_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.lobby_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.lobby_t.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_occupied;
        break;
      }

      // optional uint32 occupied = 4;
      case 4: {
        if (tag == 32) {
         parse_occupied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupied_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_capacity;
        break;
      }

      // optional uint32 capacity = 5;
      case 5: {
        if (tag == 40) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // optional string desc = 6;
      case 6: {
        if (tag == 50) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.lobby_t.desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bulletin;
        break;
      }

      // optional string bulletin = 7;
      case 7: {
        if (tag == 58) {
         parse_bulletin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bulletin().data(), this->bulletin().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.lobby_t.bulletin"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (tag == 64) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maintain_start;
        break;
      }

      // optional uint32 maintain_start = 9;
      case 9: {
        if (tag == 72) {
         parse_maintain_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintain_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maintain_end;
        break;
      }

      // optional uint32 maintain_end = 10;
      case 10: {
        if (tag == 80) {
         parse_maintain_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintain_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time_zone;
        break;
      }

      // optional uint32 time_zone = 11;
      case 11: {
        if (tag == 88) {
         parse_time_zone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_zone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_games;
        break;
      }

      // repeated .proto3.game_t games = 12;
      case 12: {
        if (tag == 98) {
         parse_games:
          DO_(input->IncrementRecursionDepth());
         parse_loop_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_games;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.lobby_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.lobby_t)
  return false;
#undef DO_
}

void lobby_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.lobby_t)
  // optional uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.lobby_t.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional uint32 occupied = 4;
  if (this->occupied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->occupied(), output);
  }

  // optional uint32 capacity = 5;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->capacity(), output);
  }

  // optional string desc = 6;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.lobby_t.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->desc(), output);
  }

  // optional string bulletin = 7;
  if (this->bulletin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bulletin().data(), this->bulletin().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.lobby_t.bulletin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bulletin(), output);
  }

  // optional uint32 status = 8;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional uint32 maintain_start = 9;
  if (this->maintain_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->maintain_start(), output);
  }

  // optional uint32 maintain_end = 10;
  if (this->maintain_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maintain_end(), output);
  }

  // optional uint32 time_zone = 11;
  if (this->time_zone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_zone(), output);
  }

  // repeated .proto3.game_t games = 12;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->games(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.lobby_t)
}

int lobby_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.lobby_t)
  int total_size = 0;

  // optional uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional uint32 occupied = 4;
  if (this->occupied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->occupied());
  }

  // optional uint32 capacity = 5;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capacity());
  }

  // optional string desc = 6;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // optional string bulletin = 7;
  if (this->bulletin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bulletin());
  }

  // optional uint32 status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 maintain_start = 9;
  if (this->maintain_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintain_start());
  }

  // optional uint32 maintain_end = 10;
  if (this->maintain_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintain_end());
  }

  // optional uint32 time_zone = 11;
  if (this->time_zone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_zone());
  }

  // repeated .proto3.game_t games = 12;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lobby_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const lobby_t*>(&from));
}

void lobby_t::MergeFrom(const lobby_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.lobby_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  games_.MergeFrom(from.games_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.occupied() != 0) {
    set_occupied(from.occupied());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.bulletin().size() > 0) {

    bulletin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bulletin_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.maintain_start() != 0) {
    set_maintain_start(from.maintain_start());
  }
  if (from.maintain_end() != 0) {
    set_maintain_end(from.maintain_end());
  }
  if (from.time_zone() != 0) {
    set_time_zone(from.time_zone());
  }
}

void lobby_t::CopyFrom(const lobby_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.lobby_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lobby_t::IsInitialized() const {

  return true;
}

void lobby_t::Swap(lobby_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lobby_t::InternalSwap(lobby_t* other) {
  std::swap(version_, other->version_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(occupied_, other->occupied_);
  std::swap(capacity_, other->capacity_);
  desc_.Swap(&other->desc_);
  bulletin_.Swap(&other->bulletin_);
  std::swap(status_, other->status_);
  std::swap(maintain_start_, other->maintain_start_);
  std::swap(maintain_end_, other->maintain_end_);
  std::swap(time_zone_, other->time_zone_);
  games_.UnsafeArenaSwap(&other->games_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string lobby_t::GetTypeName() const {
  return "proto3.lobby_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// lobby_t

// optional uint32 version = 1;
void lobby_t::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::version() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.version)
  return version_;
}
 void lobby_t::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.version)
}

// optional string ip = 2;
void lobby_t::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& lobby_t::ip() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.lobby_t.ip)
}
 void lobby_t::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.lobby_t.ip)
}
 void lobby_t::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.lobby_t.ip)
}
 ::std::string* lobby_t::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto3.lobby_t.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* lobby_t::release_ip() {
  // @@protoc_insertion_point(field_release:proto3.lobby_t.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto3.lobby_t.ip)
}

// optional uint32 port = 3;
void lobby_t::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::port() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.port)
  return port_;
}
 void lobby_t::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.port)
}

// optional uint32 occupied = 4;
void lobby_t::clear_occupied() {
  occupied_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::occupied() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.occupied)
  return occupied_;
}
 void lobby_t::set_occupied(::google::protobuf::uint32 value) {
  
  occupied_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.occupied)
}

// optional uint32 capacity = 5;
void lobby_t::clear_capacity() {
  capacity_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::capacity() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.capacity)
  return capacity_;
}
 void lobby_t::set_capacity(::google::protobuf::uint32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.capacity)
}

// optional string desc = 6;
void lobby_t::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& lobby_t::desc() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.lobby_t.desc)
}
 void lobby_t::set_desc(const char* value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.lobby_t.desc)
}
 void lobby_t::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.lobby_t.desc)
}
 ::std::string* lobby_t::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:proto3.lobby_t.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* lobby_t::release_desc() {
  // @@protoc_insertion_point(field_release:proto3.lobby_t.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:proto3.lobby_t.desc)
}

// optional string bulletin = 7;
void lobby_t::clear_bulletin() {
  bulletin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& lobby_t::bulletin() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.bulletin)
  return bulletin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_bulletin(const ::std::string& value) {
  
  bulletin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.lobby_t.bulletin)
}
 void lobby_t::set_bulletin(const char* value) {
  
  bulletin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.lobby_t.bulletin)
}
 void lobby_t::set_bulletin(const char* value, size_t size) {
  
  bulletin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.lobby_t.bulletin)
}
 ::std::string* lobby_t::mutable_bulletin() {
  
  // @@protoc_insertion_point(field_mutable:proto3.lobby_t.bulletin)
  return bulletin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* lobby_t::release_bulletin() {
  // @@protoc_insertion_point(field_release:proto3.lobby_t.bulletin)
  
  return bulletin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_allocated_bulletin(::std::string* bulletin) {
  if (bulletin != NULL) {
    
  } else {
    
  }
  bulletin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bulletin);
  // @@protoc_insertion_point(field_set_allocated:proto3.lobby_t.bulletin)
}

// optional uint32 status = 8;
void lobby_t::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::status() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.status)
  return status_;
}
 void lobby_t::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.status)
}

// optional uint32 maintain_start = 9;
void lobby_t::clear_maintain_start() {
  maintain_start_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::maintain_start() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.maintain_start)
  return maintain_start_;
}
 void lobby_t::set_maintain_start(::google::protobuf::uint32 value) {
  
  maintain_start_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.maintain_start)
}

// optional uint32 maintain_end = 10;
void lobby_t::clear_maintain_end() {
  maintain_end_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::maintain_end() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.maintain_end)
  return maintain_end_;
}
 void lobby_t::set_maintain_end(::google::protobuf::uint32 value) {
  
  maintain_end_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.maintain_end)
}

// optional uint32 time_zone = 11;
void lobby_t::clear_time_zone() {
  time_zone_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::time_zone() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.time_zone)
  return time_zone_;
}
 void lobby_t::set_time_zone(::google::protobuf::uint32 value) {
  
  time_zone_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.time_zone)
}

// repeated .proto3.game_t games = 12;
int lobby_t::games_size() const {
  return games_.size();
}
void lobby_t::clear_games() {
  games_.Clear();
}
const ::proto3::game_t& lobby_t::games(int index) const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.games)
  return games_.Get(index);
}
::proto3::game_t* lobby_t::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.lobby_t.games)
  return games_.Mutable(index);
}
::proto3::game_t* lobby_t::add_games() {
  // @@protoc_insertion_point(field_add:proto3.lobby_t.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::game_t >*
lobby_t::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto3.lobby_t.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::game_t >&
lobby_t::games() const {
  // @@protoc_insertion_point(field_list:proto3.lobby_t.games)
  return games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pawn_t::kIdFieldNumber;
const int pawn_t::kColorFieldNumber;
const int pawn_t::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pawn_t::pawn_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.pawn_t)
}

void pawn_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pawn_t::pawn_t(const pawn_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.pawn_t)
}

void pawn_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  color_ = 0u;
  value_ = 0u;
}

pawn_t::~pawn_t() {
  // @@protoc_insertion_point(destructor:proto3.pawn_t)
  SharedDtor();
}

void pawn_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void pawn_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const pawn_t& pawn_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

pawn_t* pawn_t::default_instance_ = NULL;

pawn_t* pawn_t::New(::google::protobuf::Arena* arena) const {
  pawn_t* n = new pawn_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pawn_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.pawn_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pawn_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pawn_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool pawn_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.pawn_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional uint32 color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.pawn_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.pawn_t)
  return false;
#undef DO_
}

void pawn_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.pawn_t)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // optional uint32 value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.pawn_t)
}

int pawn_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.pawn_t)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color());
  }

  // optional uint32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pawn_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const pawn_t*>(&from));
}

void pawn_t::MergeFrom(const pawn_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.pawn_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void pawn_t::CopyFrom(const pawn_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.pawn_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pawn_t::IsInitialized() const {

  return true;
}

void pawn_t::Swap(pawn_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pawn_t::InternalSwap(pawn_t* other) {
  std::swap(id_, other->id_);
  std::swap(color_, other->color_);
  std::swap(value_, other->value_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string pawn_t::GetTypeName() const {
  return "proto3.pawn_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pawn_t

// optional uint32 id = 1;
void pawn_t::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 pawn_t::id() const {
  // @@protoc_insertion_point(field_get:proto3.pawn_t.id)
  return id_;
}
 void pawn_t::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto3.pawn_t.id)
}

// optional uint32 color = 2;
void pawn_t::clear_color() {
  color_ = 0u;
}
 ::google::protobuf::uint32 pawn_t::color() const {
  // @@protoc_insertion_point(field_get:proto3.pawn_t.color)
  return color_;
}
 void pawn_t::set_color(::google::protobuf::uint32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:proto3.pawn_t.color)
}

// optional uint32 value = 3;
void pawn_t::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 pawn_t::value() const {
  // @@protoc_insertion_point(field_get:proto3.pawn_t.value)
  return value_;
}
 void pawn_t::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto3.pawn_t.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bunch_t::kTypeFieldNumber;
const int bunch_t::kPosFieldNumber;
const int bunch_t::kPawnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bunch_t::bunch_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.bunch_t)
}

void bunch_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

bunch_t::bunch_t(const bunch_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.bunch_t)
}

void bunch_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  pos_ = 0u;
}

bunch_t::~bunch_t() {
  // @@protoc_insertion_point(destructor:proto3.bunch_t)
  SharedDtor();
}

void bunch_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void bunch_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const bunch_t& bunch_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

bunch_t* bunch_t::default_instance_ = NULL;

bunch_t* bunch_t::New(::google::protobuf::Arena* arena) const {
  bunch_t* n = new bunch_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bunch_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.bunch_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(bunch_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<bunch_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, pos_);

#undef ZR_HELPER_
#undef ZR_

  pawns_.Clear();
}

bool bunch_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.bunch_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_enum type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pawns;
        break;
      }

      // repeated uint32 pawns = 3;
      case 3: {
        if (tag == 26) {
         parse_pawns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pawns())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_pawns())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.bunch_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.bunch_t)
  return false;
#undef DO_
}

void bunch_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.bunch_t)
  // optional .proto3.pb_enum type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // repeated uint32 pawns = 3;
  if (this->pawns_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pawns_cached_byte_size_);
  }
  for (int i = 0; i < this->pawns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->pawns(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.bunch_t)
}

int bunch_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.bunch_t)
  int total_size = 0;

  // optional .proto3.pb_enum type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // repeated uint32 pawns = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pawns_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pawns(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pawns_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bunch_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const bunch_t*>(&from));
}

void bunch_t::MergeFrom(const bunch_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.bunch_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pawns_.MergeFrom(from.pawns_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void bunch_t::CopyFrom(const bunch_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.bunch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bunch_t::IsInitialized() const {

  return true;
}

void bunch_t::Swap(bunch_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bunch_t::InternalSwap(bunch_t* other) {
  std::swap(type_, other->type_);
  std::swap(pos_, other->pos_);
  pawns_.UnsafeArenaSwap(&other->pawns_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string bunch_t::GetTypeName() const {
  return "proto3.bunch_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bunch_t

// optional .proto3.pb_enum type = 1;
void bunch_t::clear_type() {
  type_ = 0;
}
 ::proto3::pb_enum bunch_t::type() const {
  // @@protoc_insertion_point(field_get:proto3.bunch_t.type)
  return static_cast< ::proto3::pb_enum >(type_);
}
 void bunch_t::set_type(::proto3::pb_enum value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3.bunch_t.type)
}

// optional uint32 pos = 2;
void bunch_t::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 bunch_t::pos() const {
  // @@protoc_insertion_point(field_get:proto3.bunch_t.pos)
  return pos_;
}
 void bunch_t::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.bunch_t.pos)
}

// repeated uint32 pawns = 3;
int bunch_t::pawns_size() const {
  return pawns_.size();
}
void bunch_t::clear_pawns() {
  pawns_.Clear();
}
 ::google::protobuf::uint32 bunch_t::pawns(int index) const {
  // @@protoc_insertion_point(field_get:proto3.bunch_t.pawns)
  return pawns_.Get(index);
}
 void bunch_t::set_pawns(int index, ::google::protobuf::uint32 value) {
  pawns_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.bunch_t.pawns)
}
 void bunch_t::add_pawns(::google::protobuf::uint32 value) {
  pawns_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.bunch_t.pawns)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
bunch_t::pawns() const {
  // @@protoc_insertion_point(field_list:proto3.bunch_t.pawns)
  return pawns_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
bunch_t::mutable_pawns() {
  // @@protoc_insertion_point(field_mutable_list:proto3.bunch_t.pawns)
  return &pawns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int game_data_t::kHandsFieldNumber;
const int game_data_t::kDiscardsFieldNumber;
const int game_data_t::kBunchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

game_data_t::game_data_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.game_data_t)
}

void game_data_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

game_data_t::game_data_t(const game_data_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.game_data_t)
}

void game_data_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

game_data_t::~game_data_t() {
  // @@protoc_insertion_point(destructor:proto3.game_data_t)
  SharedDtor();
}

void game_data_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void game_data_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const game_data_t& game_data_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

game_data_t* game_data_t::default_instance_ = NULL;

game_data_t* game_data_t::New(::google::protobuf::Arena* arena) const {
  game_data_t* n = new game_data_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void game_data_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.game_data_t)
  hands_.Clear();
  discards_.Clear();
  bunch_.Clear();
}

bool game_data_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.game_data_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hands = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hands())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_hands())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_discards;
        break;
      }

      // repeated uint32 discards = 2;
      case 2: {
        if (tag == 18) {
         parse_discards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_discards())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_discards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bunch;
        break;
      }

      // repeated .proto3.bunch_t bunch = 3;
      case 3: {
        if (tag == 26) {
         parse_bunch:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_bunch;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.game_data_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.game_data_t)
  return false;
#undef DO_
}

void game_data_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.game_data_t)
  // repeated uint32 hands = 1;
  if (this->hands_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hands_cached_byte_size_);
  }
  for (int i = 0; i < this->hands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->hands(i), output);
  }

  // repeated uint32 discards = 2;
  if (this->discards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_discards_cached_byte_size_);
  }
  for (int i = 0; i < this->discards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->discards(i), output);
  }

  // repeated .proto3.bunch_t bunch = 3;
  for (unsigned int i = 0, n = this->bunch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bunch(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.game_data_t)
}

int game_data_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.game_data_t)
  int total_size = 0;

  // repeated uint32 hands = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hands(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hands_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 discards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->discards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->discards(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _discards_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto3.bunch_t bunch = 3;
  total_size += 1 * this->bunch_size();
  for (int i = 0; i < this->bunch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bunch(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_data_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const game_data_t*>(&from));
}

void game_data_t::MergeFrom(const game_data_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.game_data_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  hands_.MergeFrom(from.hands_);
  discards_.MergeFrom(from.discards_);
  bunch_.MergeFrom(from.bunch_);
}

void game_data_t::CopyFrom(const game_data_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.game_data_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_data_t::IsInitialized() const {

  return true;
}

void game_data_t::Swap(game_data_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void game_data_t::InternalSwap(game_data_t* other) {
  hands_.UnsafeArenaSwap(&other->hands_);
  discards_.UnsafeArenaSwap(&other->discards_);
  bunch_.UnsafeArenaSwap(&other->bunch_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string game_data_t::GetTypeName() const {
  return "proto3.game_data_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// game_data_t

// repeated uint32 hands = 1;
int game_data_t::hands_size() const {
  return hands_.size();
}
void game_data_t::clear_hands() {
  hands_.Clear();
}
 ::google::protobuf::uint32 game_data_t::hands(int index) const {
  // @@protoc_insertion_point(field_get:proto3.game_data_t.hands)
  return hands_.Get(index);
}
 void game_data_t::set_hands(int index, ::google::protobuf::uint32 value) {
  hands_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.game_data_t.hands)
}
 void game_data_t::add_hands(::google::protobuf::uint32 value) {
  hands_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.game_data_t.hands)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
game_data_t::hands() const {
  // @@protoc_insertion_point(field_list:proto3.game_data_t.hands)
  return hands_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
game_data_t::mutable_hands() {
  // @@protoc_insertion_point(field_mutable_list:proto3.game_data_t.hands)
  return &hands_;
}

// repeated uint32 discards = 2;
int game_data_t::discards_size() const {
  return discards_.size();
}
void game_data_t::clear_discards() {
  discards_.Clear();
}
 ::google::protobuf::uint32 game_data_t::discards(int index) const {
  // @@protoc_insertion_point(field_get:proto3.game_data_t.discards)
  return discards_.Get(index);
}
 void game_data_t::set_discards(int index, ::google::protobuf::uint32 value) {
  discards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.game_data_t.discards)
}
 void game_data_t::add_discards(::google::protobuf::uint32 value) {
  discards_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.game_data_t.discards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
game_data_t::discards() const {
  // @@protoc_insertion_point(field_list:proto3.game_data_t.discards)
  return discards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
game_data_t::mutable_discards() {
  // @@protoc_insertion_point(field_mutable_list:proto3.game_data_t.discards)
  return &discards_;
}

// repeated .proto3.bunch_t bunch = 3;
int game_data_t::bunch_size() const {
  return bunch_.size();
}
void game_data_t::clear_bunch() {
  bunch_.Clear();
}
const ::proto3::bunch_t& game_data_t::bunch(int index) const {
  // @@protoc_insertion_point(field_get:proto3.game_data_t.bunch)
  return bunch_.Get(index);
}
::proto3::bunch_t* game_data_t::mutable_bunch(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.game_data_t.bunch)
  return bunch_.Mutable(index);
}
::proto3::bunch_t* game_data_t::add_bunch() {
  // @@protoc_insertion_point(field_add:proto3.game_data_t.bunch)
  return bunch_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >*
game_data_t::mutable_bunch() {
  // @@protoc_insertion_point(field_mutable_list:proto3.game_data_t.bunch)
  return &bunch_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >&
game_data_t::bunch() const {
  // @@protoc_insertion_point(field_list:proto3.game_data_t.bunch)
  return bunch_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBase::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBase::MsgBase()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgBase)
}

void MsgBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgBase::MsgBase(const MsgBase& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgBase)
}

void MsgBase::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:proto3.MsgBase)
  SharedDtor();
}

void MsgBase::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgBase& MsgBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgBase* MsgBase::default_instance_ = NULL;

MsgBase* MsgBase::New(::google::protobuf::Arena* arena) const {
  MsgBase* n = new MsgBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgBase)
  mid_ = 0;
}

bool MsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgBase)
  return false;
#undef DO_
}

void MsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgBase)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgBase)
}

int MsgBase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgBase)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgBase*>(&from));
}

void MsgBase::MergeFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {

  return true;
}

void MsgBase::Swap(MsgBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBase::InternalSwap(MsgBase* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgBase::GetTypeName() const {
  return "proto3.MsgBase";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgBase

// optional .proto3.pb_msg mid = 1;
void MsgBase::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgBase::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgBase.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgBase::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgBase.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCSLogin::kMidFieldNumber;
const int MsgCSLogin::kVersionFieldNumber;
const int MsgCSLogin::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCSLogin::MsgCSLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCSLogin)
}

void MsgCSLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_ = const_cast< ::proto3::user_t*>(
      ::proto3::user_t::internal_default_instance());
#else
  user_ = const_cast< ::proto3::user_t*>(&::proto3::user_t::default_instance());
#endif
}

MsgCSLogin::MsgCSLogin(const MsgCSLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCSLogin)
}

void MsgCSLogin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  version_ = 0u;
  user_ = NULL;
}

MsgCSLogin::~MsgCSLogin() {
  // @@protoc_insertion_point(destructor:proto3.MsgCSLogin)
  SharedDtor();
}

void MsgCSLogin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_;
  }
}

void MsgCSLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCSLogin& MsgCSLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCSLogin* MsgCSLogin::default_instance_ = NULL;

MsgCSLogin* MsgCSLogin::New(::google::protobuf::Arena* arena) const {
  MsgCSLogin* n = new MsgCSLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCSLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCSLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCSLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCSLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, version_);
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCSLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCSLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .proto3.user_t user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCSLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCSLogin)
  return false;
#undef DO_
}

void MsgCSLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCSLogin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.user_t user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->user_, output);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCSLogin)
}

int MsgCSLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCSLogin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional .proto3.user_t user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCSLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCSLogin*>(&from));
}

void MsgCSLogin::MergeFrom(const MsgCSLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCSLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.has_user()) {
    mutable_user()->::proto3::user_t::MergeFrom(from.user());
  }
}

void MsgCSLogin::CopyFrom(const MsgCSLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCSLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCSLogin::IsInitialized() const {

  return true;
}

void MsgCSLogin::Swap(MsgCSLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCSLogin::InternalSwap(MsgCSLogin* other) {
  std::swap(mid_, other->mid_);
  std::swap(version_, other->version_);
  std::swap(user_, other->user_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCSLogin::GetTypeName() const {
  return "proto3.MsgCSLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCSLogin

// optional .proto3.pb_msg mid = 1;
void MsgCSLogin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCSLogin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCSLogin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCSLogin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCSLogin.mid)
}

// optional uint32 version = 3;
void MsgCSLogin::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgCSLogin::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCSLogin.version)
  return version_;
}
 void MsgCSLogin::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCSLogin.version)
}

// optional .proto3.user_t user = 2;
bool MsgCSLogin::has_user() const {
  return !_is_default_instance_ && user_ != NULL;
}
void MsgCSLogin::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::proto3::user_t& MsgCSLogin::user() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCSLogin.user)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_ != NULL ? *user_ : *default_instance().user_;
#else
  return user_ != NULL ? *user_ : *default_instance_->user_;
#endif
}
::proto3::user_t* MsgCSLogin::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::proto3::user_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCSLogin.user)
  return user_;
}
::proto3::user_t* MsgCSLogin::release_user() {
  // @@protoc_insertion_point(field_release:proto3.MsgCSLogin.user)
  
  ::proto3::user_t* temp = user_;
  user_ = NULL;
  return temp;
}
void MsgCSLogin::set_allocated_user(::proto3::user_t* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCSLogin.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgSCLogin::kMidFieldNumber;
const int MsgSCLogin::kUidFieldNumber;
const int MsgSCLogin::kVersionFieldNumber;
const int MsgSCLogin::kSessionFieldNumber;
const int MsgSCLogin::kIpFieldNumber;
const int MsgSCLogin::kPortFieldNumber;
const int MsgSCLogin::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgSCLogin::MsgSCLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgSCLogin)
}

void MsgSCLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgSCLogin::MsgSCLogin(const MsgSCLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgSCLogin)
}

void MsgSCLogin::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  result_ = 0;
}

MsgSCLogin::~MsgSCLogin() {
  // @@protoc_insertion_point(destructor:proto3.MsgSCLogin)
  SharedDtor();
}

void MsgSCLogin::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgSCLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgSCLogin& MsgSCLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgSCLogin* MsgSCLogin::default_instance_ = NULL;

MsgSCLogin* MsgSCLogin::New(::google::protobuf::Arena* arena) const {
  MsgSCLogin* n = new MsgSCLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgSCLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgSCLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgSCLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgSCLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, session_);
  ZR_(port_, result_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgSCLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgSCLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgSCLogin.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }

      // optional uint64 session = 4;
      case 4: {
        if (tag == 32) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (tag == 42) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgSCLogin.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional uint32 port = 6;
      case 6: {
        if (tag == 48) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 7;
      case 7: {
        if (tag == 56) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgSCLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgSCLogin)
  return false;
#undef DO_
}

void MsgSCLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgSCLogin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgSCLogin.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->session(), output);
  }

  // optional string ip = 5;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgSCLogin.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip(), output);
  }

  // optional uint32 port = 6;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port(), output);
  }

  // optional .proto3.pb_enum result = 7;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgSCLogin)
}

int MsgSCLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgSCLogin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  // optional string ip = 5;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 6;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional .proto3.pb_enum result = 7;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSCLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgSCLogin*>(&from));
}

void MsgSCLogin::MergeFrom(const MsgSCLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgSCLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgSCLogin::CopyFrom(const MsgSCLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgSCLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSCLogin::IsInitialized() const {

  return true;
}

void MsgSCLogin::Swap(MsgSCLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgSCLogin::InternalSwap(MsgSCLogin* other) {
  std::swap(mid_, other->mid_);
  uid_.Swap(&other->uid_);
  std::swap(version_, other->version_);
  std::swap(session_, other->session_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgSCLogin::GetTypeName() const {
  return "proto3.MsgSCLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgSCLogin

// optional .proto3.pb_msg mid = 1;
void MsgSCLogin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgSCLogin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgSCLogin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgSCLogin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgSCLogin.mid)
}

// optional string uid = 2;
void MsgSCLogin::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgSCLogin::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgSCLogin.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgSCLogin::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgSCLogin.uid)
}
 void MsgSCLogin::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgSCLogin.uid)
}
 void MsgSCLogin::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgSCLogin.uid)
}
 ::std::string* MsgSCLogin::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgSCLogin.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgSCLogin::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgSCLogin.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgSCLogin::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgSCLogin.uid)
}

// optional uint32 version = 3;
void MsgSCLogin::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgSCLogin::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgSCLogin.version)
  return version_;
}
 void MsgSCLogin::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgSCLogin.version)
}

// optional uint64 session = 4;
void MsgSCLogin::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgSCLogin::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgSCLogin.session)
  return session_;
}
 void MsgSCLogin::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgSCLogin.session)
}

// optional string ip = 5;
void MsgSCLogin::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgSCLogin::ip() const {
  // @@protoc_insertion_point(field_get:proto3.MsgSCLogin.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgSCLogin::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgSCLogin.ip)
}
 void MsgSCLogin::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgSCLogin.ip)
}
 void MsgSCLogin::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgSCLogin.ip)
}
 ::std::string* MsgSCLogin::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgSCLogin.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgSCLogin::release_ip() {
  // @@protoc_insertion_point(field_release:proto3.MsgSCLogin.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgSCLogin::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgSCLogin.ip)
}

// optional uint32 port = 6;
void MsgSCLogin::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 MsgSCLogin::port() const {
  // @@protoc_insertion_point(field_get:proto3.MsgSCLogin.port)
  return port_;
}
 void MsgSCLogin::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgSCLogin.port)
}

// optional .proto3.pb_enum result = 7;
void MsgSCLogin::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgSCLogin::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgSCLogin.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgSCLogin::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgSCLogin.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCLEnter::kMidFieldNumber;
const int MsgCLEnter::kUidFieldNumber;
const int MsgCLEnter::kVersionFieldNumber;
const int MsgCLEnter::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCLEnter::MsgCLEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCLEnter)
}

void MsgCLEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCLEnter::MsgCLEnter(const MsgCLEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCLEnter)
}

void MsgCLEnter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
}

MsgCLEnter::~MsgCLEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgCLEnter)
  SharedDtor();
}

void MsgCLEnter::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCLEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCLEnter& MsgCLEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCLEnter* MsgCLEnter::default_instance_ = NULL;

MsgCLEnter* MsgCLEnter::New(::google::protobuf::Arena* arena) const {
  MsgCLEnter* n = new MsgCLEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCLEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCLEnter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCLEnter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCLEnter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, session_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCLEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCLEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCLEnter.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }

      // optional uint64 session = 4;
      case 4: {
        if (tag == 32) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCLEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCLEnter)
  return false;
#undef DO_
}

void MsgCLEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCLEnter)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCLEnter.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCLEnter)
}

int MsgCLEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCLEnter)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCLEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCLEnter*>(&from));
}

void MsgCLEnter::MergeFrom(const MsgCLEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCLEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
}

void MsgCLEnter::CopyFrom(const MsgCLEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCLEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCLEnter::IsInitialized() const {

  return true;
}

void MsgCLEnter::Swap(MsgCLEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCLEnter::InternalSwap(MsgCLEnter* other) {
  std::swap(mid_, other->mid_);
  uid_.Swap(&other->uid_);
  std::swap(version_, other->version_);
  std::swap(session_, other->session_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCLEnter::GetTypeName() const {
  return "proto3.MsgCLEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCLEnter

// optional .proto3.pb_msg mid = 1;
void MsgCLEnter::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCLEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLEnter.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCLEnter::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLEnter.mid)
}

// optional string uid = 2;
void MsgCLEnter::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCLEnter::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLEnter.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCLEnter::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCLEnter.uid)
}
 void MsgCLEnter::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCLEnter.uid)
}
 void MsgCLEnter::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCLEnter.uid)
}
 ::std::string* MsgCLEnter::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCLEnter.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCLEnter::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCLEnter.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCLEnter::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCLEnter.uid)
}

// optional uint32 version = 3;
void MsgCLEnter::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgCLEnter::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLEnter.version)
  return version_;
}
 void MsgCLEnter::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLEnter.version)
}

// optional uint64 session = 4;
void MsgCLEnter::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCLEnter::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLEnter.session)
  return session_;
}
 void MsgCLEnter::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLEnter.session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgLCEnter::kMidFieldNumber;
const int MsgLCEnter::kKeyFieldNumber;
const int MsgLCEnter::kPlayerFieldNumber;
const int MsgLCEnter::kLobbyFieldNumber;
const int MsgLCEnter::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgLCEnter::MsgLCEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgLCEnter)
}

void MsgLCEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_ = const_cast< ::proto3::player_t*>(
      ::proto3::player_t::internal_default_instance());
#else
  player_ = const_cast< ::proto3::player_t*>(&::proto3::player_t::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  lobby_ = const_cast< ::proto3::lobby_t*>(
      ::proto3::lobby_t::internal_default_instance());
#else
  lobby_ = const_cast< ::proto3::lobby_t*>(&::proto3::lobby_t::default_instance());
#endif
}

MsgLCEnter::MsgLCEnter(const MsgLCEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgLCEnter)
}

void MsgLCEnter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  key_ = 0u;
  player_ = NULL;
  lobby_ = NULL;
  result_ = 0;
}

MsgLCEnter::~MsgLCEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgLCEnter)
  SharedDtor();
}

void MsgLCEnter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_;
    delete lobby_;
  }
}

void MsgLCEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgLCEnter& MsgLCEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgLCEnter* MsgLCEnter::default_instance_ = NULL;

MsgLCEnter* MsgLCEnter::New(::google::protobuf::Arena* arena) const {
  MsgLCEnter* n = new MsgLCEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgLCEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgLCEnter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgLCEnter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgLCEnter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, key_);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
  if (GetArenaNoVirtual() == NULL && lobby_ != NULL) delete lobby_;
  lobby_ = NULL;
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgLCEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgLCEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional uint32 key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player;
        break;
      }

      // optional .proto3.player_t player = 3;
      case 3: {
        if (tag == 26) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lobby;
        break;
      }

      // optional .proto3.lobby_t lobby = 4;
      case 4: {
        if (tag == 34) {
         parse_lobby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lobby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgLCEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgLCEnter)
  return false;
#undef DO_
}

void MsgLCEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgLCEnter)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 key = 2;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key(), output);
  }

  // optional .proto3.player_t player = 3;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->player_, output);
  }

  // optional .proto3.lobby_t lobby = 4;
  if (this->has_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->lobby_, output);
  }

  // optional .proto3.pb_enum result = 5;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgLCEnter)
}

int MsgLCEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgLCEnter)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 key = 2;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }

  // optional .proto3.player_t player = 3;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional .proto3.lobby_t lobby = 4;
  if (this->has_lobby()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lobby_);
  }

  // optional .proto3.pb_enum result = 5;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLCEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgLCEnter*>(&from));
}

void MsgLCEnter::MergeFrom(const MsgLCEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgLCEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.has_player()) {
    mutable_player()->::proto3::player_t::MergeFrom(from.player());
  }
  if (from.has_lobby()) {
    mutable_lobby()->::proto3::lobby_t::MergeFrom(from.lobby());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgLCEnter::CopyFrom(const MsgLCEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgLCEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLCEnter::IsInitialized() const {

  return true;
}

void MsgLCEnter::Swap(MsgLCEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgLCEnter::InternalSwap(MsgLCEnter* other) {
  std::swap(mid_, other->mid_);
  std::swap(key_, other->key_);
  std::swap(player_, other->player_);
  std::swap(lobby_, other->lobby_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgLCEnter::GetTypeName() const {
  return "proto3.MsgLCEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgLCEnter

// optional .proto3.pb_msg mid = 1;
void MsgLCEnter::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgLCEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCEnter.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgLCEnter::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCEnter.mid)
}

// optional uint32 key = 2;
void MsgLCEnter::clear_key() {
  key_ = 0u;
}
 ::google::protobuf::uint32 MsgLCEnter::key() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCEnter.key)
  return key_;
}
 void MsgLCEnter::set_key(::google::protobuf::uint32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCEnter.key)
}

// optional .proto3.player_t player = 3;
bool MsgLCEnter::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void MsgLCEnter::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3::player_t& MsgLCEnter::player() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCEnter.player)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_ != NULL ? *player_ : *default_instance().player_;
#else
  return player_ != NULL ? *player_ : *default_instance_->player_;
#endif
}
::proto3::player_t* MsgLCEnter::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3::player_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgLCEnter.player)
  return player_;
}
::proto3::player_t* MsgLCEnter::release_player() {
  // @@protoc_insertion_point(field_release:proto3.MsgLCEnter.player)
  
  ::proto3::player_t* temp = player_;
  player_ = NULL;
  return temp;
}
void MsgLCEnter::set_allocated_player(::proto3::player_t* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgLCEnter.player)
}

// optional .proto3.lobby_t lobby = 4;
bool MsgLCEnter::has_lobby() const {
  return !_is_default_instance_ && lobby_ != NULL;
}
void MsgLCEnter::clear_lobby() {
  if (GetArenaNoVirtual() == NULL && lobby_ != NULL) delete lobby_;
  lobby_ = NULL;
}
const ::proto3::lobby_t& MsgLCEnter::lobby() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCEnter.lobby)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return lobby_ != NULL ? *lobby_ : *default_instance().lobby_;
#else
  return lobby_ != NULL ? *lobby_ : *default_instance_->lobby_;
#endif
}
::proto3::lobby_t* MsgLCEnter::mutable_lobby() {
  
  if (lobby_ == NULL) {
    lobby_ = new ::proto3::lobby_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgLCEnter.lobby)
  return lobby_;
}
::proto3::lobby_t* MsgLCEnter::release_lobby() {
  // @@protoc_insertion_point(field_release:proto3.MsgLCEnter.lobby)
  
  ::proto3::lobby_t* temp = lobby_;
  lobby_ = NULL;
  return temp;
}
void MsgLCEnter::set_allocated_lobby(::proto3::lobby_t* lobby) {
  delete lobby_;
  lobby_ = lobby;
  if (lobby) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgLCEnter.lobby)
}

// optional .proto3.pb_enum result = 5;
void MsgLCEnter::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgLCEnter::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCEnter.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgLCEnter::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCEnter.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNEnter::kMidFieldNumber;
const int MsgCNEnter::kUidFieldNumber;
const int MsgCNEnter::kVersionFieldNumber;
const int MsgCNEnter::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNEnter::MsgCNEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNEnter)
}

void MsgCNEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNEnter::MsgCNEnter(const MsgCNEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNEnter)
}

void MsgCNEnter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
}

MsgCNEnter::~MsgCNEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNEnter)
  SharedDtor();
}

void MsgCNEnter::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNEnter& MsgCNEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNEnter* MsgCNEnter::default_instance_ = NULL;

MsgCNEnter* MsgCNEnter::New(::google::protobuf::Arena* arena) const {
  MsgCNEnter* n = new MsgCNEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNEnter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCNEnter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCNEnter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, session_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCNEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCNEnter.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }

      // optional uint64 session = 4;
      case 4: {
        if (tag == 32) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNEnter)
  return false;
#undef DO_
}

void MsgCNEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNEnter)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCNEnter.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNEnter)
}

int MsgCNEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNEnter)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNEnter*>(&from));
}

void MsgCNEnter::MergeFrom(const MsgCNEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
}

void MsgCNEnter::CopyFrom(const MsgCNEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNEnter::IsInitialized() const {

  return true;
}

void MsgCNEnter::Swap(MsgCNEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNEnter::InternalSwap(MsgCNEnter* other) {
  std::swap(mid_, other->mid_);
  uid_.Swap(&other->uid_);
  std::swap(version_, other->version_);
  std::swap(session_, other->session_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNEnter::GetTypeName() const {
  return "proto3.MsgCNEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNEnter

// optional .proto3.pb_msg mid = 1;
void MsgCNEnter::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNEnter.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNEnter::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNEnter.mid)
}

// optional string uid = 2;
void MsgCNEnter::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCNEnter::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNEnter.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNEnter::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCNEnter.uid)
}
 void MsgCNEnter::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCNEnter.uid)
}
 void MsgCNEnter::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCNEnter.uid)
}
 ::std::string* MsgCNEnter::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNEnter.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCNEnter::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNEnter.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNEnter::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNEnter.uid)
}

// optional uint32 version = 3;
void MsgCNEnter::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgCNEnter::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNEnter.version)
  return version_;
}
 void MsgCNEnter::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNEnter.version)
}

// optional uint64 session = 4;
void MsgCNEnter::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCNEnter::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNEnter.session)
  return session_;
}
 void MsgCNEnter::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNEnter.session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCEnter::kMidFieldNumber;
const int MsgNCEnter::kPlayerFieldNumber;
const int MsgNCEnter::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCEnter::MsgNCEnter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCEnter)
}

void MsgNCEnter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_ = const_cast< ::proto3::player_t*>(
      ::proto3::player_t::internal_default_instance());
#else
  player_ = const_cast< ::proto3::player_t*>(&::proto3::player_t::default_instance());
#endif
}

MsgNCEnter::MsgNCEnter(const MsgNCEnter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCEnter)
}

void MsgNCEnter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  player_ = NULL;
  result_ = 0;
}

MsgNCEnter::~MsgNCEnter() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCEnter)
  SharedDtor();
}

void MsgNCEnter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_;
  }
}

void MsgNCEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCEnter& MsgNCEnter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCEnter* MsgNCEnter::default_instance_ = NULL;

MsgNCEnter* MsgNCEnter::New(::google::protobuf::Arena* arena) const {
  MsgNCEnter* n = new MsgNCEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCEnter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCEnter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCEnter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .proto3.player_t player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCEnter)
  return false;
#undef DO_
}

void MsgNCEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCEnter)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.player_t player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->player_, output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCEnter)
}

int MsgNCEnter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCEnter)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.player_t player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCEnter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCEnter*>(&from));
}

void MsgNCEnter::MergeFrom(const MsgNCEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCEnter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_player()) {
    mutable_player()->::proto3::player_t::MergeFrom(from.player());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCEnter::CopyFrom(const MsgNCEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCEnter::IsInitialized() const {

  return true;
}

void MsgNCEnter::Swap(MsgNCEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCEnter::InternalSwap(MsgNCEnter* other) {
  std::swap(mid_, other->mid_);
  std::swap(player_, other->player_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCEnter::GetTypeName() const {
  return "proto3.MsgNCEnter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCEnter

// optional .proto3.pb_msg mid = 1;
void MsgNCEnter::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCEnter::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCEnter.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCEnter::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCEnter.mid)
}

// optional .proto3.player_t player = 2;
bool MsgNCEnter::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void MsgNCEnter::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3::player_t& MsgNCEnter::player() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCEnter.player)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_ != NULL ? *player_ : *default_instance().player_;
#else
  return player_ != NULL ? *player_ : *default_instance_->player_;
#endif
}
::proto3::player_t* MsgNCEnter::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3::player_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCEnter.player)
  return player_;
}
::proto3::player_t* MsgNCEnter::release_player() {
  // @@protoc_insertion_point(field_release:proto3.MsgNCEnter.player)
  
  ::proto3::player_t* temp = player_;
  player_ = NULL;
  return temp;
}
void MsgNCEnter::set_allocated_player(::proto3::player_t* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgNCEnter.player)
}

// optional .proto3.pb_enum result = 3;
void MsgNCEnter::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCEnter::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCEnter.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCEnter::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCEnter.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNCreate::kMidFieldNumber;
const int MsgCNCreate::kGameFieldNumber;
const int MsgCNCreate::kOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNCreate::MsgCNCreate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNCreate)
}

void MsgCNCreate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNCreate::MsgCNCreate(const MsgCNCreate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNCreate)
}

void MsgCNCreate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  game_ = 0;
}

MsgCNCreate::~MsgCNCreate() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNCreate)
  SharedDtor();
}

void MsgCNCreate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNCreate& MsgCNCreate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNCreate* MsgCNCreate::default_instance_ = NULL;

MsgCNCreate* MsgCNCreate::New(::google::protobuf::Arena* arena) const {
  MsgCNCreate* n = new MsgCNCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNCreate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCNCreate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCNCreate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, game_);

#undef ZR_HELPER_
#undef ZR_

  option_.Clear();
}

bool MsgCNCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game;
        break;
      }

      // optional .proto3.pb_enum game = 2;
      case 2: {
        if (tag == 16) {
         parse_game:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_game(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_option;
        break;
      }

      // repeated .proto3.key_value option = 3;
      case 3: {
        if (tag == 26) {
         parse_option:
          DO_(input->IncrementRecursionDepth());
         parse_loop_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_option;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNCreate)
  return false;
#undef DO_
}

void MsgCNCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNCreate)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.pb_enum game = 2;
  if (this->game() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game(), output);
  }

  // repeated .proto3.key_value option = 3;
  for (unsigned int i = 0, n = this->option_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->option(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNCreate)
}

int MsgCNCreate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNCreate)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum game = 2;
  if (this->game() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->game());
  }

  // repeated .proto3.key_value option = 3;
  total_size += 1 * this->option_size();
  for (int i = 0; i < this->option_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->option(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNCreate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNCreate*>(&from));
}

void MsgCNCreate::MergeFrom(const MsgCNCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  option_.MergeFrom(from.option_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.game() != 0) {
    set_game(from.game());
  }
}

void MsgCNCreate::CopyFrom(const MsgCNCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNCreate::IsInitialized() const {

  return true;
}

void MsgCNCreate::Swap(MsgCNCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNCreate::InternalSwap(MsgCNCreate* other) {
  std::swap(mid_, other->mid_);
  std::swap(game_, other->game_);
  option_.UnsafeArenaSwap(&other->option_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNCreate::GetTypeName() const {
  return "proto3.MsgCNCreate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNCreate

// optional .proto3.pb_msg mid = 1;
void MsgCNCreate::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNCreate::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNCreate.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNCreate::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNCreate.mid)
}

// optional .proto3.pb_enum game = 2;
void MsgCNCreate::clear_game() {
  game_ = 0;
}
 ::proto3::pb_enum MsgCNCreate::game() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNCreate.game)
  return static_cast< ::proto3::pb_enum >(game_);
}
 void MsgCNCreate::set_game(::proto3::pb_enum value) {
  
  game_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNCreate.game)
}

// repeated .proto3.key_value option = 3;
int MsgCNCreate::option_size() const {
  return option_.size();
}
void MsgCNCreate::clear_option() {
  option_.Clear();
}
const ::proto3::key_value& MsgCNCreate::option(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNCreate.option)
  return option_.Get(index);
}
::proto3::key_value* MsgCNCreate::mutable_option(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNCreate.option)
  return option_.Mutable(index);
}
::proto3::key_value* MsgCNCreate::add_option() {
  // @@protoc_insertion_point(field_add:proto3.MsgCNCreate.option)
  return option_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::key_value >*
MsgCNCreate::mutable_option() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgCNCreate.option)
  return &option_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::key_value >&
MsgCNCreate::option() const {
  // @@protoc_insertion_point(field_list:proto3.MsgCNCreate.option)
  return option_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCCreate::kMidFieldNumber;
const int MsgNCCreate::kGameIdFieldNumber;
const int MsgNCCreate::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCCreate::MsgNCCreate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCCreate)
}

void MsgNCCreate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCCreate::MsgNCCreate(const MsgNCCreate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCCreate)
}

void MsgNCCreate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  game_id_ = 0u;
  result_ = 0;
}

MsgNCCreate::~MsgNCCreate() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCCreate)
  SharedDtor();
}

void MsgNCCreate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCCreate& MsgNCCreate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCCreate* MsgNCCreate::default_instance_ = NULL;

MsgNCCreate* MsgNCCreate::New(::google::protobuf::Arena* arena) const {
  MsgNCCreate* n = new MsgNCCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCCreate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCCreate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCCreate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCCreate)
  return false;
#undef DO_
}

void MsgNCCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCCreate)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 game_id = 2;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCCreate)
}

int MsgNCCreate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCCreate)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCCreate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCCreate*>(&from));
}

void MsgNCCreate::MergeFrom(const MsgNCCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCCreate::CopyFrom(const MsgNCCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCCreate::IsInitialized() const {

  return true;
}

void MsgNCCreate::Swap(MsgNCCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCCreate::InternalSwap(MsgNCCreate* other) {
  std::swap(mid_, other->mid_);
  std::swap(game_id_, other->game_id_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCCreate::GetTypeName() const {
  return "proto3.MsgNCCreate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCCreate

// optional .proto3.pb_msg mid = 1;
void MsgNCCreate::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCCreate::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCCreate.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCCreate::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCCreate.mid)
}

// optional uint32 game_id = 2;
void MsgNCCreate::clear_game_id() {
  game_id_ = 0u;
}
 ::google::protobuf::uint32 MsgNCCreate::game_id() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCCreate.game_id)
  return game_id_;
}
 void MsgNCCreate::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCCreate.game_id)
}

// optional .proto3.pb_enum result = 3;
void MsgNCCreate::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCCreate::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCCreate.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCCreate::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCCreate.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNJoin::kMidFieldNumber;
const int MsgCNJoin::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNJoin::MsgCNJoin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNJoin)
}

void MsgCNJoin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNJoin::MsgCNJoin(const MsgCNJoin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNJoin)
}

void MsgCNJoin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  game_id_ = 0u;
}

MsgCNJoin::~MsgCNJoin() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNJoin)
  SharedDtor();
}

void MsgCNJoin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNJoin& MsgCNJoin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNJoin* MsgCNJoin::default_instance_ = NULL;

MsgCNJoin* MsgCNJoin::New(::google::protobuf::Arena* arena) const {
  MsgCNJoin* n = new MsgCNJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNJoin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCNJoin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCNJoin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, game_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCNJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNJoin)
  return false;
#undef DO_
}

void MsgCNJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNJoin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 game_id = 2;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNJoin)
}

int MsgCNJoin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNJoin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNJoin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNJoin*>(&from));
}

void MsgCNJoin::MergeFrom(const MsgCNJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void MsgCNJoin::CopyFrom(const MsgCNJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNJoin::IsInitialized() const {

  return true;
}

void MsgCNJoin::Swap(MsgCNJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNJoin::InternalSwap(MsgCNJoin* other) {
  std::swap(mid_, other->mid_);
  std::swap(game_id_, other->game_id_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNJoin::GetTypeName() const {
  return "proto3.MsgCNJoin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNJoin

// optional .proto3.pb_msg mid = 1;
void MsgCNJoin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNJoin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNJoin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNJoin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNJoin.mid)
}

// optional uint32 game_id = 2;
void MsgCNJoin::clear_game_id() {
  game_id_ = 0u;
}
 ::google::protobuf::uint32 MsgCNJoin::game_id() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNJoin.game_id)
  return game_id_;
}
 void MsgCNJoin::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNJoin.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCJoin::kMidFieldNumber;
const int MsgNCJoin::kPlayersFieldNumber;
const int MsgNCJoin::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCJoin::MsgNCJoin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCJoin)
}

void MsgNCJoin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCJoin::MsgNCJoin(const MsgNCJoin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCJoin)
}

void MsgNCJoin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgNCJoin::~MsgNCJoin() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCJoin)
  SharedDtor();
}

void MsgNCJoin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCJoin& MsgNCJoin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCJoin* MsgNCJoin::default_instance_ = NULL;

MsgNCJoin* MsgNCJoin::New(::google::protobuf::Arena* arena) const {
  MsgNCJoin* n = new MsgNCJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCJoin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCJoin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCJoin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

  players_.Clear();
}

bool MsgNCJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_players;
        break;
      }

      // repeated .proto3.player_t players = 2;
      case 2: {
        if (tag == 18) {
         parse_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCJoin)
  return false;
#undef DO_
}

void MsgNCJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCJoin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // repeated .proto3.player_t players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->players(i), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCJoin)
}

int MsgNCJoin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCJoin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.player_t players = 2;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCJoin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCJoin*>(&from));
}

void MsgNCJoin::MergeFrom(const MsgNCJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  players_.MergeFrom(from.players_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCJoin::CopyFrom(const MsgNCJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCJoin::IsInitialized() const {

  return true;
}

void MsgNCJoin::Swap(MsgNCJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCJoin::InternalSwap(MsgNCJoin* other) {
  std::swap(mid_, other->mid_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCJoin::GetTypeName() const {
  return "proto3.MsgNCJoin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCJoin

// optional .proto3.pb_msg mid = 1;
void MsgNCJoin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCJoin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCJoin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCJoin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCJoin.mid)
}

// repeated .proto3.player_t players = 2;
int MsgNCJoin::players_size() const {
  return players_.size();
}
void MsgNCJoin::clear_players() {
  players_.Clear();
}
const ::proto3::player_t& MsgNCJoin::players(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCJoin.players)
  return players_.Get(index);
}
::proto3::player_t* MsgNCJoin::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCJoin.players)
  return players_.Mutable(index);
}
::proto3::player_t* MsgNCJoin::add_players() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCJoin.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::player_t >*
MsgNCJoin::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCJoin.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::player_t >&
MsgNCJoin::players() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCJoin.players)
  return players_;
}

// optional .proto3.pb_enum result = 3;
void MsgNCJoin::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCJoin::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCJoin.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCJoin::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCJoin.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNReady::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNReady::MsgCNReady()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNReady)
}

void MsgCNReady::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNReady::MsgCNReady(const MsgCNReady& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNReady)
}

void MsgCNReady::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgCNReady::~MsgCNReady() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNReady)
  SharedDtor();
}

void MsgCNReady::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNReady& MsgCNReady::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNReady* MsgCNReady::default_instance_ = NULL;

MsgCNReady* MsgCNReady::New(::google::protobuf::Arena* arena) const {
  MsgCNReady* n = new MsgCNReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNReady::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNReady)
  mid_ = 0;
}

bool MsgCNReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNReady)
  return false;
#undef DO_
}

void MsgCNReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNReady)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNReady)
}

int MsgCNReady::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNReady)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNReady*>(&from));
}

void MsgCNReady::MergeFrom(const MsgCNReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgCNReady::CopyFrom(const MsgCNReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNReady::IsInitialized() const {

  return true;
}

void MsgCNReady::Swap(MsgCNReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNReady::InternalSwap(MsgCNReady* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNReady::GetTypeName() const {
  return "proto3.MsgCNReady";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNReady

// optional .proto3.pb_msg mid = 1;
void MsgCNReady::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNReady::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNReady.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNReady::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNReady.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCReady::kMidFieldNumber;
const int MsgNCReady::kPosFieldNumber;
const int MsgNCReady::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCReady::MsgNCReady()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCReady)
}

void MsgNCReady::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCReady::MsgNCReady(const MsgNCReady& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCReady)
}

void MsgNCReady::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  pos_ = 0u;
  result_ = 0;
}

MsgNCReady::~MsgNCReady() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCReady)
  SharedDtor();
}

void MsgNCReady::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCReady& MsgNCReady::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCReady* MsgNCReady::default_instance_ = NULL;

MsgNCReady* MsgNCReady::New(::google::protobuf::Arena* arena) const {
  MsgNCReady* n = new MsgNCReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCReady::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCReady)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCReady, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCReady*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCReady)
  return false;
#undef DO_
}

void MsgNCReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCReady)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCReady)
}

int MsgNCReady::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCReady)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCReady*>(&from));
}

void MsgNCReady::MergeFrom(const MsgNCReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCReady::CopyFrom(const MsgNCReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCReady::IsInitialized() const {

  return true;
}

void MsgNCReady::Swap(MsgNCReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCReady::InternalSwap(MsgNCReady* other) {
  std::swap(mid_, other->mid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCReady::GetTypeName() const {
  return "proto3.MsgNCReady";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCReady

// optional .proto3.pb_msg mid = 1;
void MsgNCReady::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCReady::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCReady.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCReady::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCReady.mid)
}

// optional uint32 pos = 2;
void MsgNCReady::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 MsgNCReady::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCReady.pos)
  return pos_;
}
 void MsgNCReady::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCReady.pos)
}

// optional .proto3.pb_enum result = 3;
void MsgNCReady::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCReady::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCReady.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCReady::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCReady.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCStart::kMidFieldNumber;
const int MsgNCStart::kBankerFieldNumber;
const int MsgNCStart::kPosFieldNumber;
const int MsgNCStart::kAnteFieldNumber;
const int MsgNCStart::kMultipleFieldNumber;
const int MsgNCStart::kCardsFieldNumber;
const int MsgNCStart::kHandsFieldNumber;
const int MsgNCStart::kBottomFieldNumber;
const int MsgNCStart::kCountFieldNumber;
const int MsgNCStart::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCStart::MsgNCStart()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCStart)
}

void MsgNCStart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCStart::MsgNCStart(const MsgNCStart& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCStart)
}

void MsgNCStart::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  banker_ = 0u;
  pos_ = 0u;
  ante_ = 0u;
  multiple_ = 0u;
  result_ = 0;
}

MsgNCStart::~MsgNCStart() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCStart)
  SharedDtor();
}

void MsgNCStart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCStart& MsgNCStart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCStart* MsgNCStart::default_instance_ = NULL;

MsgNCStart* MsgNCStart::New(::google::protobuf::Arena* arena) const {
  MsgNCStart* n = new MsgNCStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCStart::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCStart)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCStart, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCStart*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, ante_);
  multiple_ = 0u;
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

  cards_.Clear();
  hands_.Clear();
  bottom_.Clear();
  count_.Clear();
}

bool MsgNCStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_banker;
        break;
      }

      // optional uint32 banker = 2;
      case 2: {
        if (tag == 16) {
         parse_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ante;
        break;
      }

      // optional uint32 ante = 4;
      case 4: {
        if (tag == 32) {
         parse_ante:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ante_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multiple;
        break;
      }

      // optional uint32 multiple = 5;
      case 5: {
        if (tag == 40) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cards;
        break;
      }

      // repeated .proto3.pawn_t cards = 6;
      case 6: {
        if (tag == 50) {
         parse_cards:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_cards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_hands;
        break;
      }

      // repeated uint32 hands = 7;
      case 7: {
        if (tag == 58) {
         parse_hands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hands())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_hands())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bottom;
        break;
      }

      // repeated uint32 bottom = 8;
      case 8: {
        if (tag == 66) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bottom())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66, input, this->mutable_bottom())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_count;
        break;
      }

      // repeated uint32 count = 9;
      case 9: {
        if (tag == 74) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_count())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74, input, this->mutable_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 10;
      case 10: {
        if (tag == 80) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCStart)
  return false;
#undef DO_
}

void MsgNCStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCStart)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 banker = 2;
  if (this->banker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker(), output);
  }

  // optional uint32 pos = 3;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional uint32 ante = 4;
  if (this->ante() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ante(), output);
  }

  // optional uint32 multiple = 5;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->multiple(), output);
  }

  // repeated .proto3.pawn_t cards = 6;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->cards(i), output);
  }

  // repeated uint32 hands = 7;
  if (this->hands_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hands_cached_byte_size_);
  }
  for (int i = 0; i < this->hands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->hands(i), output);
  }

  // repeated uint32 bottom = 8;
  if (this->bottom_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bottom_cached_byte_size_);
  }
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->bottom(i), output);
  }

  // repeated uint32 count = 9;
  if (this->count_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_count_cached_byte_size_);
  }
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->count(i), output);
  }

  // optional .proto3.pb_enum result = 10;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCStart)
}

int MsgNCStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCStart)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 banker = 2;
  if (this->banker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker());
  }

  // optional uint32 pos = 3;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 ante = 4;
  if (this->ante() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ante());
  }

  // optional uint32 multiple = 5;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multiple());
  }

  // optional .proto3.pb_enum result = 10;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.pawn_t cards = 6;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated uint32 hands = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->hands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hands(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hands_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 bottom = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->bottom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bottom(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bottom_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 count = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->count(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _count_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCStart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCStart*>(&from));
}

void MsgNCStart::MergeFrom(const MsgNCStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cards_.MergeFrom(from.cards_);
  hands_.MergeFrom(from.hands_);
  bottom_.MergeFrom(from.bottom_);
  count_.MergeFrom(from.count_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.banker() != 0) {
    set_banker(from.banker());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.ante() != 0) {
    set_ante(from.ante());
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCStart::CopyFrom(const MsgNCStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCStart::IsInitialized() const {

  return true;
}

void MsgNCStart::Swap(MsgNCStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCStart::InternalSwap(MsgNCStart* other) {
  std::swap(mid_, other->mid_);
  std::swap(banker_, other->banker_);
  std::swap(pos_, other->pos_);
  std::swap(ante_, other->ante_);
  std::swap(multiple_, other->multiple_);
  cards_.UnsafeArenaSwap(&other->cards_);
  hands_.UnsafeArenaSwap(&other->hands_);
  bottom_.UnsafeArenaSwap(&other->bottom_);
  count_.UnsafeArenaSwap(&other->count_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCStart::GetTypeName() const {
  return "proto3.MsgNCStart";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCStart

// optional .proto3.pb_msg mid = 1;
void MsgNCStart::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCStart::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCStart::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.mid)
}

// optional uint32 banker = 2;
void MsgNCStart::clear_banker() {
  banker_ = 0u;
}
 ::google::protobuf::uint32 MsgNCStart::banker() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.banker)
  return banker_;
}
 void MsgNCStart::set_banker(::google::protobuf::uint32 value) {
  
  banker_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.banker)
}

// optional uint32 pos = 3;
void MsgNCStart::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 MsgNCStart::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.pos)
  return pos_;
}
 void MsgNCStart::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.pos)
}

// optional uint32 ante = 4;
void MsgNCStart::clear_ante() {
  ante_ = 0u;
}
 ::google::protobuf::uint32 MsgNCStart::ante() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.ante)
  return ante_;
}
 void MsgNCStart::set_ante(::google::protobuf::uint32 value) {
  
  ante_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.ante)
}

// optional uint32 multiple = 5;
void MsgNCStart::clear_multiple() {
  multiple_ = 0u;
}
 ::google::protobuf::uint32 MsgNCStart::multiple() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.multiple)
  return multiple_;
}
 void MsgNCStart::set_multiple(::google::protobuf::uint32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.multiple)
}

// repeated .proto3.pawn_t cards = 6;
int MsgNCStart::cards_size() const {
  return cards_.size();
}
void MsgNCStart::clear_cards() {
  cards_.Clear();
}
const ::proto3::pawn_t& MsgNCStart::cards(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.cards)
  return cards_.Get(index);
}
::proto3::pawn_t* MsgNCStart::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCStart.cards)
  return cards_.Mutable(index);
}
::proto3::pawn_t* MsgNCStart::add_cards() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCStart.cards)
  return cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::pawn_t >*
MsgNCStart::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCStart.cards)
  return &cards_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::pawn_t >&
MsgNCStart::cards() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCStart.cards)
  return cards_;
}

// repeated uint32 hands = 7;
int MsgNCStart::hands_size() const {
  return hands_.size();
}
void MsgNCStart::clear_hands() {
  hands_.Clear();
}
 ::google::protobuf::uint32 MsgNCStart::hands(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.hands)
  return hands_.Get(index);
}
 void MsgNCStart::set_hands(int index, ::google::protobuf::uint32 value) {
  hands_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.hands)
}
 void MsgNCStart::add_hands(::google::protobuf::uint32 value) {
  hands_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgNCStart.hands)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgNCStart::hands() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCStart.hands)
  return hands_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgNCStart::mutable_hands() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCStart.hands)
  return &hands_;
}

// repeated uint32 bottom = 8;
int MsgNCStart::bottom_size() const {
  return bottom_.size();
}
void MsgNCStart::clear_bottom() {
  bottom_.Clear();
}
 ::google::protobuf::uint32 MsgNCStart::bottom(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.bottom)
  return bottom_.Get(index);
}
 void MsgNCStart::set_bottom(int index, ::google::protobuf::uint32 value) {
  bottom_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.bottom)
}
 void MsgNCStart::add_bottom(::google::protobuf::uint32 value) {
  bottom_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgNCStart.bottom)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgNCStart::bottom() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCStart.bottom)
  return bottom_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgNCStart::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCStart.bottom)
  return &bottom_;
}

// repeated uint32 count = 9;
int MsgNCStart::count_size() const {
  return count_.size();
}
void MsgNCStart::clear_count() {
  count_.Clear();
}
 ::google::protobuf::uint32 MsgNCStart::count(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.count)
  return count_.Get(index);
}
 void MsgNCStart::set_count(int index, ::google::protobuf::uint32 value) {
  count_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.count)
}
 void MsgNCStart::add_count(::google::protobuf::uint32 value) {
  count_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgNCStart.count)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MsgNCStart::count() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCStart.count)
  return count_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MsgNCStart::mutable_count() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCStart.count)
  return &count_;
}

// optional .proto3.pb_enum result = 10;
void MsgNCStart::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCStart::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCStart.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCStart::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCStart.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNDiscard::kMidFieldNumber;
const int MsgCNDiscard::kBunchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNDiscard::MsgCNDiscard()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNDiscard)
}

void MsgCNDiscard::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bunch_ = const_cast< ::proto3::bunch_t*>(
      ::proto3::bunch_t::internal_default_instance());
#else
  bunch_ = const_cast< ::proto3::bunch_t*>(&::proto3::bunch_t::default_instance());
#endif
}

MsgCNDiscard::MsgCNDiscard(const MsgCNDiscard& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNDiscard)
}

void MsgCNDiscard::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  bunch_ = NULL;
}

MsgCNDiscard::~MsgCNDiscard() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNDiscard)
  SharedDtor();
}

void MsgCNDiscard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bunch_;
  }
}

void MsgCNDiscard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNDiscard& MsgCNDiscard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNDiscard* MsgCNDiscard::default_instance_ = NULL;

MsgCNDiscard* MsgCNDiscard::New(::google::protobuf::Arena* arena) const {
  MsgCNDiscard* n = new MsgCNDiscard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNDiscard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNDiscard)
  mid_ = 0;
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
}

bool MsgCNDiscard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNDiscard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bunch;
        break;
      }

      // optional .proto3.bunch_t bunch = 2;
      case 2: {
        if (tag == 18) {
         parse_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNDiscard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNDiscard)
  return false;
#undef DO_
}

void MsgCNDiscard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNDiscard)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->bunch_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNDiscard)
}

int MsgCNDiscard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNDiscard)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bunch_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNDiscard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNDiscard*>(&from));
}

void MsgCNDiscard::MergeFrom(const MsgCNDiscard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNDiscard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_bunch()) {
    mutable_bunch()->::proto3::bunch_t::MergeFrom(from.bunch());
  }
}

void MsgCNDiscard::CopyFrom(const MsgCNDiscard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNDiscard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNDiscard::IsInitialized() const {

  return true;
}

void MsgCNDiscard::Swap(MsgCNDiscard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNDiscard::InternalSwap(MsgCNDiscard* other) {
  std::swap(mid_, other->mid_);
  std::swap(bunch_, other->bunch_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNDiscard::GetTypeName() const {
  return "proto3.MsgCNDiscard";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNDiscard

// optional .proto3.pb_msg mid = 1;
void MsgCNDiscard::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNDiscard::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNDiscard.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNDiscard::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNDiscard.mid)
}

// optional .proto3.bunch_t bunch = 2;
bool MsgCNDiscard::has_bunch() const {
  return !_is_default_instance_ && bunch_ != NULL;
}
void MsgCNDiscard::clear_bunch() {
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
}
const ::proto3::bunch_t& MsgCNDiscard::bunch() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNDiscard.bunch)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bunch_ != NULL ? *bunch_ : *default_instance().bunch_;
#else
  return bunch_ != NULL ? *bunch_ : *default_instance_->bunch_;
#endif
}
::proto3::bunch_t* MsgCNDiscard::mutable_bunch() {
  
  if (bunch_ == NULL) {
    bunch_ = new ::proto3::bunch_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNDiscard.bunch)
  return bunch_;
}
::proto3::bunch_t* MsgCNDiscard::release_bunch() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNDiscard.bunch)
  
  ::proto3::bunch_t* temp = bunch_;
  bunch_ = NULL;
  return temp;
}
void MsgCNDiscard::set_allocated_bunch(::proto3::bunch_t* bunch) {
  delete bunch_;
  bunch_ = bunch;
  if (bunch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNDiscard.bunch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCDiscard::kMidFieldNumber;
const int MsgNCDiscard::kBunchFieldNumber;
const int MsgNCDiscard::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCDiscard::MsgNCDiscard()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCDiscard)
}

void MsgNCDiscard::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bunch_ = const_cast< ::proto3::bunch_t*>(
      ::proto3::bunch_t::internal_default_instance());
#else
  bunch_ = const_cast< ::proto3::bunch_t*>(&::proto3::bunch_t::default_instance());
#endif
}

MsgNCDiscard::MsgNCDiscard(const MsgNCDiscard& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCDiscard)
}

void MsgNCDiscard::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  bunch_ = NULL;
  result_ = 0;
}

MsgNCDiscard::~MsgNCDiscard() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCDiscard)
  SharedDtor();
}

void MsgNCDiscard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bunch_;
  }
}

void MsgNCDiscard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCDiscard& MsgNCDiscard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCDiscard* MsgNCDiscard::default_instance_ = NULL;

MsgNCDiscard* MsgNCDiscard::New(::google::protobuf::Arena* arena) const {
  MsgNCDiscard* n = new MsgNCDiscard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCDiscard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCDiscard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCDiscard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCDiscard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCDiscard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCDiscard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bunch;
        break;
      }

      // optional .proto3.bunch_t bunch = 2;
      case 2: {
        if (tag == 18) {
         parse_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCDiscard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCDiscard)
  return false;
#undef DO_
}

void MsgNCDiscard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCDiscard)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->bunch_, output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCDiscard)
}

int MsgNCDiscard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCDiscard)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bunch_);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCDiscard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCDiscard*>(&from));
}

void MsgNCDiscard::MergeFrom(const MsgNCDiscard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCDiscard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_bunch()) {
    mutable_bunch()->::proto3::bunch_t::MergeFrom(from.bunch());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCDiscard::CopyFrom(const MsgNCDiscard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCDiscard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCDiscard::IsInitialized() const {

  return true;
}

void MsgNCDiscard::Swap(MsgNCDiscard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCDiscard::InternalSwap(MsgNCDiscard* other) {
  std::swap(mid_, other->mid_);
  std::swap(bunch_, other->bunch_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCDiscard::GetTypeName() const {
  return "proto3.MsgNCDiscard";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCDiscard

// optional .proto3.pb_msg mid = 1;
void MsgNCDiscard::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCDiscard::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDiscard.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCDiscard::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDiscard.mid)
}

// optional .proto3.bunch_t bunch = 2;
bool MsgNCDiscard::has_bunch() const {
  return !_is_default_instance_ && bunch_ != NULL;
}
void MsgNCDiscard::clear_bunch() {
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
}
const ::proto3::bunch_t& MsgNCDiscard::bunch() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDiscard.bunch)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bunch_ != NULL ? *bunch_ : *default_instance().bunch_;
#else
  return bunch_ != NULL ? *bunch_ : *default_instance_->bunch_;
#endif
}
::proto3::bunch_t* MsgNCDiscard::mutable_bunch() {
  
  if (bunch_ == NULL) {
    bunch_ = new ::proto3::bunch_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCDiscard.bunch)
  return bunch_;
}
::proto3::bunch_t* MsgNCDiscard::release_bunch() {
  // @@protoc_insertion_point(field_release:proto3.MsgNCDiscard.bunch)
  
  ::proto3::bunch_t* temp = bunch_;
  bunch_ = NULL;
  return temp;
}
void MsgNCDiscard::set_allocated_bunch(::proto3::bunch_t* bunch) {
  delete bunch_;
  bunch_ = bunch;
  if (bunch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgNCDiscard.bunch)
}

// optional .proto3.pb_enum result = 3;
void MsgNCDiscard::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCDiscard::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDiscard.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCDiscard::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDiscard.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNMeld::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNMeld::MsgCNMeld()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNMeld)
}

void MsgCNMeld::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNMeld::MsgCNMeld(const MsgCNMeld& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNMeld)
}

void MsgCNMeld::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgCNMeld::~MsgCNMeld() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNMeld)
  SharedDtor();
}

void MsgCNMeld::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNMeld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNMeld& MsgCNMeld::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNMeld* MsgCNMeld::default_instance_ = NULL;

MsgCNMeld* MsgCNMeld::New(::google::protobuf::Arena* arena) const {
  MsgCNMeld* n = new MsgCNMeld;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNMeld::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNMeld)
  mid_ = 0;
}

bool MsgCNMeld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNMeld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNMeld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNMeld)
  return false;
#undef DO_
}

void MsgCNMeld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNMeld)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNMeld)
}

int MsgCNMeld::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNMeld)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNMeld::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNMeld*>(&from));
}

void MsgCNMeld::MergeFrom(const MsgCNMeld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNMeld)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgCNMeld::CopyFrom(const MsgCNMeld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNMeld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNMeld::IsInitialized() const {

  return true;
}

void MsgCNMeld::Swap(MsgCNMeld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNMeld::InternalSwap(MsgCNMeld* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNMeld::GetTypeName() const {
  return "proto3.MsgCNMeld";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNMeld

// optional .proto3.pb_msg mid = 1;
void MsgCNMeld::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNMeld::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNMeld.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNMeld::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNMeld.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCMeld::kMidFieldNumber;
const int MsgNCMeld::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCMeld::MsgNCMeld()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCMeld)
}

void MsgNCMeld::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCMeld::MsgNCMeld(const MsgNCMeld& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCMeld)
}

void MsgNCMeld::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgNCMeld::~MsgNCMeld() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCMeld)
  SharedDtor();
}

void MsgNCMeld::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCMeld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCMeld& MsgNCMeld::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCMeld* MsgNCMeld::default_instance_ = NULL;

MsgNCMeld* MsgNCMeld::New(::google::protobuf::Arena* arena) const {
  MsgNCMeld* n = new MsgNCMeld;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCMeld::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCMeld)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCMeld, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCMeld*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCMeld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCMeld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCMeld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCMeld)
  return false;
#undef DO_
}

void MsgNCMeld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCMeld)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.pb_enum result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCMeld)
}

int MsgNCMeld::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCMeld)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCMeld::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCMeld*>(&from));
}

void MsgNCMeld::MergeFrom(const MsgNCMeld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCMeld)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCMeld::CopyFrom(const MsgNCMeld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCMeld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCMeld::IsInitialized() const {

  return true;
}

void MsgNCMeld::Swap(MsgNCMeld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCMeld::InternalSwap(MsgNCMeld* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCMeld::GetTypeName() const {
  return "proto3.MsgNCMeld";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCMeld

// optional .proto3.pb_msg mid = 1;
void MsgNCMeld::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCMeld::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCMeld.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCMeld::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCMeld.mid)
}

// optional .proto3.pb_enum result = 2;
void MsgNCMeld::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCMeld::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCMeld.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCMeld::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCMeld.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNDismissSync::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNDismissSync::MsgCNDismissSync()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNDismissSync)
}

void MsgCNDismissSync::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNDismissSync::MsgCNDismissSync(const MsgCNDismissSync& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNDismissSync)
}

void MsgCNDismissSync::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgCNDismissSync::~MsgCNDismissSync() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNDismissSync)
  SharedDtor();
}

void MsgCNDismissSync::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNDismissSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNDismissSync& MsgCNDismissSync::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNDismissSync* MsgCNDismissSync::default_instance_ = NULL;

MsgCNDismissSync* MsgCNDismissSync::New(::google::protobuf::Arena* arena) const {
  MsgCNDismissSync* n = new MsgCNDismissSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNDismissSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNDismissSync)
  mid_ = 0;
}

bool MsgCNDismissSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNDismissSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNDismissSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNDismissSync)
  return false;
#undef DO_
}

void MsgCNDismissSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNDismissSync)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNDismissSync)
}

int MsgCNDismissSync::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNDismissSync)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNDismissSync::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNDismissSync*>(&from));
}

void MsgCNDismissSync::MergeFrom(const MsgCNDismissSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNDismissSync)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgCNDismissSync::CopyFrom(const MsgCNDismissSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNDismissSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNDismissSync::IsInitialized() const {

  return true;
}

void MsgCNDismissSync::Swap(MsgCNDismissSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNDismissSync::InternalSwap(MsgCNDismissSync* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNDismissSync::GetTypeName() const {
  return "proto3.MsgCNDismissSync";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNDismissSync

// optional .proto3.pb_msg mid = 1;
void MsgCNDismissSync::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNDismissSync::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNDismissSync.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNDismissSync::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNDismissSync.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCDismissSync::kMidFieldNumber;
const int MsgNCDismissSync::kPosFieldNumber;
const int MsgNCDismissSync::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCDismissSync::MsgNCDismissSync()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCDismissSync)
}

void MsgNCDismissSync::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCDismissSync::MsgNCDismissSync(const MsgNCDismissSync& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCDismissSync)
}

void MsgNCDismissSync::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  pos_ = 0u;
  result_ = 0;
}

MsgNCDismissSync::~MsgNCDismissSync() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCDismissSync)
  SharedDtor();
}

void MsgNCDismissSync::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCDismissSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCDismissSync& MsgNCDismissSync::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCDismissSync* MsgNCDismissSync::default_instance_ = NULL;

MsgNCDismissSync* MsgNCDismissSync::New(::google::protobuf::Arena* arena) const {
  MsgNCDismissSync* n = new MsgNCDismissSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCDismissSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCDismissSync)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCDismissSync, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCDismissSync*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCDismissSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCDismissSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCDismissSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCDismissSync)
  return false;
#undef DO_
}

void MsgNCDismissSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCDismissSync)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCDismissSync)
}

int MsgNCDismissSync::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCDismissSync)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCDismissSync::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCDismissSync*>(&from));
}

void MsgNCDismissSync::MergeFrom(const MsgNCDismissSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCDismissSync)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCDismissSync::CopyFrom(const MsgNCDismissSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCDismissSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCDismissSync::IsInitialized() const {

  return true;
}

void MsgNCDismissSync::Swap(MsgNCDismissSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCDismissSync::InternalSwap(MsgNCDismissSync* other) {
  std::swap(mid_, other->mid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCDismissSync::GetTypeName() const {
  return "proto3.MsgNCDismissSync";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCDismissSync

// optional .proto3.pb_msg mid = 1;
void MsgNCDismissSync::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCDismissSync::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissSync.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCDismissSync::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissSync.mid)
}

// optional uint32 pos = 2;
void MsgNCDismissSync::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 MsgNCDismissSync::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissSync.pos)
  return pos_;
}
 void MsgNCDismissSync::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissSync.pos)
}

// optional .proto3.pb_enum result = 3;
void MsgNCDismissSync::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCDismissSync::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissSync.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCDismissSync::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissSync.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNDismissAck::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNDismissAck::MsgCNDismissAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNDismissAck)
}

void MsgCNDismissAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNDismissAck::MsgCNDismissAck(const MsgCNDismissAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNDismissAck)
}

void MsgCNDismissAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgCNDismissAck::~MsgCNDismissAck() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNDismissAck)
  SharedDtor();
}

void MsgCNDismissAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNDismissAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNDismissAck& MsgCNDismissAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNDismissAck* MsgCNDismissAck::default_instance_ = NULL;

MsgCNDismissAck* MsgCNDismissAck::New(::google::protobuf::Arena* arena) const {
  MsgCNDismissAck* n = new MsgCNDismissAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNDismissAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNDismissAck)
  mid_ = 0;
}

bool MsgCNDismissAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNDismissAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNDismissAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNDismissAck)
  return false;
#undef DO_
}

void MsgCNDismissAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNDismissAck)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNDismissAck)
}

int MsgCNDismissAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNDismissAck)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNDismissAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNDismissAck*>(&from));
}

void MsgCNDismissAck::MergeFrom(const MsgCNDismissAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNDismissAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgCNDismissAck::CopyFrom(const MsgCNDismissAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNDismissAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNDismissAck::IsInitialized() const {

  return true;
}

void MsgCNDismissAck::Swap(MsgCNDismissAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNDismissAck::InternalSwap(MsgCNDismissAck* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNDismissAck::GetTypeName() const {
  return "proto3.MsgCNDismissAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNDismissAck

// optional .proto3.pb_msg mid = 1;
void MsgCNDismissAck::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNDismissAck::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNDismissAck.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNDismissAck::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNDismissAck.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCDismissAck::kMidFieldNumber;
const int MsgNCDismissAck::kPosFieldNumber;
const int MsgNCDismissAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCDismissAck::MsgNCDismissAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCDismissAck)
}

void MsgNCDismissAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCDismissAck::MsgNCDismissAck(const MsgNCDismissAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCDismissAck)
}

void MsgNCDismissAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  pos_ = 0u;
  result_ = 0;
}

MsgNCDismissAck::~MsgNCDismissAck() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCDismissAck)
  SharedDtor();
}

void MsgNCDismissAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCDismissAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCDismissAck& MsgNCDismissAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCDismissAck* MsgNCDismissAck::default_instance_ = NULL;

MsgNCDismissAck* MsgNCDismissAck::New(::google::protobuf::Arena* arena) const {
  MsgNCDismissAck* n = new MsgNCDismissAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCDismissAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCDismissAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCDismissAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCDismissAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCDismissAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCDismissAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCDismissAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCDismissAck)
  return false;
#undef DO_
}

void MsgNCDismissAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCDismissAck)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCDismissAck)
}

int MsgNCDismissAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCDismissAck)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCDismissAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCDismissAck*>(&from));
}

void MsgNCDismissAck::MergeFrom(const MsgNCDismissAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCDismissAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCDismissAck::CopyFrom(const MsgNCDismissAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCDismissAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCDismissAck::IsInitialized() const {

  return true;
}

void MsgNCDismissAck::Swap(MsgNCDismissAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCDismissAck::InternalSwap(MsgNCDismissAck* other) {
  std::swap(mid_, other->mid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCDismissAck::GetTypeName() const {
  return "proto3.MsgNCDismissAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCDismissAck

// optional .proto3.pb_msg mid = 1;
void MsgNCDismissAck::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCDismissAck::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissAck.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCDismissAck::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissAck.mid)
}

// optional uint32 pos = 2;
void MsgNCDismissAck::clear_pos() {
  pos_ = 0u;
}
 ::google::protobuf::uint32 MsgNCDismissAck::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissAck.pos)
  return pos_;
}
 void MsgNCDismissAck::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissAck.pos)
}

// optional .proto3.pb_enum result = 3;
void MsgNCDismissAck::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCDismissAck::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissAck.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCDismissAck::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCSettle::kMidFieldNumber;
const int MsgNCSettle::kWinnerFieldNumber;
const int MsgNCSettle::kPlayFieldNumber;
const int MsgNCSettle::kHandsFieldNumber;
const int MsgNCSettle::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCSettle::MsgNCSettle()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCSettle)
}

void MsgNCSettle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCSettle::MsgNCSettle(const MsgNCSettle& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCSettle)
}

void MsgNCSettle::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  winner_ = 0u;
  result_ = 0;
}

MsgNCSettle::~MsgNCSettle() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCSettle)
  SharedDtor();
}

void MsgNCSettle::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCSettle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCSettle& MsgNCSettle::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCSettle* MsgNCSettle::default_instance_ = NULL;

MsgNCSettle* MsgNCSettle::New(::google::protobuf::Arena* arena) const {
  MsgNCSettle* n = new MsgNCSettle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCSettle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCSettle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCSettle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCSettle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, winner_);
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

  play_.Clear();
  hands_.Clear();
}

bool MsgNCSettle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCSettle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_winner;
        break;
      }

      // optional uint32 winner = 2;
      case 2: {
        if (tag == 16) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_play;
        break;
      }

      // repeated .proto3.player_t play = 3;
      case 3: {
        if (tag == 26) {
         parse_play:
          DO_(input->IncrementRecursionDepth());
         parse_loop_play:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_play()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_play;
        if (input->ExpectTag(34)) goto parse_loop_hands;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.bunch_t hands = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_hands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCSettle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCSettle)
  return false;
#undef DO_
}

void MsgNCSettle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCSettle)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 winner = 2;
  if (this->winner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winner(), output);
  }

  // repeated .proto3.player_t play = 3;
  for (unsigned int i = 0, n = this->play_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->play(i), output);
  }

  // repeated .proto3.bunch_t hands = 4;
  for (unsigned int i = 0, n = this->hands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->hands(i), output);
  }

  // optional .proto3.pb_enum result = 5;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCSettle)
}

int MsgNCSettle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCSettle)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 winner = 2;
  if (this->winner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->winner());
  }

  // optional .proto3.pb_enum result = 5;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.player_t play = 3;
  total_size += 1 * this->play_size();
  for (int i = 0; i < this->play_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->play(i));
  }

  // repeated .proto3.bunch_t hands = 4;
  total_size += 1 * this->hands_size();
  for (int i = 0; i < this->hands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hands(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCSettle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCSettle*>(&from));
}

void MsgNCSettle::MergeFrom(const MsgNCSettle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCSettle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  play_.MergeFrom(from.play_);
  hands_.MergeFrom(from.hands_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.winner() != 0) {
    set_winner(from.winner());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCSettle::CopyFrom(const MsgNCSettle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCSettle::IsInitialized() const {

  return true;
}

void MsgNCSettle::Swap(MsgNCSettle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCSettle::InternalSwap(MsgNCSettle* other) {
  std::swap(mid_, other->mid_);
  std::swap(winner_, other->winner_);
  play_.UnsafeArenaSwap(&other->play_);
  hands_.UnsafeArenaSwap(&other->hands_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCSettle::GetTypeName() const {
  return "proto3.MsgNCSettle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCSettle

// optional .proto3.pb_msg mid = 1;
void MsgNCSettle::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCSettle::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCSettle::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCSettle.mid)
}

// optional uint32 winner = 2;
void MsgNCSettle::clear_winner() {
  winner_ = 0u;
}
 ::google::protobuf::uint32 MsgNCSettle::winner() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.winner)
  return winner_;
}
 void MsgNCSettle::set_winner(::google::protobuf::uint32 value) {
  
  winner_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCSettle.winner)
}

// repeated .proto3.player_t play = 3;
int MsgNCSettle::play_size() const {
  return play_.size();
}
void MsgNCSettle::clear_play() {
  play_.Clear();
}
const ::proto3::player_t& MsgNCSettle::play(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.play)
  return play_.Get(index);
}
::proto3::player_t* MsgNCSettle::mutable_play(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCSettle.play)
  return play_.Mutable(index);
}
::proto3::player_t* MsgNCSettle::add_play() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCSettle.play)
  return play_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::player_t >*
MsgNCSettle::mutable_play() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCSettle.play)
  return &play_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::player_t >&
MsgNCSettle::play() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCSettle.play)
  return play_;
}

// repeated .proto3.bunch_t hands = 4;
int MsgNCSettle::hands_size() const {
  return hands_.size();
}
void MsgNCSettle::clear_hands() {
  hands_.Clear();
}
const ::proto3::bunch_t& MsgNCSettle::hands(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.hands)
  return hands_.Get(index);
}
::proto3::bunch_t* MsgNCSettle::mutable_hands(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCSettle.hands)
  return hands_.Mutable(index);
}
::proto3::bunch_t* MsgNCSettle::add_hands() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCSettle.hands)
  return hands_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >*
MsgNCSettle::mutable_hands() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCSettle.hands)
  return &hands_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >&
MsgNCSettle::hands() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCSettle.hands)
  return hands_;
}

// optional .proto3.pb_enum result = 5;
void MsgNCSettle::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCSettle::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCSettle::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCSettle.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCFinish::kMidFieldNumber;
const int MsgNCFinish::kPlayFieldNumber;
const int MsgNCFinish::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCFinish::MsgNCFinish()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCFinish)
}

void MsgNCFinish::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCFinish::MsgNCFinish(const MsgNCFinish& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCFinish)
}

void MsgNCFinish::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgNCFinish::~MsgNCFinish() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCFinish)
  SharedDtor();
}

void MsgNCFinish::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCFinish& MsgNCFinish::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCFinish* MsgNCFinish::default_instance_ = NULL;

MsgNCFinish* MsgNCFinish::New(::google::protobuf::Arena* arena) const {
  MsgNCFinish* n = new MsgNCFinish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCFinish)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCFinish, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCFinish*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

  play_.Clear();
}

bool MsgNCFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_play;
        break;
      }

      // repeated .proto3.player_t play = 2;
      case 2: {
        if (tag == 18) {
         parse_play:
          DO_(input->IncrementRecursionDepth());
         parse_loop_play:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_play()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_play;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCFinish)
  return false;
#undef DO_
}

void MsgNCFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCFinish)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // repeated .proto3.player_t play = 2;
  for (unsigned int i = 0, n = this->play_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->play(i), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCFinish)
}

int MsgNCFinish::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCFinish)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.player_t play = 2;
  total_size += 1 * this->play_size();
  for (int i = 0; i < this->play_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->play(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCFinish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCFinish*>(&from));
}

void MsgNCFinish::MergeFrom(const MsgNCFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCFinish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  play_.MergeFrom(from.play_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCFinish::CopyFrom(const MsgNCFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCFinish::IsInitialized() const {

  return true;
}

void MsgNCFinish::Swap(MsgNCFinish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCFinish::InternalSwap(MsgNCFinish* other) {
  std::swap(mid_, other->mid_);
  play_.UnsafeArenaSwap(&other->play_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCFinish::GetTypeName() const {
  return "proto3.MsgNCFinish";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCFinish

// optional .proto3.pb_msg mid = 1;
void MsgNCFinish::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCFinish::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCFinish.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCFinish::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCFinish.mid)
}

// repeated .proto3.player_t play = 2;
int MsgNCFinish::play_size() const {
  return play_.size();
}
void MsgNCFinish::clear_play() {
  play_.Clear();
}
const ::proto3::player_t& MsgNCFinish::play(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCFinish.play)
  return play_.Get(index);
}
::proto3::player_t* MsgNCFinish::mutable_play(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCFinish.play)
  return play_.Mutable(index);
}
::proto3::player_t* MsgNCFinish::add_play() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCFinish.play)
  return play_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::player_t >*
MsgNCFinish::mutable_play() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCFinish.play)
  return &play_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::player_t >&
MsgNCFinish::play() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCFinish.play)
  return play_;
}

// optional .proto3.pb_enum result = 3;
void MsgNCFinish::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCFinish::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCFinish.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCFinish::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCFinish.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNStats::kMidFieldNumber;
const int MsgCNStats::kKeyFieldNumber;
const int MsgCNStats::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNStats::MsgCNStats()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNStats)
}

void MsgCNStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNStats::MsgCNStats(const MsgCNStats& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNStats)
}

void MsgCNStats::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgCNStats::~MsgCNStats() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNStats)
  SharedDtor();
}

void MsgCNStats::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNStats& MsgCNStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNStats* MsgCNStats::default_instance_ = NULL;

MsgCNStats* MsgCNStats::New(::google::protobuf::Arena* arena) const {
  MsgCNStats* n = new MsgCNStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNStats)
  mid_ = 0;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgCNStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCNStats.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCNStats.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNStats)
  return false;
#undef DO_
}

void MsgCNStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNStats)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCNStats.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCNStats.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNStats)
}

int MsgCNStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNStats)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNStats*>(&from));
}

void MsgCNStats::MergeFrom(const MsgCNStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MsgCNStats::CopyFrom(const MsgCNStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNStats::IsInitialized() const {

  return true;
}

void MsgCNStats::Swap(MsgCNStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNStats::InternalSwap(MsgCNStats* other) {
  std::swap(mid_, other->mid_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNStats::GetTypeName() const {
  return "proto3.MsgCNStats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNStats

// optional .proto3.pb_msg mid = 1;
void MsgCNStats::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNStats::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNStats.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNStats::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNStats.mid)
}

// optional string key = 2;
void MsgCNStats::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCNStats::key() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNStats.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNStats::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCNStats.key)
}
 void MsgCNStats::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCNStats.key)
}
 void MsgCNStats::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCNStats.key)
}
 ::std::string* MsgCNStats::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNStats.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCNStats::release_key() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNStats.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNStats::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNStats.key)
}

// optional string value = 3;
void MsgCNStats::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCNStats::value() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNStats.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNStats::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCNStats.value)
}
 void MsgCNStats::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCNStats.value)
}
 void MsgCNStats::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCNStats.value)
}
 ::std::string* MsgCNStats::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNStats.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCNStats::release_value() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNStats.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNStats::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNStats.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3

// @@protoc_insertion_point(global_scope)
