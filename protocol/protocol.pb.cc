// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto3 {

void protobuf_ShutdownFile_protocol_2eproto() {
  delete key_value::default_instance_;
  delete user_t::default_instance_;
  delete player_t::default_instance_;
  delete win_t::default_instance_;
  delete achv_t::default_instance_;
  delete game_t::default_instance_;
  delete lobby_t::default_instance_;
  delete bunch_t::default_instance_;
  delete play_t::default_instance_;
  delete charge_t::default_instance_;
  delete MsgBase::default_instance_;
  delete MsgCLLogin::default_instance_;
  delete MsgLCLogin::default_instance_;
  delete MsgCLLobby::default_instance_;
  delete MsgLCLobby::default_instance_;
  delete MsgCLReplays::default_instance_;
  delete MsgLCReplays::default_instance_;
  delete MsgCLReplay::default_instance_;
  delete MsgLCReplay::default_instance_;
  delete MsgCHLogin::default_instance_;
  delete MsgHCLogin::default_instance_;
  delete MsgCHRegister::default_instance_;
  delete MsgHCRegister::default_instance_;
  delete MsgCHCharge::default_instance_;
  delete MsgHCCharge::default_instance_;
  delete MsgCHQuery::default_instance_;
  delete MsgHCQuery::default_instance_;
  delete MsgCNConnect::default_instance_;
  delete MsgNCConnect::default_instance_;
  delete MsgCNCreate::default_instance_;
  delete MsgNCCreate::default_instance_;
  delete MsgCNJoin::default_instance_;
  delete MsgNCJoin::default_instance_;
  delete MsgCNReady::default_instance_;
  delete MsgNCReady::default_instance_;
  delete MsgCNRevive::default_instance_;
  delete MsgNCRevive::default_instance_;
  delete MsgNCDeal::default_instance_;
  delete MsgCNEngage::default_instance_;
  delete MsgNCEngage::default_instance_;
  delete MsgCNDiscard::default_instance_;
  delete MsgNCDiscard::default_instance_;
  delete MsgCNMeld::default_instance_;
  delete MsgNCMeld::default_instance_;
  delete MsgNCDraw::default_instance_;
  delete MsgCNDismissSync::default_instance_;
  delete MsgNCDismissSync::default_instance_;
  delete MsgCNDismissAck::default_instance_;
  delete MsgNCDismissAck::default_instance_;
  delete MsgNCSettle::default_instance_;
  delete MsgNCFinish::default_instance_;
  delete MsgCNStats::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_protocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_protocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  key_value::default_instance_ = new key_value();
  user_t::default_instance_ = new user_t();
  player_t::default_instance_ = new player_t();
  win_t::default_instance_ = new win_t();
  achv_t::default_instance_ = new achv_t();
  game_t::default_instance_ = new game_t();
  lobby_t::default_instance_ = new lobby_t();
  bunch_t::default_instance_ = new bunch_t();
  play_t::default_instance_ = new play_t();
  charge_t::default_instance_ = new charge_t();
  MsgBase::default_instance_ = new MsgBase();
  MsgCLLogin::default_instance_ = new MsgCLLogin();
  MsgLCLogin::default_instance_ = new MsgLCLogin();
  MsgCLLobby::default_instance_ = new MsgCLLobby();
  MsgLCLobby::default_instance_ = new MsgLCLobby();
  MsgCLReplays::default_instance_ = new MsgCLReplays();
  MsgLCReplays::default_instance_ = new MsgLCReplays();
  MsgCLReplay::default_instance_ = new MsgCLReplay();
  MsgLCReplay::default_instance_ = new MsgLCReplay();
  MsgCHLogin::default_instance_ = new MsgCHLogin();
  MsgHCLogin::default_instance_ = new MsgHCLogin();
  MsgCHRegister::default_instance_ = new MsgCHRegister();
  MsgHCRegister::default_instance_ = new MsgHCRegister();
  MsgCHCharge::default_instance_ = new MsgCHCharge();
  MsgHCCharge::default_instance_ = new MsgHCCharge();
  MsgCHQuery::default_instance_ = new MsgCHQuery();
  MsgHCQuery::default_instance_ = new MsgHCQuery();
  MsgCNConnect::default_instance_ = new MsgCNConnect();
  MsgNCConnect::default_instance_ = new MsgNCConnect();
  MsgCNCreate::default_instance_ = new MsgCNCreate();
  MsgNCCreate::default_instance_ = new MsgNCCreate();
  MsgCNJoin::default_instance_ = new MsgCNJoin();
  MsgNCJoin::default_instance_ = new MsgNCJoin();
  MsgCNReady::default_instance_ = new MsgCNReady();
  MsgNCReady::default_instance_ = new MsgNCReady();
  MsgCNRevive::default_instance_ = new MsgCNRevive();
  MsgNCRevive::default_instance_ = new MsgNCRevive();
  MsgNCDeal::default_instance_ = new MsgNCDeal();
  MsgCNEngage::default_instance_ = new MsgCNEngage();
  MsgNCEngage::default_instance_ = new MsgNCEngage();
  MsgCNDiscard::default_instance_ = new MsgCNDiscard();
  MsgNCDiscard::default_instance_ = new MsgNCDiscard();
  MsgCNMeld::default_instance_ = new MsgCNMeld();
  MsgNCMeld::default_instance_ = new MsgNCMeld();
  MsgNCDraw::default_instance_ = new MsgNCDraw();
  MsgCNDismissSync::default_instance_ = new MsgCNDismissSync();
  MsgNCDismissSync::default_instance_ = new MsgNCDismissSync();
  MsgCNDismissAck::default_instance_ = new MsgCNDismissAck();
  MsgNCDismissAck::default_instance_ = new MsgNCDismissAck();
  MsgNCSettle::default_instance_ = new MsgNCSettle();
  MsgNCFinish::default_instance_ = new MsgNCFinish();
  MsgCNStats::default_instance_ = new MsgCNStats();
  key_value::default_instance_->InitAsDefaultInstance();
  user_t::default_instance_->InitAsDefaultInstance();
  player_t::default_instance_->InitAsDefaultInstance();
  win_t::default_instance_->InitAsDefaultInstance();
  achv_t::default_instance_->InitAsDefaultInstance();
  game_t::default_instance_->InitAsDefaultInstance();
  lobby_t::default_instance_->InitAsDefaultInstance();
  bunch_t::default_instance_->InitAsDefaultInstance();
  play_t::default_instance_->InitAsDefaultInstance();
  charge_t::default_instance_->InitAsDefaultInstance();
  MsgBase::default_instance_->InitAsDefaultInstance();
  MsgCLLogin::default_instance_->InitAsDefaultInstance();
  MsgLCLogin::default_instance_->InitAsDefaultInstance();
  MsgCLLobby::default_instance_->InitAsDefaultInstance();
  MsgLCLobby::default_instance_->InitAsDefaultInstance();
  MsgCLReplays::default_instance_->InitAsDefaultInstance();
  MsgLCReplays::default_instance_->InitAsDefaultInstance();
  MsgCLReplay::default_instance_->InitAsDefaultInstance();
  MsgLCReplay::default_instance_->InitAsDefaultInstance();
  MsgCHLogin::default_instance_->InitAsDefaultInstance();
  MsgHCLogin::default_instance_->InitAsDefaultInstance();
  MsgCHRegister::default_instance_->InitAsDefaultInstance();
  MsgHCRegister::default_instance_->InitAsDefaultInstance();
  MsgCHCharge::default_instance_->InitAsDefaultInstance();
  MsgHCCharge::default_instance_->InitAsDefaultInstance();
  MsgCHQuery::default_instance_->InitAsDefaultInstance();
  MsgHCQuery::default_instance_->InitAsDefaultInstance();
  MsgCNConnect::default_instance_->InitAsDefaultInstance();
  MsgNCConnect::default_instance_->InitAsDefaultInstance();
  MsgCNCreate::default_instance_->InitAsDefaultInstance();
  MsgNCCreate::default_instance_->InitAsDefaultInstance();
  MsgCNJoin::default_instance_->InitAsDefaultInstance();
  MsgNCJoin::default_instance_->InitAsDefaultInstance();
  MsgCNReady::default_instance_->InitAsDefaultInstance();
  MsgNCReady::default_instance_->InitAsDefaultInstance();
  MsgCNRevive::default_instance_->InitAsDefaultInstance();
  MsgNCRevive::default_instance_->InitAsDefaultInstance();
  MsgNCDeal::default_instance_->InitAsDefaultInstance();
  MsgCNEngage::default_instance_->InitAsDefaultInstance();
  MsgNCEngage::default_instance_->InitAsDefaultInstance();
  MsgCNDiscard::default_instance_->InitAsDefaultInstance();
  MsgNCDiscard::default_instance_->InitAsDefaultInstance();
  MsgCNMeld::default_instance_->InitAsDefaultInstance();
  MsgNCMeld::default_instance_->InitAsDefaultInstance();
  MsgNCDraw::default_instance_->InitAsDefaultInstance();
  MsgCNDismissSync::default_instance_->InitAsDefaultInstance();
  MsgNCDismissSync::default_instance_->InitAsDefaultInstance();
  MsgCNDismissAck::default_instance_->InitAsDefaultInstance();
  MsgNCDismissAck::default_instance_->InitAsDefaultInstance();
  MsgNCSettle::default_instance_->InitAsDefaultInstance();
  MsgNCFinish::default_instance_->InitAsDefaultInstance();
  MsgCNStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protocol_2eproto_once_);
void protobuf_AddDesc_protocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protocol_2eproto_once_,
                 &protobuf_AddDesc_protocol_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;
#endif
bool pb_enum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 999:
    case 1000:
    case 100000:
      return true;
    default:
      return false;
  }
}

bool pb_msg_IsValid(int value) {
  switch(value) {
    case 0:
    case 1000:
    case 1001:
    case 4000:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4050:
    case 4999:
    case 5000:
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
    case 5999:
    case 6000:
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6011:
    case 6012:
    case 6013:
    case 6014:
    case 6021:
    case 6022:
    case 6023:
    case 6024:
    case 6031:
    case 6032:
    case 6033:
    case 6034:
    case 6035:
    case 6036:
    case 6038:
    case 6051:
    case 6052:
    case 6053:
    case 6054:
    case 6055:
    case 6081:
    case 6999:
    case 9999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int key_value::kKeyFieldNumber;
const int key_value::kValueFieldNumber;
const int key_value::kIkeyFieldNumber;
const int key_value::kIvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

key_value::key_value()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.key_value)
}

void key_value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

key_value::key_value(const key_value& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.key_value)
}

void key_value::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ikey_ = 0;
  ivalue_ = 0;
}

key_value::~key_value() {
  // @@protoc_insertion_point(destructor:proto3.key_value)
  SharedDtor();
}

void key_value::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void key_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const key_value& key_value::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

key_value* key_value::default_instance_ = NULL;

key_value* key_value::New(::google::protobuf::Arena* arena) const {
  key_value* n = new key_value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void key_value::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.key_value)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(key_value, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<key_value*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ikey_, ivalue_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool key_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.key_value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.key_value.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.key_value.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ikey;
        break;
      }

      // optional .proto3.pb_enum ikey = 3;
      case 3: {
        if (tag == 24) {
         parse_ikey:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ikey(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ivalue;
        break;
      }

      // optional int32 ivalue = 4;
      case 4: {
        if (tag == 32) {
         parse_ivalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivalue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.key_value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.key_value)
  return false;
#undef DO_
}

void key_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.key_value)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.key_value.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.key_value.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional .proto3.pb_enum ikey = 3;
  if (this->ikey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ikey(), output);
  }

  // optional int32 ivalue = 4;
  if (this->ivalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ivalue(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.key_value)
}

int key_value::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.key_value)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional .proto3.pb_enum ikey = 3;
  if (this->ikey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ikey());
  }

  // optional int32 ivalue = 4;
  if (this->ivalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ivalue());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void key_value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const key_value*>(&from));
}

void key_value::MergeFrom(const key_value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.key_value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.ikey() != 0) {
    set_ikey(from.ikey());
  }
  if (from.ivalue() != 0) {
    set_ivalue(from.ivalue());
  }
}

void key_value::CopyFrom(const key_value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.key_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool key_value::IsInitialized() const {

  return true;
}

void key_value::Swap(key_value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void key_value::InternalSwap(key_value* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(ikey_, other->ikey_);
  std::swap(ivalue_, other->ivalue_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string key_value::GetTypeName() const {
  return "proto3.key_value";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// key_value

// optional string key = 1;
void key_value::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& key_value::key() const {
  // @@protoc_insertion_point(field_get:proto3.key_value.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void key_value::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.key_value.key)
}
 void key_value::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.key_value.key)
}
 void key_value::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.key_value.key)
}
 ::std::string* key_value::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto3.key_value.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* key_value::release_key() {
  // @@protoc_insertion_point(field_release:proto3.key_value.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void key_value::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto3.key_value.key)
}

// optional string value = 2;
void key_value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& key_value::value() const {
  // @@protoc_insertion_point(field_get:proto3.key_value.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void key_value::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.key_value.value)
}
 void key_value::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.key_value.value)
}
 void key_value::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.key_value.value)
}
 ::std::string* key_value::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:proto3.key_value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* key_value::release_value() {
  // @@protoc_insertion_point(field_release:proto3.key_value.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void key_value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto3.key_value.value)
}

// optional .proto3.pb_enum ikey = 3;
void key_value::clear_ikey() {
  ikey_ = 0;
}
 ::proto3::pb_enum key_value::ikey() const {
  // @@protoc_insertion_point(field_get:proto3.key_value.ikey)
  return static_cast< ::proto3::pb_enum >(ikey_);
}
 void key_value::set_ikey(::proto3::pb_enum value) {
  
  ikey_ = value;
  // @@protoc_insertion_point(field_set:proto3.key_value.ikey)
}

// optional int32 ivalue = 4;
void key_value::clear_ivalue() {
  ivalue_ = 0;
}
 ::google::protobuf::int32 key_value::ivalue() const {
  // @@protoc_insertion_point(field_get:proto3.key_value.ivalue)
  return ivalue_;
}
 void key_value::set_ivalue(::google::protobuf::int32 value) {
  
  ivalue_ = value;
  // @@protoc_insertion_point(field_set:proto3.key_value.ivalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_t::kUidFieldNumber;
const int user_t::kFlagFieldNumber;
const int user_t::kDevTypeFieldNumber;
const int user_t::kAccountFieldNumber;
const int user_t::kNameFieldNumber;
const int user_t::kPswdFieldNumber;
const int user_t::kGenderFieldNumber;
const int user_t::kAgeFieldNumber;
const int user_t::kUdidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_t::user_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.user_t)
}

void user_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

user_t::user_t(const user_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.user_t)
}

void user_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  dev_type_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  age_ = 0;
  udid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

user_t::~user_t() {
  // @@protoc_insertion_point(destructor:proto3.user_t)
  SharedDtor();
}

void user_t::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void user_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const user_t& user_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

user_t* user_t::default_instance_ = NULL;

user_t* user_t::New(::google::protobuf::Arena* arena) const {
  user_t* n = new user_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.user_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(user_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<user_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(flag_, dev_type_);
  ZR_(gender_, age_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool user_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.user_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dev_type;
        break;
      }

      // optional .proto3.pb_enum dev_type = 3;
      case 3: {
        if (tag == 24) {
         parse_dev_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dev_type(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (tag == 34) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.account"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pswd;
        break;
      }

      // optional string pswd = 6;
      case 6: {
        if (tag == 50) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.pswd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gender;
        break;
      }

      // optional int32 gender = 7;
      case 7: {
        if (tag == 56) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_age;
        break;
      }

      // optional int32 age = 8;
      case 8: {
        if (tag == 64) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_udid;
        break;
      }

      // optional string udid = 9;
      case 9: {
        if (tag == 74) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->udid().data(), this->udid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.user_t.udid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.user_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.user_t)
  return false;
#undef DO_
}

void user_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.user_t)
  // optional string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional int32 flag = 2;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional .proto3.pb_enum dev_type = 3;
  if (this->dev_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dev_type(), output);
  }

  // optional string account = 4;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account(), output);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional string pswd = 6;
  if (this->pswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->pswd(), output);
  }

  // optional int32 gender = 7;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender(), output);
  }

  // optional int32 age = 8;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->age(), output);
  }

  // optional string udid = 9;
  if (this->udid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.user_t.udid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->udid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.user_t)
}

int user_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.user_t)
  int total_size = 0;

  // optional string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional int32 flag = 2;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  // optional .proto3.pb_enum dev_type = 3;
  if (this->dev_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dev_type());
  }

  // optional string account = 4;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string pswd = 6;
  if (this->pswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pswd());
  }

  // optional int32 gender = 7;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gender());
  }

  // optional int32 age = 8;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // optional string udid = 9;
  if (this->udid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->udid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const user_t*>(&from));
}

void user_t::MergeFrom(const user_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.user_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
  if (from.dev_type() != 0) {
    set_dev_type(from.dev_type());
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pswd().size() > 0) {

    pswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pswd_);
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.udid().size() > 0) {

    udid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.udid_);
  }
}

void user_t::CopyFrom(const user_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.user_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_t::IsInitialized() const {

  return true;
}

void user_t::Swap(user_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_t::InternalSwap(user_t* other) {
  uid_.Swap(&other->uid_);
  std::swap(flag_, other->flag_);
  std::swap(dev_type_, other->dev_type_);
  account_.Swap(&other->account_);
  name_.Swap(&other->name_);
  pswd_.Swap(&other->pswd_);
  std::swap(gender_, other->gender_);
  std::swap(age_, other->age_);
  udid_.Swap(&other->udid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string user_t::GetTypeName() const {
  return "proto3.user_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_t

// optional string uid = 1;
void user_t::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::uid() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.uid)
}
 void user_t::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.uid)
}
 void user_t::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.uid)
}
 ::std::string* user_t::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.user_t.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.uid)
}

// optional int32 flag = 2;
void user_t::clear_flag() {
  flag_ = 0;
}
 ::google::protobuf::int32 user_t::flag() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.flag)
  return flag_;
}
 void user_t::set_flag(::google::protobuf::int32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:proto3.user_t.flag)
}

// optional .proto3.pb_enum dev_type = 3;
void user_t::clear_dev_type() {
  dev_type_ = 0;
}
 ::proto3::pb_enum user_t::dev_type() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.dev_type)
  return static_cast< ::proto3::pb_enum >(dev_type_);
}
 void user_t::set_dev_type(::proto3::pb_enum value) {
  
  dev_type_ = value;
  // @@protoc_insertion_point(field_set:proto3.user_t.dev_type)
}

// optional string account = 4;
void user_t::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::account() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.account)
}
 void user_t::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.account)
}
 void user_t::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.account)
}
 ::std::string* user_t::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_account() {
  // @@protoc_insertion_point(field_release:proto3.user_t.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.account)
}

// optional string name = 5;
void user_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::name() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.name)
}
 void user_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.name)
}
 void user_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.name)
}
 ::std::string* user_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_name() {
  // @@protoc_insertion_point(field_release:proto3.user_t.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.name)
}

// optional string pswd = 6;
void user_t::clear_pswd() {
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::pswd() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.pswd)
  return pswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_pswd(const ::std::string& value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.pswd)
}
 void user_t::set_pswd(const char* value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.pswd)
}
 void user_t::set_pswd(const char* value, size_t size) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.pswd)
}
 ::std::string* user_t::mutable_pswd() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.pswd)
  return pswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_pswd() {
  // @@protoc_insertion_point(field_release:proto3.user_t.pswd)
  
  return pswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_pswd(::std::string* pswd) {
  if (pswd != NULL) {
    
  } else {
    
  }
  pswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pswd);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.pswd)
}

// optional int32 gender = 7;
void user_t::clear_gender() {
  gender_ = 0;
}
 ::google::protobuf::int32 user_t::gender() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.gender)
  return gender_;
}
 void user_t::set_gender(::google::protobuf::int32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:proto3.user_t.gender)
}

// optional int32 age = 8;
void user_t::clear_age() {
  age_ = 0;
}
 ::google::protobuf::int32 user_t::age() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.age)
  return age_;
}
 void user_t::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:proto3.user_t.age)
}

// optional string udid = 9;
void user_t::clear_udid() {
  udid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& user_t::udid() const {
  // @@protoc_insertion_point(field_get:proto3.user_t.udid)
  return udid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_udid(const ::std::string& value) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.user_t.udid)
}
 void user_t::set_udid(const char* value) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.user_t.udid)
}
 void user_t::set_udid(const char* value, size_t size) {
  
  udid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.user_t.udid)
}
 ::std::string* user_t::mutable_udid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.user_t.udid)
  return udid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* user_t::release_udid() {
  // @@protoc_insertion_point(field_release:proto3.user_t.udid)
  
  return udid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void user_t::set_allocated_udid(::std::string* udid) {
  if (udid != NULL) {
    
  } else {
    
  }
  udid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), udid);
  // @@protoc_insertion_point(field_set_allocated:proto3.user_t.udid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int player_t::kUidFieldNumber;
const int player_t::kPidFieldNumber;
const int player_t::kLevelFieldNumber;
const int player_t::kXpFieldNumber;
const int player_t::kSilverFieldNumber;
const int player_t::kGoldFieldNumber;
const int player_t::kEnergyFieldNumber;
const int player_t::kWinsFieldNumber;
const int player_t::kAchvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

player_t::player_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.player_t)
}

void player_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

player_t::player_t(const player_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.player_t)
}

void player_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = 0u;
  level_ = 0;
  xp_ = 0;
  silver_ = 0;
  gold_ = 0;
  energy_ = 0;
}

player_t::~player_t() {
  // @@protoc_insertion_point(destructor:proto3.player_t)
  SharedDtor();
}

void player_t::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void player_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const player_t& player_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

player_t* player_t::default_instance_ = NULL;

player_t* player_t::New(::google::protobuf::Arena* arena) const {
  player_t* n = new player_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void player_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.player_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(player_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<player_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pid_, energy_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  wins_.Clear();
  achvs_.Clear();
}

bool player_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.player_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.player_t.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_xp;
        break;
      }

      // optional int32 xp = 4;
      case 4: {
        if (tag == 32) {
         parse_xp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_silver;
        break;
      }

      // optional int32 silver = 5;
      case 5: {
        if (tag == 40) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional int32 gold = 6;
      case 6: {
        if (tag == 48) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_energy;
        break;
      }

      // optional int32 energy = 7;
      case 7: {
        if (tag == 56) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wins;
        break;
      }

      // repeated .proto3.win_t wins = 8;
      case 8: {
        if (tag == 66) {
         parse_wins:
          DO_(input->IncrementRecursionDepth());
         parse_loop_wins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_wins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_wins;
        if (input->ExpectTag(74)) goto parse_loop_achvs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto3.achv_t achvs = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_achvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_achvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_achvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.player_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.player_t)
  return false;
#undef DO_
}

void player_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.player_t)
  // optional string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.player_t.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional uint32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // optional int32 level = 3;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 xp = 4;
  if (this->xp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->xp(), output);
  }

  // optional int32 silver = 5;
  if (this->silver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->silver(), output);
  }

  // optional int32 gold = 6;
  if (this->gold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold(), output);
  }

  // optional int32 energy = 7;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->energy(), output);
  }

  // repeated .proto3.win_t wins = 8;
  for (unsigned int i = 0, n = this->wins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->wins(i), output);
  }

  // repeated .proto3.achv_t achvs = 9;
  for (unsigned int i = 0, n = this->achvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->achvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.player_t)
}

int player_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.player_t)
  int total_size = 0;

  // optional string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  // optional int32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // optional int32 xp = 4;
  if (this->xp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xp());
  }

  // optional int32 silver = 5;
  if (this->silver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->silver());
  }

  // optional int32 gold = 6;
  if (this->gold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  // optional int32 energy = 7;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->energy());
  }

  // repeated .proto3.win_t wins = 8;
  total_size += 1 * this->wins_size();
  for (int i = 0; i < this->wins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wins(i));
  }

  // repeated .proto3.achv_t achvs = 9;
  total_size += 1 * this->achvs_size();
  for (int i = 0; i < this->achvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const player_t*>(&from));
}

void player_t::MergeFrom(const player_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.player_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  wins_.MergeFrom(from.wins_);
  achvs_.MergeFrom(from.achvs_);
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.xp() != 0) {
    set_xp(from.xp());
  }
  if (from.silver() != 0) {
    set_silver(from.silver());
  }
  if (from.gold() != 0) {
    set_gold(from.gold());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
}

void player_t::CopyFrom(const player_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.player_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_t::IsInitialized() const {

  return true;
}

void player_t::Swap(player_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void player_t::InternalSwap(player_t* other) {
  uid_.Swap(&other->uid_);
  std::swap(pid_, other->pid_);
  std::swap(level_, other->level_);
  std::swap(xp_, other->xp_);
  std::swap(silver_, other->silver_);
  std::swap(gold_, other->gold_);
  std::swap(energy_, other->energy_);
  wins_.UnsafeArenaSwap(&other->wins_);
  achvs_.UnsafeArenaSwap(&other->achvs_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string player_t::GetTypeName() const {
  return "proto3.player_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// player_t

// optional string uid = 1;
void player_t::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& player_t::uid() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void player_t::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.player_t.uid)
}
 void player_t::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.player_t.uid)
}
 void player_t::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.player_t.uid)
}
 ::std::string* player_t::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.player_t.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* player_t::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.player_t.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void player_t::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.player_t.uid)
}

// optional uint32 pid = 2;
void player_t::clear_pid() {
  pid_ = 0u;
}
 ::google::protobuf::uint32 player_t::pid() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.pid)
  return pid_;
}
 void player_t::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.pid)
}

// optional int32 level = 3;
void player_t::clear_level() {
  level_ = 0;
}
 ::google::protobuf::int32 player_t::level() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.level)
  return level_;
}
 void player_t::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.level)
}

// optional int32 xp = 4;
void player_t::clear_xp() {
  xp_ = 0;
}
 ::google::protobuf::int32 player_t::xp() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.xp)
  return xp_;
}
 void player_t::set_xp(::google::protobuf::int32 value) {
  
  xp_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.xp)
}

// optional int32 silver = 5;
void player_t::clear_silver() {
  silver_ = 0;
}
 ::google::protobuf::int32 player_t::silver() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.silver)
  return silver_;
}
 void player_t::set_silver(::google::protobuf::int32 value) {
  
  silver_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.silver)
}

// optional int32 gold = 6;
void player_t::clear_gold() {
  gold_ = 0;
}
 ::google::protobuf::int32 player_t::gold() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.gold)
  return gold_;
}
 void player_t::set_gold(::google::protobuf::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.gold)
}

// optional int32 energy = 7;
void player_t::clear_energy() {
  energy_ = 0;
}
 ::google::protobuf::int32 player_t::energy() const {
  // @@protoc_insertion_point(field_get:proto3.player_t.energy)
  return energy_;
}
 void player_t::set_energy(::google::protobuf::int32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto3.player_t.energy)
}

// repeated .proto3.win_t wins = 8;
int player_t::wins_size() const {
  return wins_.size();
}
void player_t::clear_wins() {
  wins_.Clear();
}
const ::proto3::win_t& player_t::wins(int index) const {
  // @@protoc_insertion_point(field_get:proto3.player_t.wins)
  return wins_.Get(index);
}
::proto3::win_t* player_t::mutable_wins(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.player_t.wins)
  return wins_.Mutable(index);
}
::proto3::win_t* player_t::add_wins() {
  // @@protoc_insertion_point(field_add:proto3.player_t.wins)
  return wins_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::win_t >*
player_t::mutable_wins() {
  // @@protoc_insertion_point(field_mutable_list:proto3.player_t.wins)
  return &wins_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::win_t >&
player_t::wins() const {
  // @@protoc_insertion_point(field_list:proto3.player_t.wins)
  return wins_;
}

// repeated .proto3.achv_t achvs = 9;
int player_t::achvs_size() const {
  return achvs_.size();
}
void player_t::clear_achvs() {
  achvs_.Clear();
}
const ::proto3::achv_t& player_t::achvs(int index) const {
  // @@protoc_insertion_point(field_get:proto3.player_t.achvs)
  return achvs_.Get(index);
}
::proto3::achv_t* player_t::mutable_achvs(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.player_t.achvs)
  return achvs_.Mutable(index);
}
::proto3::achv_t* player_t::add_achvs() {
  // @@protoc_insertion_point(field_add:proto3.player_t.achvs)
  return achvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::achv_t >*
player_t::mutable_achvs() {
  // @@protoc_insertion_point(field_mutable_list:proto3.player_t.achvs)
  return &achvs_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::achv_t >&
player_t::achvs() const {
  // @@protoc_insertion_point(field_list:proto3.player_t.achvs)
  return achvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int win_t::kUidFieldNumber;
const int win_t::kGidFieldNumber;
const int win_t::kWinFieldNumber;
const int win_t::kLoseFieldNumber;
const int win_t::kDrawFieldNumber;
const int win_t::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

win_t::win_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.win_t)
}

void win_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

win_t::win_t(const win_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.win_t)
}

void win_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_ = 0;
  win_ = 0;
  lose_ = 0;
  draw_ = 0;
  score_ = 0;
}

win_t::~win_t() {
  // @@protoc_insertion_point(destructor:proto3.win_t)
  SharedDtor();
}

void win_t::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void win_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const win_t& win_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

win_t* win_t::default_instance_ = NULL;

win_t* win_t::New(::google::protobuf::Arena* arena) const {
  win_t* n = new win_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void win_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.win_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(win_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<win_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gid_, score_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool win_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.win_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.win_t.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // optional int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }

      // optional int32 win = 3;
      case 3: {
        if (tag == 24) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lose;
        break;
      }

      // optional int32 lose = 4;
      case 4: {
        if (tag == 32) {
         parse_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_draw;
        break;
      }

      // optional int32 draw = 5;
      case 5: {
        if (tag == 40) {
         parse_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int32 score = 6;
      case 6: {
        if (tag == 48) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.win_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.win_t)
  return false;
#undef DO_
}

void win_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.win_t)
  // optional string uid = 1;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.win_t.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional int32 gid = 2;
  if (this->gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // optional int32 win = 3;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win(), output);
  }

  // optional int32 lose = 4;
  if (this->lose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lose(), output);
  }

  // optional int32 draw = 5;
  if (this->draw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->draw(), output);
  }

  // optional int32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.win_t)
}

int win_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.win_t)
  int total_size = 0;

  // optional string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional int32 gid = 2;
  if (this->gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gid());
  }

  // optional int32 win = 3;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());
  }

  // optional int32 lose = 4;
  if (this->lose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lose());
  }

  // optional int32 draw = 5;
  if (this->draw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->draw());
  }

  // optional int32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void win_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const win_t*>(&from));
}

void win_t::MergeFrom(const win_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.win_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.gid() != 0) {
    set_gid(from.gid());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.lose() != 0) {
    set_lose(from.lose());
  }
  if (from.draw() != 0) {
    set_draw(from.draw());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void win_t::CopyFrom(const win_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.win_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool win_t::IsInitialized() const {

  return true;
}

void win_t::Swap(win_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void win_t::InternalSwap(win_t* other) {
  uid_.Swap(&other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(win_, other->win_);
  std::swap(lose_, other->lose_);
  std::swap(draw_, other->draw_);
  std::swap(score_, other->score_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string win_t::GetTypeName() const {
  return "proto3.win_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// win_t

// optional string uid = 1;
void win_t::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& win_t::uid() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void win_t::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.win_t.uid)
}
 void win_t::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.win_t.uid)
}
 void win_t::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.win_t.uid)
}
 ::std::string* win_t::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.win_t.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* win_t::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.win_t.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void win_t::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.win_t.uid)
}

// optional int32 gid = 2;
void win_t::clear_gid() {
  gid_ = 0;
}
 ::google::protobuf::int32 win_t::gid() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.gid)
  return gid_;
}
 void win_t::set_gid(::google::protobuf::int32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.gid)
}

// optional int32 win = 3;
void win_t::clear_win() {
  win_ = 0;
}
 ::google::protobuf::int32 win_t::win() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.win)
  return win_;
}
 void win_t::set_win(::google::protobuf::int32 value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.win)
}

// optional int32 lose = 4;
void win_t::clear_lose() {
  lose_ = 0;
}
 ::google::protobuf::int32 win_t::lose() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.lose)
  return lose_;
}
 void win_t::set_lose(::google::protobuf::int32 value) {
  
  lose_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.lose)
}

// optional int32 draw = 5;
void win_t::clear_draw() {
  draw_ = 0;
}
 ::google::protobuf::int32 win_t::draw() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.draw)
  return draw_;
}
 void win_t::set_draw(::google::protobuf::int32 value) {
  
  draw_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.draw)
}

// optional int32 score = 6;
void win_t::clear_score() {
  score_ = 0;
}
 ::google::protobuf::int32 win_t::score() const {
  // @@protoc_insertion_point(field_get:proto3.win_t.score)
  return score_;
}
 void win_t::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto3.win_t.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int achv_t::kTypeFieldNumber;
const int achv_t::kNameFieldNumber;
const int achv_t::kKeyFieldNumber;
const int achv_t::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

achv_t::achv_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.achv_t)
}

void achv_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

achv_t::achv_t(const achv_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.achv_t)
}

void achv_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = 0;
  value_ = 0;
}

achv_t::~achv_t() {
  // @@protoc_insertion_point(destructor:proto3.achv_t)
  SharedDtor();
}

void achv_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void achv_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const achv_t& achv_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

achv_t* achv_t::default_instance_ = NULL;

achv_t* achv_t::New(::google::protobuf::Arena* arena) const {
  achv_t* n = new achv_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void achv_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.achv_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(achv_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<achv_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, value_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool achv_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.achv_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_enum type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.achv_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_key;
        break;
      }

      // optional int32 key = 3;
      case 3: {
        if (tag == 24) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.achv_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.achv_t)
  return false;
#undef DO_
}

void achv_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.achv_t)
  // optional .proto3.pb_enum type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.achv_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 key = 3;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key(), output);
  }

  // optional int32 value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.achv_t)
}

int achv_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.achv_t)
  int total_size = 0;

  // optional .proto3.pb_enum type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 key = 3;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  // optional int32 value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void achv_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const achv_t*>(&from));
}

void achv_t::MergeFrom(const achv_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.achv_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void achv_t::CopyFrom(const achv_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.achv_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool achv_t::IsInitialized() const {

  return true;
}

void achv_t::Swap(achv_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void achv_t::InternalSwap(achv_t* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string achv_t::GetTypeName() const {
  return "proto3.achv_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// achv_t

// optional .proto3.pb_enum type = 1;
void achv_t::clear_type() {
  type_ = 0;
}
 ::proto3::pb_enum achv_t::type() const {
  // @@protoc_insertion_point(field_get:proto3.achv_t.type)
  return static_cast< ::proto3::pb_enum >(type_);
}
 void achv_t::set_type(::proto3::pb_enum value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3.achv_t.type)
}

// optional string name = 2;
void achv_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& achv_t::name() const {
  // @@protoc_insertion_point(field_get:proto3.achv_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void achv_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.achv_t.name)
}
 void achv_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.achv_t.name)
}
 void achv_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.achv_t.name)
}
 ::std::string* achv_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.achv_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* achv_t::release_name() {
  // @@protoc_insertion_point(field_release:proto3.achv_t.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void achv_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.achv_t.name)
}

// optional int32 key = 3;
void achv_t::clear_key() {
  key_ = 0;
}
 ::google::protobuf::int32 achv_t::key() const {
  // @@protoc_insertion_point(field_get:proto3.achv_t.key)
  return key_;
}
 void achv_t::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto3.achv_t.key)
}

// optional int32 value = 4;
void achv_t::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 achv_t::value() const {
  // @@protoc_insertion_point(field_get:proto3.achv_t.value)
  return value_;
}
 void achv_t::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto3.achv_t.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int game_t::kIdFieldNumber;
const int game_t::kVersionFieldNumber;
const int game_t::kIpFieldNumber;
const int game_t::kPortFieldNumber;
const int game_t::kOccupiedFieldNumber;
const int game_t::kCapacityFieldNumber;
const int game_t::kDescFieldNumber;
const int game_t::kStatusFieldNumber;
const int game_t::kOpenningTimeFieldNumber;
const int game_t::kMaintainStartFieldNumber;
const int game_t::kMaintainEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

game_t::game_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.game_t)
}

void game_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

game_t::game_t(const game_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.game_t)
}

void game_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  version_ = 0u;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  occupied_ = 0;
  capacity_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  openning_time_ = 0u;
  maintain_start_ = 0u;
  maintain_end_ = 0u;
}

game_t::~game_t() {
  // @@protoc_insertion_point(destructor:proto3.game_t)
  SharedDtor();
}

void game_t::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void game_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const game_t& game_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

game_t* game_t::default_instance_ = NULL;

game_t* game_t::New(::google::protobuf::Arena* arena) const {
  game_t* n = new game_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void game_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.game_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(game_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<game_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, version_);
  ZR_(port_, occupied_);
  ZR_(capacity_, status_);
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(openning_time_, maintain_end_);

#undef ZR_HELPER_
#undef ZR_

}

bool game_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.game_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.game_t.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_occupied;
        break;
      }

      // optional int32 occupied = 5;
      case 5: {
        if (tag == 40) {
         parse_occupied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupied_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_capacity;
        break;
      }

      // optional int32 capacity = 6;
      case 6: {
        if (tag == 48) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_desc;
        break;
      }

      // optional string desc = 7;
      case 7: {
        if (tag == 58) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.game_t.desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional int32 status = 8;
      case 8: {
        if (tag == 64) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_openning_time;
        break;
      }

      // optional uint32 openning_time = 9;
      case 9: {
        if (tag == 72) {
         parse_openning_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openning_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maintain_start;
        break;
      }

      // optional uint32 maintain_start = 10;
      case 10: {
        if (tag == 80) {
         parse_maintain_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintain_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maintain_end;
        break;
      }

      // optional uint32 maintain_end = 11;
      case 11: {
        if (tag == 88) {
         parse_maintain_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintain_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.game_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.game_t)
  return false;
#undef DO_
}

void game_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.game_t)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.game_t.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional int32 occupied = 5;
  if (this->occupied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->occupied(), output);
  }

  // optional int32 capacity = 6;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->capacity(), output);
  }

  // optional string desc = 7;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.game_t.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->desc(), output);
  }

  // optional int32 status = 8;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status(), output);
  }

  // optional uint32 openning_time = 9;
  if (this->openning_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->openning_time(), output);
  }

  // optional uint32 maintain_start = 10;
  if (this->maintain_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maintain_start(), output);
  }

  // optional uint32 maintain_end = 11;
  if (this->maintain_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maintain_end(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.game_t)
}

int game_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.game_t)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional int32 occupied = 5;
  if (this->occupied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupied());
  }

  // optional int32 capacity = 6;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());
  }

  // optional string desc = 7;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // optional int32 status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional uint32 openning_time = 9;
  if (this->openning_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->openning_time());
  }

  // optional uint32 maintain_start = 10;
  if (this->maintain_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintain_start());
  }

  // optional uint32 maintain_end = 11;
  if (this->maintain_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintain_end());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const game_t*>(&from));
}

void game_t::MergeFrom(const game_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.game_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.occupied() != 0) {
    set_occupied(from.occupied());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.openning_time() != 0) {
    set_openning_time(from.openning_time());
  }
  if (from.maintain_start() != 0) {
    set_maintain_start(from.maintain_start());
  }
  if (from.maintain_end() != 0) {
    set_maintain_end(from.maintain_end());
  }
}

void game_t::CopyFrom(const game_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.game_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_t::IsInitialized() const {

  return true;
}

void game_t::Swap(game_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void game_t::InternalSwap(game_t* other) {
  std::swap(id_, other->id_);
  std::swap(version_, other->version_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(occupied_, other->occupied_);
  std::swap(capacity_, other->capacity_);
  desc_.Swap(&other->desc_);
  std::swap(status_, other->status_);
  std::swap(openning_time_, other->openning_time_);
  std::swap(maintain_start_, other->maintain_start_);
  std::swap(maintain_end_, other->maintain_end_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string game_t::GetTypeName() const {
  return "proto3.game_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// game_t

// optional int32 id = 1;
void game_t::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 game_t::id() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.id)
  return id_;
}
 void game_t::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.id)
}

// optional uint32 version = 2;
void game_t::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 game_t::version() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.version)
  return version_;
}
 void game_t::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.version)
}

// optional string ip = 3;
void game_t::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& game_t::ip() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void game_t::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.game_t.ip)
}
 void game_t::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.game_t.ip)
}
 void game_t::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.game_t.ip)
}
 ::std::string* game_t::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto3.game_t.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* game_t::release_ip() {
  // @@protoc_insertion_point(field_release:proto3.game_t.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void game_t::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto3.game_t.ip)
}

// optional uint32 port = 4;
void game_t::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 game_t::port() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.port)
  return port_;
}
 void game_t::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.port)
}

// optional int32 occupied = 5;
void game_t::clear_occupied() {
  occupied_ = 0;
}
 ::google::protobuf::int32 game_t::occupied() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.occupied)
  return occupied_;
}
 void game_t::set_occupied(::google::protobuf::int32 value) {
  
  occupied_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.occupied)
}

// optional int32 capacity = 6;
void game_t::clear_capacity() {
  capacity_ = 0;
}
 ::google::protobuf::int32 game_t::capacity() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.capacity)
  return capacity_;
}
 void game_t::set_capacity(::google::protobuf::int32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.capacity)
}

// optional string desc = 7;
void game_t::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& game_t::desc() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void game_t::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.game_t.desc)
}
 void game_t::set_desc(const char* value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.game_t.desc)
}
 void game_t::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.game_t.desc)
}
 ::std::string* game_t::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:proto3.game_t.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* game_t::release_desc() {
  // @@protoc_insertion_point(field_release:proto3.game_t.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void game_t::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:proto3.game_t.desc)
}

// optional int32 status = 8;
void game_t::clear_status() {
  status_ = 0;
}
 ::google::protobuf::int32 game_t::status() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.status)
  return status_;
}
 void game_t::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.status)
}

// optional uint32 openning_time = 9;
void game_t::clear_openning_time() {
  openning_time_ = 0u;
}
 ::google::protobuf::uint32 game_t::openning_time() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.openning_time)
  return openning_time_;
}
 void game_t::set_openning_time(::google::protobuf::uint32 value) {
  
  openning_time_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.openning_time)
}

// optional uint32 maintain_start = 10;
void game_t::clear_maintain_start() {
  maintain_start_ = 0u;
}
 ::google::protobuf::uint32 game_t::maintain_start() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.maintain_start)
  return maintain_start_;
}
 void game_t::set_maintain_start(::google::protobuf::uint32 value) {
  
  maintain_start_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.maintain_start)
}

// optional uint32 maintain_end = 11;
void game_t::clear_maintain_end() {
  maintain_end_ = 0u;
}
 ::google::protobuf::uint32 game_t::maintain_end() const {
  // @@protoc_insertion_point(field_get:proto3.game_t.maintain_end)
  return maintain_end_;
}
 void game_t::set_maintain_end(::google::protobuf::uint32 value) {
  
  maintain_end_ = value;
  // @@protoc_insertion_point(field_set:proto3.game_t.maintain_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lobby_t::kVersionFieldNumber;
const int lobby_t::kIpFieldNumber;
const int lobby_t::kPortFieldNumber;
const int lobby_t::kOccupiedFieldNumber;
const int lobby_t::kCapacityFieldNumber;
const int lobby_t::kDescFieldNumber;
const int lobby_t::kBulletinFieldNumber;
const int lobby_t::kStatusFieldNumber;
const int lobby_t::kMaintainStartFieldNumber;
const int lobby_t::kMaintainEndFieldNumber;
const int lobby_t::kTimeZoneFieldNumber;
const int lobby_t::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lobby_t::lobby_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.lobby_t)
}

void lobby_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

lobby_t::lobby_t(const lobby_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.lobby_t)
}

void lobby_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  occupied_ = 0;
  capacity_ = 0;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  maintain_start_ = 0u;
  maintain_end_ = 0u;
  time_zone_ = 0u;
}

lobby_t::~lobby_t() {
  // @@protoc_insertion_point(destructor:proto3.lobby_t)
  SharedDtor();
}

void lobby_t::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void lobby_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const lobby_t& lobby_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

lobby_t* lobby_t::default_instance_ = NULL;

lobby_t* lobby_t::New(::google::protobuf::Arena* arena) const {
  lobby_t* n = new lobby_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lobby_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.lobby_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(lobby_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<lobby_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, capacity_);
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bulletin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ZR_(maintain_start_, time_zone_);

#undef ZR_HELPER_
#undef ZR_

  games_.Clear();
}

bool lobby_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.lobby_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.lobby_t.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_occupied;
        break;
      }

      // optional int32 occupied = 4;
      case 4: {
        if (tag == 32) {
         parse_occupied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupied_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_capacity;
        break;
      }

      // optional int32 capacity = 5;
      case 5: {
        if (tag == 40) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // optional string desc = 6;
      case 6: {
        if (tag == 50) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.lobby_t.desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bulletin;
        break;
      }

      // optional string bulletin = 7;
      case 7: {
        if (tag == 58) {
         parse_bulletin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bulletin().data(), this->bulletin().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.lobby_t.bulletin"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional int32 status = 8;
      case 8: {
        if (tag == 64) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maintain_start;
        break;
      }

      // optional uint32 maintain_start = 9;
      case 9: {
        if (tag == 72) {
         parse_maintain_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintain_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maintain_end;
        break;
      }

      // optional uint32 maintain_end = 10;
      case 10: {
        if (tag == 80) {
         parse_maintain_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maintain_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time_zone;
        break;
      }

      // optional uint32 time_zone = 11;
      case 11: {
        if (tag == 88) {
         parse_time_zone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_zone_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_games;
        break;
      }

      // repeated .proto3.game_t games = 12;
      case 12: {
        if (tag == 98) {
         parse_games:
          DO_(input->IncrementRecursionDepth());
         parse_loop_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_games;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.lobby_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.lobby_t)
  return false;
#undef DO_
}

void lobby_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.lobby_t)
  // optional uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.lobby_t.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional int32 occupied = 4;
  if (this->occupied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occupied(), output);
  }

  // optional int32 capacity = 5;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->capacity(), output);
  }

  // optional string desc = 6;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.lobby_t.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->desc(), output);
  }

  // optional string bulletin = 7;
  if (this->bulletin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bulletin().data(), this->bulletin().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.lobby_t.bulletin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bulletin(), output);
  }

  // optional int32 status = 8;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status(), output);
  }

  // optional uint32 maintain_start = 9;
  if (this->maintain_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->maintain_start(), output);
  }

  // optional uint32 maintain_end = 10;
  if (this->maintain_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maintain_end(), output);
  }

  // optional uint32 time_zone = 11;
  if (this->time_zone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_zone(), output);
  }

  // repeated .proto3.game_t games = 12;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->games(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.lobby_t)
}

int lobby_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.lobby_t)
  int total_size = 0;

  // optional uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional int32 occupied = 4;
  if (this->occupied() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->occupied());
  }

  // optional int32 capacity = 5;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());
  }

  // optional string desc = 6;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // optional string bulletin = 7;
  if (this->bulletin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bulletin());
  }

  // optional int32 status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional uint32 maintain_start = 9;
  if (this->maintain_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintain_start());
  }

  // optional uint32 maintain_end = 10;
  if (this->maintain_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maintain_end());
  }

  // optional uint32 time_zone = 11;
  if (this->time_zone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_zone());
  }

  // repeated .proto3.game_t games = 12;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lobby_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const lobby_t*>(&from));
}

void lobby_t::MergeFrom(const lobby_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.lobby_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  games_.MergeFrom(from.games_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.occupied() != 0) {
    set_occupied(from.occupied());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.bulletin().size() > 0) {

    bulletin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bulletin_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.maintain_start() != 0) {
    set_maintain_start(from.maintain_start());
  }
  if (from.maintain_end() != 0) {
    set_maintain_end(from.maintain_end());
  }
  if (from.time_zone() != 0) {
    set_time_zone(from.time_zone());
  }
}

void lobby_t::CopyFrom(const lobby_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.lobby_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lobby_t::IsInitialized() const {

  return true;
}

void lobby_t::Swap(lobby_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lobby_t::InternalSwap(lobby_t* other) {
  std::swap(version_, other->version_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(occupied_, other->occupied_);
  std::swap(capacity_, other->capacity_);
  desc_.Swap(&other->desc_);
  bulletin_.Swap(&other->bulletin_);
  std::swap(status_, other->status_);
  std::swap(maintain_start_, other->maintain_start_);
  std::swap(maintain_end_, other->maintain_end_);
  std::swap(time_zone_, other->time_zone_);
  games_.UnsafeArenaSwap(&other->games_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string lobby_t::GetTypeName() const {
  return "proto3.lobby_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// lobby_t

// optional uint32 version = 1;
void lobby_t::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::version() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.version)
  return version_;
}
 void lobby_t::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.version)
}

// optional string ip = 2;
void lobby_t::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& lobby_t::ip() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.lobby_t.ip)
}
 void lobby_t::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.lobby_t.ip)
}
 void lobby_t::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.lobby_t.ip)
}
 ::std::string* lobby_t::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto3.lobby_t.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* lobby_t::release_ip() {
  // @@protoc_insertion_point(field_release:proto3.lobby_t.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto3.lobby_t.ip)
}

// optional uint32 port = 3;
void lobby_t::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::port() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.port)
  return port_;
}
 void lobby_t::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.port)
}

// optional int32 occupied = 4;
void lobby_t::clear_occupied() {
  occupied_ = 0;
}
 ::google::protobuf::int32 lobby_t::occupied() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.occupied)
  return occupied_;
}
 void lobby_t::set_occupied(::google::protobuf::int32 value) {
  
  occupied_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.occupied)
}

// optional int32 capacity = 5;
void lobby_t::clear_capacity() {
  capacity_ = 0;
}
 ::google::protobuf::int32 lobby_t::capacity() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.capacity)
  return capacity_;
}
 void lobby_t::set_capacity(::google::protobuf::int32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.capacity)
}

// optional string desc = 6;
void lobby_t::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& lobby_t::desc() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.lobby_t.desc)
}
 void lobby_t::set_desc(const char* value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.lobby_t.desc)
}
 void lobby_t::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.lobby_t.desc)
}
 ::std::string* lobby_t::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:proto3.lobby_t.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* lobby_t::release_desc() {
  // @@protoc_insertion_point(field_release:proto3.lobby_t.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:proto3.lobby_t.desc)
}

// optional string bulletin = 7;
void lobby_t::clear_bulletin() {
  bulletin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& lobby_t::bulletin() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.bulletin)
  return bulletin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_bulletin(const ::std::string& value) {
  
  bulletin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.lobby_t.bulletin)
}
 void lobby_t::set_bulletin(const char* value) {
  
  bulletin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.lobby_t.bulletin)
}
 void lobby_t::set_bulletin(const char* value, size_t size) {
  
  bulletin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.lobby_t.bulletin)
}
 ::std::string* lobby_t::mutable_bulletin() {
  
  // @@protoc_insertion_point(field_mutable:proto3.lobby_t.bulletin)
  return bulletin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* lobby_t::release_bulletin() {
  // @@protoc_insertion_point(field_release:proto3.lobby_t.bulletin)
  
  return bulletin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void lobby_t::set_allocated_bulletin(::std::string* bulletin) {
  if (bulletin != NULL) {
    
  } else {
    
  }
  bulletin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bulletin);
  // @@protoc_insertion_point(field_set_allocated:proto3.lobby_t.bulletin)
}

// optional int32 status = 8;
void lobby_t::clear_status() {
  status_ = 0;
}
 ::google::protobuf::int32 lobby_t::status() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.status)
  return status_;
}
 void lobby_t::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.status)
}

// optional uint32 maintain_start = 9;
void lobby_t::clear_maintain_start() {
  maintain_start_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::maintain_start() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.maintain_start)
  return maintain_start_;
}
 void lobby_t::set_maintain_start(::google::protobuf::uint32 value) {
  
  maintain_start_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.maintain_start)
}

// optional uint32 maintain_end = 10;
void lobby_t::clear_maintain_end() {
  maintain_end_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::maintain_end() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.maintain_end)
  return maintain_end_;
}
 void lobby_t::set_maintain_end(::google::protobuf::uint32 value) {
  
  maintain_end_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.maintain_end)
}

// optional uint32 time_zone = 11;
void lobby_t::clear_time_zone() {
  time_zone_ = 0u;
}
 ::google::protobuf::uint32 lobby_t::time_zone() const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.time_zone)
  return time_zone_;
}
 void lobby_t::set_time_zone(::google::protobuf::uint32 value) {
  
  time_zone_ = value;
  // @@protoc_insertion_point(field_set:proto3.lobby_t.time_zone)
}

// repeated .proto3.game_t games = 12;
int lobby_t::games_size() const {
  return games_.size();
}
void lobby_t::clear_games() {
  games_.Clear();
}
const ::proto3::game_t& lobby_t::games(int index) const {
  // @@protoc_insertion_point(field_get:proto3.lobby_t.games)
  return games_.Get(index);
}
::proto3::game_t* lobby_t::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.lobby_t.games)
  return games_.Mutable(index);
}
::proto3::game_t* lobby_t::add_games() {
  // @@protoc_insertion_point(field_add:proto3.lobby_t.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::game_t >*
lobby_t::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto3.lobby_t.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::game_t >&
lobby_t::games() const {
  // @@protoc_insertion_point(field_list:proto3.lobby_t.games)
  return games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bunch_t::kTypeFieldNumber;
const int bunch_t::kPosFieldNumber;
const int bunch_t::kPawnsFieldNumber;
const int bunch_t::kChildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bunch_t::bunch_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.bunch_t)
}

void bunch_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

bunch_t::bunch_t(const bunch_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.bunch_t)
}

void bunch_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  pos_ = 0;
}

bunch_t::~bunch_t() {
  // @@protoc_insertion_point(destructor:proto3.bunch_t)
  SharedDtor();
}

void bunch_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void bunch_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const bunch_t& bunch_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

bunch_t* bunch_t::default_instance_ = NULL;

bunch_t* bunch_t::New(::google::protobuf::Arena* arena) const {
  bunch_t* n = new bunch_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bunch_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.bunch_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(bunch_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<bunch_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, pos_);

#undef ZR_HELPER_
#undef ZR_

  pawns_.Clear();
  child_.Clear();
}

bool bunch_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.bunch_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_enum type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pawns;
        break;
      }

      // repeated int32 pawns = 3;
      case 3: {
        if (tag == 26) {
         parse_pawns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pawns())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_pawns())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_child;
        break;
      }

      // repeated .proto3.bunch_t child = 4;
      case 4: {
        if (tag == 34) {
         parse_child:
          DO_(input->IncrementRecursionDepth());
         parse_loop_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_child;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.bunch_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.bunch_t)
  return false;
#undef DO_
}

void bunch_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.bunch_t)
  // optional .proto3.pb_enum type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // repeated int32 pawns = 3;
  if (this->pawns_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pawns_cached_byte_size_);
  }
  for (int i = 0; i < this->pawns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pawns(i), output);
  }

  // repeated .proto3.bunch_t child = 4;
  for (unsigned int i = 0, n = this->child_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->child(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.bunch_t)
}

int bunch_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.bunch_t)
  int total_size = 0;

  // optional .proto3.pb_enum type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // repeated int32 pawns = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pawns_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pawns(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pawns_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto3.bunch_t child = 4;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bunch_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const bunch_t*>(&from));
}

void bunch_t::MergeFrom(const bunch_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.bunch_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pawns_.MergeFrom(from.pawns_);
  child_.MergeFrom(from.child_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void bunch_t::CopyFrom(const bunch_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.bunch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bunch_t::IsInitialized() const {

  return true;
}

void bunch_t::Swap(bunch_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bunch_t::InternalSwap(bunch_t* other) {
  std::swap(type_, other->type_);
  std::swap(pos_, other->pos_);
  pawns_.UnsafeArenaSwap(&other->pawns_);
  child_.UnsafeArenaSwap(&other->child_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string bunch_t::GetTypeName() const {
  return "proto3.bunch_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bunch_t

// optional .proto3.pb_enum type = 1;
void bunch_t::clear_type() {
  type_ = 0;
}
 ::proto3::pb_enum bunch_t::type() const {
  // @@protoc_insertion_point(field_get:proto3.bunch_t.type)
  return static_cast< ::proto3::pb_enum >(type_);
}
 void bunch_t::set_type(::proto3::pb_enum value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3.bunch_t.type)
}

// optional int32 pos = 2;
void bunch_t::clear_pos() {
  pos_ = 0;
}
 ::google::protobuf::int32 bunch_t::pos() const {
  // @@protoc_insertion_point(field_get:proto3.bunch_t.pos)
  return pos_;
}
 void bunch_t::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.bunch_t.pos)
}

// repeated int32 pawns = 3;
int bunch_t::pawns_size() const {
  return pawns_.size();
}
void bunch_t::clear_pawns() {
  pawns_.Clear();
}
 ::google::protobuf::int32 bunch_t::pawns(int index) const {
  // @@protoc_insertion_point(field_get:proto3.bunch_t.pawns)
  return pawns_.Get(index);
}
 void bunch_t::set_pawns(int index, ::google::protobuf::int32 value) {
  pawns_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.bunch_t.pawns)
}
 void bunch_t::add_pawns(::google::protobuf::int32 value) {
  pawns_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.bunch_t.pawns)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
bunch_t::pawns() const {
  // @@protoc_insertion_point(field_list:proto3.bunch_t.pawns)
  return pawns_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
bunch_t::mutable_pawns() {
  // @@protoc_insertion_point(field_mutable_list:proto3.bunch_t.pawns)
  return &pawns_;
}

// repeated .proto3.bunch_t child = 4;
int bunch_t::child_size() const {
  return child_.size();
}
void bunch_t::clear_child() {
  child_.Clear();
}
const ::proto3::bunch_t& bunch_t::child(int index) const {
  // @@protoc_insertion_point(field_get:proto3.bunch_t.child)
  return child_.Get(index);
}
::proto3::bunch_t* bunch_t::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.bunch_t.child)
  return child_.Mutable(index);
}
::proto3::bunch_t* bunch_t::add_child() {
  // @@protoc_insertion_point(field_add:proto3.bunch_t.child)
  return child_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >*
bunch_t::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:proto3.bunch_t.child)
  return &child_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >&
bunch_t::child() const {
  // @@protoc_insertion_point(field_list:proto3.bunch_t.child)
  return child_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int play_t::kPlayerFieldNumber;
const int play_t::kHandsFieldNumber;
const int play_t::kDiscardsFieldNumber;
const int play_t::kBunchFieldNumber;
const int play_t::kSelectedCardFieldNumber;
const int play_t::kWinFieldNumber;
const int play_t::kWinbyFieldNumber;
const int play_t::kPointFieldNumber;
const int play_t::kChunkFieldNumber;
const int play_t::kMultipleFieldNumber;
const int play_t::kScoreFieldNumber;
const int play_t::kTotalFieldNumber;
const int play_t::kSeatFieldNumber;
const int play_t::kAchvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

play_t::play_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.play_t)
}

void play_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_ = const_cast< ::proto3::player_t*>(
      ::proto3::player_t::internal_default_instance());
#else
  player_ = const_cast< ::proto3::player_t*>(&::proto3::player_t::default_instance());
#endif
}

play_t::play_t(const play_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.play_t)
}

void play_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  player_ = NULL;
  selected_card_ = 0;
  win_ = 0;
  point_ = 0;
  chunk_ = 0;
  multiple_ = 0;
  score_ = 0;
  total_ = 0;
  seat_ = 0;
}

play_t::~play_t() {
  // @@protoc_insertion_point(destructor:proto3.play_t)
  SharedDtor();
}

void play_t::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_;
  }
}

void play_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const play_t& play_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

play_t* play_t::default_instance_ = NULL;

play_t* play_t::New(::google::protobuf::Arena* arena) const {
  play_t* n = new play_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void play_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.play_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(play_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<play_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(selected_card_, win_);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
  point_ = 0;
  ZR_(chunk_, seat_);

#undef ZR_HELPER_
#undef ZR_

  hands_.Clear();
  discards_.Clear();
  bunch_.Clear();
  winby_.Clear();
  achvs_.Clear();
}

bool play_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.play_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.player_t player = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hands;
        break;
      }

      // repeated int32 hands = 2;
      case 2: {
        if (tag == 18) {
         parse_hands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hands())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_hands())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_discards;
        break;
      }

      // repeated int32 discards = 3;
      case 3: {
        if (tag == 26) {
         parse_discards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_discards())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_discards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bunch;
        break;
      }

      // repeated .proto3.bunch_t bunch = 4;
      case 4: {
        if (tag == 34) {
         parse_bunch:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_bunch;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_selected_card;
        break;
      }

      // optional int32 selected_card = 5;
      case 5: {
        if (tag == 40) {
         parse_selected_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_card_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_win;
        break;
      }

      // optional int32 win = 6;
      case 6: {
        if (tag == 48) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_winby;
        break;
      }

      // repeated int32 winby = 7;
      case 7: {
        if (tag == 58) {
         parse_winby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winby())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_winby())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_point;
        break;
      }

      // optional int32 point = 8;
      case 8: {
        if (tag == 64) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_chunk;
        break;
      }

      // optional int32 chunk = 9;
      case 9: {
        if (tag == 72) {
         parse_chunk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_multiple;
        break;
      }

      // optional int32 multiple = 10;
      case 10: {
        if (tag == 80) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_score;
        break;
      }

      // optional int32 score = 11;
      case 11: {
        if (tag == 88) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_total;
        break;
      }

      // optional int32 total = 12;
      case 12: {
        if (tag == 96) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_seat;
        break;
      }

      // optional int32 seat = 13;
      case 13: {
        if (tag == 104) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_achvs;
        break;
      }

      // repeated .proto3.achv_t achvs = 14;
      case 14: {
        if (tag == 114) {
         parse_achvs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_achvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_achvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_achvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.play_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.play_t)
  return false;
#undef DO_
}

void play_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.play_t)
  // optional .proto3.player_t player = 1;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->player_, output);
  }

  // repeated int32 hands = 2;
  if (this->hands_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hands_cached_byte_size_);
  }
  for (int i = 0; i < this->hands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->hands(i), output);
  }

  // repeated int32 discards = 3;
  if (this->discards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_discards_cached_byte_size_);
  }
  for (int i = 0; i < this->discards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->discards(i), output);
  }

  // repeated .proto3.bunch_t bunch = 4;
  for (unsigned int i = 0, n = this->bunch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->bunch(i), output);
  }

  // optional int32 selected_card = 5;
  if (this->selected_card() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->selected_card(), output);
  }

  // optional int32 win = 6;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win(), output);
  }

  // repeated int32 winby = 7;
  if (this->winby_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_winby_cached_byte_size_);
  }
  for (int i = 0; i < this->winby_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->winby(i), output);
  }

  // optional int32 point = 8;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->point(), output);
  }

  // optional int32 chunk = 9;
  if (this->chunk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->chunk(), output);
  }

  // optional int32 multiple = 10;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->multiple(), output);
  }

  // optional int32 score = 11;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->score(), output);
  }

  // optional int32 total = 12;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total(), output);
  }

  // optional int32 seat = 13;
  if (this->seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->seat(), output);
  }

  // repeated .proto3.achv_t achvs = 14;
  for (unsigned int i = 0, n = this->achvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->achvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.play_t)
}

int play_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.play_t)
  int total_size = 0;

  // optional .proto3.player_t player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional int32 selected_card = 5;
  if (this->selected_card() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->selected_card());
  }

  // optional int32 win = 6;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());
  }

  // optional int32 point = 8;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->point());
  }

  // optional int32 chunk = 9;
  if (this->chunk() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chunk());
  }

  // optional int32 multiple = 10;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  // optional int32 score = 11;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // optional int32 total = 12;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  // optional int32 seat = 13;
  if (this->seat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seat());
  }

  // repeated int32 hands = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hands(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hands_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 discards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->discards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->discards(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _discards_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto3.bunch_t bunch = 4;
  total_size += 1 * this->bunch_size();
  for (int i = 0; i < this->bunch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bunch(i));
  }

  // repeated int32 winby = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->winby_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winby(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _winby_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto3.achv_t achvs = 14;
  total_size += 1 * this->achvs_size();
  for (int i = 0; i < this->achvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void play_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const play_t*>(&from));
}

void play_t::MergeFrom(const play_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.play_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  hands_.MergeFrom(from.hands_);
  discards_.MergeFrom(from.discards_);
  bunch_.MergeFrom(from.bunch_);
  winby_.MergeFrom(from.winby_);
  achvs_.MergeFrom(from.achvs_);
  if (from.has_player()) {
    mutable_player()->::proto3::player_t::MergeFrom(from.player());
  }
  if (from.selected_card() != 0) {
    set_selected_card(from.selected_card());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.chunk() != 0) {
    set_chunk(from.chunk());
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.seat() != 0) {
    set_seat(from.seat());
  }
}

void play_t::CopyFrom(const play_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.play_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool play_t::IsInitialized() const {

  return true;
}

void play_t::Swap(play_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void play_t::InternalSwap(play_t* other) {
  std::swap(player_, other->player_);
  hands_.UnsafeArenaSwap(&other->hands_);
  discards_.UnsafeArenaSwap(&other->discards_);
  bunch_.UnsafeArenaSwap(&other->bunch_);
  std::swap(selected_card_, other->selected_card_);
  std::swap(win_, other->win_);
  winby_.UnsafeArenaSwap(&other->winby_);
  std::swap(point_, other->point_);
  std::swap(chunk_, other->chunk_);
  std::swap(multiple_, other->multiple_);
  std::swap(score_, other->score_);
  std::swap(total_, other->total_);
  std::swap(seat_, other->seat_);
  achvs_.UnsafeArenaSwap(&other->achvs_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string play_t::GetTypeName() const {
  return "proto3.play_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// play_t

// optional .proto3.player_t player = 1;
bool play_t::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void play_t::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3::player_t& play_t::player() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.player)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_ != NULL ? *player_ : *default_instance().player_;
#else
  return player_ != NULL ? *player_ : *default_instance_->player_;
#endif
}
::proto3::player_t* play_t::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3::player_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.play_t.player)
  return player_;
}
::proto3::player_t* play_t::release_player() {
  // @@protoc_insertion_point(field_release:proto3.play_t.player)
  
  ::proto3::player_t* temp = player_;
  player_ = NULL;
  return temp;
}
void play_t::set_allocated_player(::proto3::player_t* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.play_t.player)
}

// repeated int32 hands = 2;
int play_t::hands_size() const {
  return hands_.size();
}
void play_t::clear_hands() {
  hands_.Clear();
}
 ::google::protobuf::int32 play_t::hands(int index) const {
  // @@protoc_insertion_point(field_get:proto3.play_t.hands)
  return hands_.Get(index);
}
 void play_t::set_hands(int index, ::google::protobuf::int32 value) {
  hands_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.play_t.hands)
}
 void play_t::add_hands(::google::protobuf::int32 value) {
  hands_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.play_t.hands)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
play_t::hands() const {
  // @@protoc_insertion_point(field_list:proto3.play_t.hands)
  return hands_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
play_t::mutable_hands() {
  // @@protoc_insertion_point(field_mutable_list:proto3.play_t.hands)
  return &hands_;
}

// repeated int32 discards = 3;
int play_t::discards_size() const {
  return discards_.size();
}
void play_t::clear_discards() {
  discards_.Clear();
}
 ::google::protobuf::int32 play_t::discards(int index) const {
  // @@protoc_insertion_point(field_get:proto3.play_t.discards)
  return discards_.Get(index);
}
 void play_t::set_discards(int index, ::google::protobuf::int32 value) {
  discards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.play_t.discards)
}
 void play_t::add_discards(::google::protobuf::int32 value) {
  discards_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.play_t.discards)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
play_t::discards() const {
  // @@protoc_insertion_point(field_list:proto3.play_t.discards)
  return discards_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
play_t::mutable_discards() {
  // @@protoc_insertion_point(field_mutable_list:proto3.play_t.discards)
  return &discards_;
}

// repeated .proto3.bunch_t bunch = 4;
int play_t::bunch_size() const {
  return bunch_.size();
}
void play_t::clear_bunch() {
  bunch_.Clear();
}
const ::proto3::bunch_t& play_t::bunch(int index) const {
  // @@protoc_insertion_point(field_get:proto3.play_t.bunch)
  return bunch_.Get(index);
}
::proto3::bunch_t* play_t::mutable_bunch(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.play_t.bunch)
  return bunch_.Mutable(index);
}
::proto3::bunch_t* play_t::add_bunch() {
  // @@protoc_insertion_point(field_add:proto3.play_t.bunch)
  return bunch_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >*
play_t::mutable_bunch() {
  // @@protoc_insertion_point(field_mutable_list:proto3.play_t.bunch)
  return &bunch_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >&
play_t::bunch() const {
  // @@protoc_insertion_point(field_list:proto3.play_t.bunch)
  return bunch_;
}

// optional int32 selected_card = 5;
void play_t::clear_selected_card() {
  selected_card_ = 0;
}
 ::google::protobuf::int32 play_t::selected_card() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.selected_card)
  return selected_card_;
}
 void play_t::set_selected_card(::google::protobuf::int32 value) {
  
  selected_card_ = value;
  // @@protoc_insertion_point(field_set:proto3.play_t.selected_card)
}

// optional int32 win = 6;
void play_t::clear_win() {
  win_ = 0;
}
 ::google::protobuf::int32 play_t::win() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.win)
  return win_;
}
 void play_t::set_win(::google::protobuf::int32 value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:proto3.play_t.win)
}

// repeated int32 winby = 7;
int play_t::winby_size() const {
  return winby_.size();
}
void play_t::clear_winby() {
  winby_.Clear();
}
 ::google::protobuf::int32 play_t::winby(int index) const {
  // @@protoc_insertion_point(field_get:proto3.play_t.winby)
  return winby_.Get(index);
}
 void play_t::set_winby(int index, ::google::protobuf::int32 value) {
  winby_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.play_t.winby)
}
 void play_t::add_winby(::google::protobuf::int32 value) {
  winby_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.play_t.winby)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
play_t::winby() const {
  // @@protoc_insertion_point(field_list:proto3.play_t.winby)
  return winby_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
play_t::mutable_winby() {
  // @@protoc_insertion_point(field_mutable_list:proto3.play_t.winby)
  return &winby_;
}

// optional int32 point = 8;
void play_t::clear_point() {
  point_ = 0;
}
 ::google::protobuf::int32 play_t::point() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.point)
  return point_;
}
 void play_t::set_point(::google::protobuf::int32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:proto3.play_t.point)
}

// optional int32 chunk = 9;
void play_t::clear_chunk() {
  chunk_ = 0;
}
 ::google::protobuf::int32 play_t::chunk() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.chunk)
  return chunk_;
}
 void play_t::set_chunk(::google::protobuf::int32 value) {
  
  chunk_ = value;
  // @@protoc_insertion_point(field_set:proto3.play_t.chunk)
}

// optional int32 multiple = 10;
void play_t::clear_multiple() {
  multiple_ = 0;
}
 ::google::protobuf::int32 play_t::multiple() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.multiple)
  return multiple_;
}
 void play_t::set_multiple(::google::protobuf::int32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:proto3.play_t.multiple)
}

// optional int32 score = 11;
void play_t::clear_score() {
  score_ = 0;
}
 ::google::protobuf::int32 play_t::score() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.score)
  return score_;
}
 void play_t::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto3.play_t.score)
}

// optional int32 total = 12;
void play_t::clear_total() {
  total_ = 0;
}
 ::google::protobuf::int32 play_t::total() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.total)
  return total_;
}
 void play_t::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:proto3.play_t.total)
}

// optional int32 seat = 13;
void play_t::clear_seat() {
  seat_ = 0;
}
 ::google::protobuf::int32 play_t::seat() const {
  // @@protoc_insertion_point(field_get:proto3.play_t.seat)
  return seat_;
}
 void play_t::set_seat(::google::protobuf::int32 value) {
  
  seat_ = value;
  // @@protoc_insertion_point(field_set:proto3.play_t.seat)
}

// repeated .proto3.achv_t achvs = 14;
int play_t::achvs_size() const {
  return achvs_.size();
}
void play_t::clear_achvs() {
  achvs_.Clear();
}
const ::proto3::achv_t& play_t::achvs(int index) const {
  // @@protoc_insertion_point(field_get:proto3.play_t.achvs)
  return achvs_.Get(index);
}
::proto3::achv_t* play_t::mutable_achvs(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.play_t.achvs)
  return achvs_.Mutable(index);
}
::proto3::achv_t* play_t::add_achvs() {
  // @@protoc_insertion_point(field_add:proto3.play_t.achvs)
  return achvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::achv_t >*
play_t::mutable_achvs() {
  // @@protoc_insertion_point(field_mutable_list:proto3.play_t.achvs)
  return &achvs_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::achv_t >&
play_t::achvs() const {
  // @@protoc_insertion_point(field_list:proto3.play_t.achvs)
  return achvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int charge_t::kPhoneFieldNumber;
const int charge_t::kUidFieldNumber;
const int charge_t::kTimeFieldNumber;
const int charge_t::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

charge_t::charge_t()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.charge_t)
}

void charge_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

charge_t::charge_t(const charge_t& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.charge_t)
}

void charge_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  amount_ = 0;
}

charge_t::~charge_t() {
  // @@protoc_insertion_point(destructor:proto3.charge_t)
  SharedDtor();
}

void charge_t::SharedDtor() {
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void charge_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const charge_t& charge_t::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

charge_t* charge_t::default_instance_ = NULL;

charge_t* charge_t::New(::google::protobuf::Arena* arena) const {
  charge_t* n = new charge_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void charge_t::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.charge_t)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(charge_t, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<charge_t*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, amount_);
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool charge_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.charge_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.charge_t.phone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.charge_t.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional int32 amount = 4;
      case 4: {
        if (tag == 32) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.charge_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.charge_t)
  return false;
#undef DO_
}

void charge_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.charge_t)
  // optional string phone = 1;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.charge_t.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phone(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.charge_t.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional uint32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional int32 amount = 4;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.charge_t)
}

int charge_t::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.charge_t)
  int total_size = 0;

  // optional string phone = 1;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  // optional int32 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void charge_t::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const charge_t*>(&from));
}

void charge_t::MergeFrom(const charge_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.charge_t)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void charge_t::CopyFrom(const charge_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.charge_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool charge_t::IsInitialized() const {

  return true;
}

void charge_t::Swap(charge_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void charge_t::InternalSwap(charge_t* other) {
  phone_.Swap(&other->phone_);
  uid_.Swap(&other->uid_);
  std::swap(time_, other->time_);
  std::swap(amount_, other->amount_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string charge_t::GetTypeName() const {
  return "proto3.charge_t";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// charge_t

// optional string phone = 1;
void charge_t::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& charge_t::phone() const {
  // @@protoc_insertion_point(field_get:proto3.charge_t.phone)
  return phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void charge_t::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.charge_t.phone)
}
 void charge_t::set_phone(const char* value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.charge_t.phone)
}
 void charge_t::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.charge_t.phone)
}
 ::std::string* charge_t::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:proto3.charge_t.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* charge_t::release_phone() {
  // @@protoc_insertion_point(field_release:proto3.charge_t.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void charge_t::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:proto3.charge_t.phone)
}

// optional string uid = 2;
void charge_t::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& charge_t::uid() const {
  // @@protoc_insertion_point(field_get:proto3.charge_t.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void charge_t::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.charge_t.uid)
}
 void charge_t::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.charge_t.uid)
}
 void charge_t::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.charge_t.uid)
}
 ::std::string* charge_t::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.charge_t.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* charge_t::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.charge_t.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void charge_t::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.charge_t.uid)
}

// optional uint32 time = 3;
void charge_t::clear_time() {
  time_ = 0u;
}
 ::google::protobuf::uint32 charge_t::time() const {
  // @@protoc_insertion_point(field_get:proto3.charge_t.time)
  return time_;
}
 void charge_t::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto3.charge_t.time)
}

// optional int32 amount = 4;
void charge_t::clear_amount() {
  amount_ = 0;
}
 ::google::protobuf::int32 charge_t::amount() const {
  // @@protoc_insertion_point(field_get:proto3.charge_t.amount)
  return amount_;
}
 void charge_t::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:proto3.charge_t.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBase::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBase::MsgBase()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgBase)
}

void MsgBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgBase::MsgBase(const MsgBase& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgBase)
}

void MsgBase::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:proto3.MsgBase)
  SharedDtor();
}

void MsgBase::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgBase& MsgBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgBase* MsgBase::default_instance_ = NULL;

MsgBase* MsgBase::New(::google::protobuf::Arena* arena) const {
  MsgBase* n = new MsgBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgBase)
  mid_ = 0;
}

bool MsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgBase)
  return false;
#undef DO_
}

void MsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgBase)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgBase)
}

int MsgBase::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgBase)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgBase*>(&from));
}

void MsgBase::MergeFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {

  return true;
}

void MsgBase::Swap(MsgBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBase::InternalSwap(MsgBase* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgBase::GetTypeName() const {
  return "proto3.MsgBase";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgBase

// optional .proto3.pb_msg mid = 1;
void MsgBase::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgBase::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgBase.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgBase::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgBase.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCLLogin::kMidFieldNumber;
const int MsgCLLogin::kVersionFieldNumber;
const int MsgCLLogin::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCLLogin::MsgCLLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCLLogin)
}

void MsgCLLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_ = const_cast< ::proto3::user_t*>(
      ::proto3::user_t::internal_default_instance());
#else
  user_ = const_cast< ::proto3::user_t*>(&::proto3::user_t::default_instance());
#endif
}

MsgCLLogin::MsgCLLogin(const MsgCLLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCLLogin)
}

void MsgCLLogin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  version_ = 0u;
  user_ = NULL;
}

MsgCLLogin::~MsgCLLogin() {
  // @@protoc_insertion_point(destructor:proto3.MsgCLLogin)
  SharedDtor();
}

void MsgCLLogin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_;
  }
}

void MsgCLLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCLLogin& MsgCLLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCLLogin* MsgCLLogin::default_instance_ = NULL;

MsgCLLogin* MsgCLLogin::New(::google::protobuf::Arena* arena) const {
  MsgCLLogin* n = new MsgCLLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCLLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCLLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCLLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCLLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, version_);
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCLLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCLLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .proto3.user_t user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCLLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCLLogin)
  return false;
#undef DO_
}

void MsgCLLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCLLogin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.user_t user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->user_, output);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCLLogin)
}

int MsgCLLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCLLogin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional .proto3.user_t user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCLLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCLLogin*>(&from));
}

void MsgCLLogin::MergeFrom(const MsgCLLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCLLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.has_user()) {
    mutable_user()->::proto3::user_t::MergeFrom(from.user());
  }
}

void MsgCLLogin::CopyFrom(const MsgCLLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCLLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCLLogin::IsInitialized() const {

  return true;
}

void MsgCLLogin::Swap(MsgCLLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCLLogin::InternalSwap(MsgCLLogin* other) {
  std::swap(mid_, other->mid_);
  std::swap(version_, other->version_);
  std::swap(user_, other->user_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCLLogin::GetTypeName() const {
  return "proto3.MsgCLLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCLLogin

// optional .proto3.pb_msg mid = 1;
void MsgCLLogin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCLLogin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLLogin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCLLogin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLLogin.mid)
}

// optional uint32 version = 3;
void MsgCLLogin::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgCLLogin::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLLogin.version)
  return version_;
}
 void MsgCLLogin::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLLogin.version)
}

// optional .proto3.user_t user = 2;
bool MsgCLLogin::has_user() const {
  return !_is_default_instance_ && user_ != NULL;
}
void MsgCLLogin::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::proto3::user_t& MsgCLLogin::user() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLLogin.user)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_ != NULL ? *user_ : *default_instance().user_;
#else
  return user_ != NULL ? *user_ : *default_instance_->user_;
#endif
}
::proto3::user_t* MsgCLLogin::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::proto3::user_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCLLogin.user)
  return user_;
}
::proto3::user_t* MsgCLLogin::release_user() {
  // @@protoc_insertion_point(field_release:proto3.MsgCLLogin.user)
  
  ::proto3::user_t* temp = user_;
  user_ = NULL;
  return temp;
}
void MsgCLLogin::set_allocated_user(::proto3::user_t* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCLLogin.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgLCLogin::kMidFieldNumber;
const int MsgLCLogin::kVersionFieldNumber;
const int MsgLCLogin::kSessionFieldNumber;
const int MsgLCLogin::kPlayerFieldNumber;
const int MsgLCLogin::kNodeFieldNumber;
const int MsgLCLogin::kPortFieldNumber;
const int MsgLCLogin::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgLCLogin::MsgLCLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgLCLogin)
}

void MsgLCLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_ = const_cast< ::proto3::player_t*>(
      ::proto3::player_t::internal_default_instance());
#else
  player_ = const_cast< ::proto3::player_t*>(&::proto3::player_t::default_instance());
#endif
}

MsgLCLogin::MsgLCLogin(const MsgLCLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgLCLogin)
}

void MsgLCLogin::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  version_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
  player_ = NULL;
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  result_ = 0;
}

MsgLCLogin::~MsgLCLogin() {
  // @@protoc_insertion_point(destructor:proto3.MsgLCLogin)
  SharedDtor();
}

void MsgLCLogin::SharedDtor() {
  node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_;
  }
}

void MsgLCLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgLCLogin& MsgLCLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgLCLogin* MsgLCLogin::default_instance_ = NULL;

MsgLCLogin* MsgLCLogin::New(::google::protobuf::Arena* arena) const {
  MsgLCLogin* n = new MsgLCLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgLCLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgLCLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgLCLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgLCLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, session_);
  ZR_(port_, result_);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgLCLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgLCLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // optional uint64 session = 3;
      case 3: {
        if (tag == 24) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player;
        break;
      }

      // optional .proto3.player_t player = 4;
      case 4: {
        if (tag == 34) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_node;
        break;
      }

      // optional string node = 5;
      case 5: {
        if (tag == 42) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgLCLogin.node"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional uint32 port = 6;
      case 6: {
        if (tag == 48) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 7;
      case 7: {
        if (tag == 56) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgLCLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgLCLogin)
  return false;
#undef DO_
}

void MsgLCLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgLCLogin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session(), output);
  }

  // optional .proto3.player_t player = 4;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->player_, output);
  }

  // optional string node = 5;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgLCLogin.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->node(), output);
  }

  // optional uint32 port = 6;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port(), output);
  }

  // optional .proto3.pb_enum result = 7;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgLCLogin)
}

int MsgLCLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgLCLogin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  // optional .proto3.player_t player = 4;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional string node = 5;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // optional uint32 port = 6;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional .proto3.pb_enum result = 7;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLCLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgLCLogin*>(&from));
}

void MsgLCLogin::MergeFrom(const MsgLCLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgLCLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
  if (from.has_player()) {
    mutable_player()->::proto3::player_t::MergeFrom(from.player());
  }
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgLCLogin::CopyFrom(const MsgLCLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgLCLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLCLogin::IsInitialized() const {

  return true;
}

void MsgLCLogin::Swap(MsgLCLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgLCLogin::InternalSwap(MsgLCLogin* other) {
  std::swap(mid_, other->mid_);
  std::swap(version_, other->version_);
  std::swap(session_, other->session_);
  std::swap(player_, other->player_);
  node_.Swap(&other->node_);
  std::swap(port_, other->port_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgLCLogin::GetTypeName() const {
  return "proto3.MsgLCLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgLCLogin

// optional .proto3.pb_msg mid = 1;
void MsgLCLogin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgLCLogin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLogin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgLCLogin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCLogin.mid)
}

// optional uint32 version = 2;
void MsgLCLogin::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgLCLogin::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLogin.version)
  return version_;
}
 void MsgLCLogin::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCLogin.version)
}

// optional uint64 session = 3;
void MsgLCLogin::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgLCLogin::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLogin.session)
  return session_;
}
 void MsgLCLogin::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCLogin.session)
}

// optional .proto3.player_t player = 4;
bool MsgLCLogin::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void MsgLCLogin::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3::player_t& MsgLCLogin::player() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLogin.player)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_ != NULL ? *player_ : *default_instance().player_;
#else
  return player_ != NULL ? *player_ : *default_instance_->player_;
#endif
}
::proto3::player_t* MsgLCLogin::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3::player_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgLCLogin.player)
  return player_;
}
::proto3::player_t* MsgLCLogin::release_player() {
  // @@protoc_insertion_point(field_release:proto3.MsgLCLogin.player)
  
  ::proto3::player_t* temp = player_;
  player_ = NULL;
  return temp;
}
void MsgLCLogin::set_allocated_player(::proto3::player_t* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgLCLogin.player)
}

// optional string node = 5;
void MsgLCLogin::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgLCLogin::node() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLogin.node)
  return node_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgLCLogin::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgLCLogin.node)
}
 void MsgLCLogin::set_node(const char* value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgLCLogin.node)
}
 void MsgLCLogin::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgLCLogin.node)
}
 ::std::string* MsgLCLogin::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgLCLogin.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgLCLogin::release_node() {
  // @@protoc_insertion_point(field_release:proto3.MsgLCLogin.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgLCLogin::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgLCLogin.node)
}

// optional uint32 port = 6;
void MsgLCLogin::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 MsgLCLogin::port() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLogin.port)
  return port_;
}
 void MsgLCLogin::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCLogin.port)
}

// optional .proto3.pb_enum result = 7;
void MsgLCLogin::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgLCLogin::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLogin.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgLCLogin::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCLogin.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCLLobby::kMidFieldNumber;
const int MsgCLLobby::kUidFieldNumber;
const int MsgCLLobby::kVersionFieldNumber;
const int MsgCLLobby::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCLLobby::MsgCLLobby()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCLLobby)
}

void MsgCLLobby::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCLLobby::MsgCLLobby(const MsgCLLobby& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCLLobby)
}

void MsgCLLobby::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
}

MsgCLLobby::~MsgCLLobby() {
  // @@protoc_insertion_point(destructor:proto3.MsgCLLobby)
  SharedDtor();
}

void MsgCLLobby::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCLLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCLLobby& MsgCLLobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCLLobby* MsgCLLobby::default_instance_ = NULL;

MsgCLLobby* MsgCLLobby::New(::google::protobuf::Arena* arena) const {
  MsgCLLobby* n = new MsgCLLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCLLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCLLobby)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCLLobby, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCLLobby*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, session_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCLLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCLLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCLLobby.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }

      // optional uint64 session = 4;
      case 4: {
        if (tag == 32) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCLLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCLLobby)
  return false;
#undef DO_
}

void MsgCLLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCLLobby)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCLLobby.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCLLobby)
}

int MsgCLLobby::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCLLobby)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCLLobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCLLobby*>(&from));
}

void MsgCLLobby::MergeFrom(const MsgCLLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCLLobby)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
}

void MsgCLLobby::CopyFrom(const MsgCLLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCLLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCLLobby::IsInitialized() const {

  return true;
}

void MsgCLLobby::Swap(MsgCLLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCLLobby::InternalSwap(MsgCLLobby* other) {
  std::swap(mid_, other->mid_);
  uid_.Swap(&other->uid_);
  std::swap(version_, other->version_);
  std::swap(session_, other->session_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCLLobby::GetTypeName() const {
  return "proto3.MsgCLLobby";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCLLobby

// optional .proto3.pb_msg mid = 1;
void MsgCLLobby::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCLLobby::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLLobby.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCLLobby::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLLobby.mid)
}

// optional string uid = 2;
void MsgCLLobby::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCLLobby::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLLobby.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCLLobby::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCLLobby.uid)
}
 void MsgCLLobby::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCLLobby.uid)
}
 void MsgCLLobby::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCLLobby.uid)
}
 ::std::string* MsgCLLobby::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCLLobby.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCLLobby::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCLLobby.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCLLobby::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCLLobby.uid)
}

// optional uint32 version = 3;
void MsgCLLobby::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgCLLobby::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLLobby.version)
  return version_;
}
 void MsgCLLobby::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLLobby.version)
}

// optional uint64 session = 4;
void MsgCLLobby::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCLLobby::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLLobby.session)
  return session_;
}
 void MsgCLLobby::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLLobby.session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgLCLobby::kMidFieldNumber;
const int MsgLCLobby::kLobbyFieldNumber;
const int MsgLCLobby::kKeyFieldNumber;
const int MsgLCLobby::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgLCLobby::MsgLCLobby()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgLCLobby)
}

void MsgLCLobby::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  lobby_ = const_cast< ::proto3::lobby_t*>(
      ::proto3::lobby_t::internal_default_instance());
#else
  lobby_ = const_cast< ::proto3::lobby_t*>(&::proto3::lobby_t::default_instance());
#endif
}

MsgLCLobby::MsgLCLobby(const MsgLCLobby& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgLCLobby)
}

void MsgLCLobby::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  lobby_ = NULL;
  key_ = 0;
  result_ = 0;
}

MsgLCLobby::~MsgLCLobby() {
  // @@protoc_insertion_point(destructor:proto3.MsgLCLobby)
  SharedDtor();
}

void MsgLCLobby::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete lobby_;
  }
}

void MsgLCLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgLCLobby& MsgLCLobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgLCLobby* MsgLCLobby::default_instance_ = NULL;

MsgLCLobby* MsgLCLobby::New(::google::protobuf::Arena* arena) const {
  MsgLCLobby* n = new MsgLCLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgLCLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgLCLobby)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgLCLobby, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgLCLobby*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && lobby_ != NULL) delete lobby_;
  lobby_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgLCLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgLCLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lobby;
        break;
      }

      // optional .proto3.lobby_t lobby = 2;
      case 2: {
        if (tag == 18) {
         parse_lobby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lobby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_key;
        break;
      }

      // optional int32 key = 3;
      case 3: {
        if (tag == 24) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgLCLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgLCLobby)
  return false;
#undef DO_
}

void MsgLCLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgLCLobby)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.lobby_t lobby = 2;
  if (this->has_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->lobby_, output);
  }

  // optional int32 key = 3;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->key(), output);
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgLCLobby)
}

int MsgLCLobby::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgLCLobby)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.lobby_t lobby = 2;
  if (this->has_lobby()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lobby_);
  }

  // optional int32 key = 3;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLCLobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgLCLobby*>(&from));
}

void MsgLCLobby::MergeFrom(const MsgLCLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgLCLobby)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_lobby()) {
    mutable_lobby()->::proto3::lobby_t::MergeFrom(from.lobby());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgLCLobby::CopyFrom(const MsgLCLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgLCLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLCLobby::IsInitialized() const {

  return true;
}

void MsgLCLobby::Swap(MsgLCLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgLCLobby::InternalSwap(MsgLCLobby* other) {
  std::swap(mid_, other->mid_);
  std::swap(lobby_, other->lobby_);
  std::swap(key_, other->key_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgLCLobby::GetTypeName() const {
  return "proto3.MsgLCLobby";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgLCLobby

// optional .proto3.pb_msg mid = 1;
void MsgLCLobby::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgLCLobby::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLobby.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgLCLobby::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCLobby.mid)
}

// optional .proto3.lobby_t lobby = 2;
bool MsgLCLobby::has_lobby() const {
  return !_is_default_instance_ && lobby_ != NULL;
}
void MsgLCLobby::clear_lobby() {
  if (GetArenaNoVirtual() == NULL && lobby_ != NULL) delete lobby_;
  lobby_ = NULL;
}
const ::proto3::lobby_t& MsgLCLobby::lobby() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLobby.lobby)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return lobby_ != NULL ? *lobby_ : *default_instance().lobby_;
#else
  return lobby_ != NULL ? *lobby_ : *default_instance_->lobby_;
#endif
}
::proto3::lobby_t* MsgLCLobby::mutable_lobby() {
  
  if (lobby_ == NULL) {
    lobby_ = new ::proto3::lobby_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgLCLobby.lobby)
  return lobby_;
}
::proto3::lobby_t* MsgLCLobby::release_lobby() {
  // @@protoc_insertion_point(field_release:proto3.MsgLCLobby.lobby)
  
  ::proto3::lobby_t* temp = lobby_;
  lobby_ = NULL;
  return temp;
}
void MsgLCLobby::set_allocated_lobby(::proto3::lobby_t* lobby) {
  delete lobby_;
  lobby_ = lobby;
  if (lobby) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgLCLobby.lobby)
}

// optional int32 key = 3;
void MsgLCLobby::clear_key() {
  key_ = 0;
}
 ::google::protobuf::int32 MsgLCLobby::key() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLobby.key)
  return key_;
}
 void MsgLCLobby::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCLobby.key)
}

// optional .proto3.pb_enum result = 4;
void MsgLCLobby::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgLCLobby::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCLobby.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgLCLobby::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCLobby.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCLReplays::kMidFieldNumber;
const int MsgCLReplays::kUidFieldNumber;
const int MsgCLReplays::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCLReplays::MsgCLReplays()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCLReplays)
}

void MsgCLReplays::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCLReplays::MsgCLReplays(const MsgCLReplays& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCLReplays)
}

void MsgCLReplays::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_ = GOOGLE_ULONGLONG(0);
}

MsgCLReplays::~MsgCLReplays() {
  // @@protoc_insertion_point(destructor:proto3.MsgCLReplays)
  SharedDtor();
}

void MsgCLReplays::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCLReplays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCLReplays& MsgCLReplays::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCLReplays* MsgCLReplays::default_instance_ = NULL;

MsgCLReplays* MsgCLReplays::New(::google::protobuf::Arena* arena) const {
  MsgCLReplays* n = new MsgCLReplays;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCLReplays::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCLReplays)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCLReplays, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCLReplays*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(session_, mid_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCLReplays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCLReplays)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCLReplays.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // optional uint64 session = 3;
      case 3: {
        if (tag == 24) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCLReplays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCLReplays)
  return false;
#undef DO_
}

void MsgCLReplays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCLReplays)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCLReplays.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCLReplays)
}

int MsgCLReplays::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCLReplays)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCLReplays::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCLReplays*>(&from));
}

void MsgCLReplays::MergeFrom(const MsgCLReplays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCLReplays)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
}

void MsgCLReplays::CopyFrom(const MsgCLReplays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCLReplays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCLReplays::IsInitialized() const {

  return true;
}

void MsgCLReplays::Swap(MsgCLReplays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCLReplays::InternalSwap(MsgCLReplays* other) {
  std::swap(mid_, other->mid_);
  uid_.Swap(&other->uid_);
  std::swap(session_, other->session_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCLReplays::GetTypeName() const {
  return "proto3.MsgCLReplays";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCLReplays

// optional .proto3.pb_msg mid = 1;
void MsgCLReplays::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCLReplays::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLReplays.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCLReplays::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLReplays.mid)
}

// optional string uid = 2;
void MsgCLReplays::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCLReplays::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLReplays.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCLReplays::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCLReplays.uid)
}
 void MsgCLReplays::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCLReplays.uid)
}
 void MsgCLReplays::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCLReplays.uid)
}
 ::std::string* MsgCLReplays::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCLReplays.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCLReplays::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCLReplays.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCLReplays::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCLReplays.uid)
}

// optional uint64 session = 3;
void MsgCLReplays::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCLReplays::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLReplays.session)
  return session_;
}
 void MsgCLReplays::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLReplays.session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgLCReplays::kUsersFieldNumber;
const int MsgLCReplays::kGameIdsFieldNumber;
const int MsgLCReplays::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgLCReplays::MsgLCReplays()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgLCReplays)
}

void MsgLCReplays::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgLCReplays::MsgLCReplays(const MsgLCReplays& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgLCReplays)
}

void MsgLCReplays::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
}

MsgLCReplays::~MsgLCReplays() {
  // @@protoc_insertion_point(destructor:proto3.MsgLCReplays)
  SharedDtor();
}

void MsgLCReplays::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgLCReplays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgLCReplays& MsgLCReplays::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgLCReplays* MsgLCReplays::default_instance_ = NULL;

MsgLCReplays* MsgLCReplays::New(::google::protobuf::Arena* arena) const {
  MsgLCReplays* n = new MsgLCReplays;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgLCReplays::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgLCReplays)
  result_ = 0;
  users_.Clear();
  gameids_.Clear();
}

bool MsgLCReplays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgLCReplays)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto3.user_t users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_gameIds;
        break;
      }

      // repeated int32 gameIds = 2;
      case 2: {
        if (tag == 18) {
         parse_gameIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gameids())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_gameids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgLCReplays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgLCReplays)
  return false;
#undef DO_
}

void MsgLCReplays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgLCReplays)
  // repeated .proto3.user_t users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->users(i), output);
  }

  // repeated int32 gameIds = 2;
  if (this->gameids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gameids_cached_byte_size_);
  }
  for (int i = 0; i < this->gameids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->gameids(i), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgLCReplays)
}

int MsgLCReplays::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgLCReplays)
  int total_size = 0;

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.user_t users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  // repeated int32 gameIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gameids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gameids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gameids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLCReplays::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgLCReplays*>(&from));
}

void MsgLCReplays::MergeFrom(const MsgLCReplays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgLCReplays)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  users_.MergeFrom(from.users_);
  gameids_.MergeFrom(from.gameids_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgLCReplays::CopyFrom(const MsgLCReplays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgLCReplays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLCReplays::IsInitialized() const {

  return true;
}

void MsgLCReplays::Swap(MsgLCReplays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgLCReplays::InternalSwap(MsgLCReplays* other) {
  users_.UnsafeArenaSwap(&other->users_);
  gameids_.UnsafeArenaSwap(&other->gameids_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgLCReplays::GetTypeName() const {
  return "proto3.MsgLCReplays";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgLCReplays

// repeated .proto3.user_t users = 1;
int MsgLCReplays::users_size() const {
  return users_.size();
}
void MsgLCReplays::clear_users() {
  users_.Clear();
}
const ::proto3::user_t& MsgLCReplays::users(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplays.users)
  return users_.Get(index);
}
::proto3::user_t* MsgLCReplays::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgLCReplays.users)
  return users_.Mutable(index);
}
::proto3::user_t* MsgLCReplays::add_users() {
  // @@protoc_insertion_point(field_add:proto3.MsgLCReplays.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::user_t >*
MsgLCReplays::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgLCReplays.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::user_t >&
MsgLCReplays::users() const {
  // @@protoc_insertion_point(field_list:proto3.MsgLCReplays.users)
  return users_;
}

// repeated int32 gameIds = 2;
int MsgLCReplays::gameids_size() const {
  return gameids_.size();
}
void MsgLCReplays::clear_gameids() {
  gameids_.Clear();
}
 ::google::protobuf::int32 MsgLCReplays::gameids(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplays.gameIds)
  return gameids_.Get(index);
}
 void MsgLCReplays::set_gameids(int index, ::google::protobuf::int32 value) {
  gameids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplays.gameIds)
}
 void MsgLCReplays::add_gameids(::google::protobuf::int32 value) {
  gameids_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgLCReplays.gameIds)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgLCReplays::gameids() const {
  // @@protoc_insertion_point(field_list:proto3.MsgLCReplays.gameIds)
  return gameids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgLCReplays::mutable_gameids() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgLCReplays.gameIds)
  return &gameids_;
}

// optional .proto3.pb_enum result = 3;
void MsgLCReplays::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgLCReplays::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplays.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgLCReplays::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplays.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCLReplay::kMidFieldNumber;
const int MsgCLReplay::kGameIdFieldNumber;
const int MsgCLReplay::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCLReplay::MsgCLReplay()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCLReplay)
}

void MsgCLReplay::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCLReplay::MsgCLReplay(const MsgCLReplay& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCLReplay)
}

void MsgCLReplay::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  gameid_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
}

MsgCLReplay::~MsgCLReplay() {
  // @@protoc_insertion_point(destructor:proto3.MsgCLReplay)
  SharedDtor();
}

void MsgCLReplay::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCLReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCLReplay& MsgCLReplay::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCLReplay* MsgCLReplay::default_instance_ = NULL;

MsgCLReplay* MsgCLReplay::New(::google::protobuf::Arena* arena) const {
  MsgCLReplay* n = new MsgCLReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCLReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCLReplay)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCLReplay, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCLReplay*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, session_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCLReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCLReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // optional uint32 gameId = 2;
      case 2: {
        if (tag == 16) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // optional uint64 session = 3;
      case 3: {
        if (tag == 24) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCLReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCLReplay)
  return false;
#undef DO_
}

void MsgCLReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCLReplay)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 gameId = 2;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCLReplay)
}

int MsgCLReplay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCLReplay)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 gameId = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCLReplay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCLReplay*>(&from));
}

void MsgCLReplay::MergeFrom(const MsgCLReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCLReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
}

void MsgCLReplay::CopyFrom(const MsgCLReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCLReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCLReplay::IsInitialized() const {

  return true;
}

void MsgCLReplay::Swap(MsgCLReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCLReplay::InternalSwap(MsgCLReplay* other) {
  std::swap(mid_, other->mid_);
  std::swap(gameid_, other->gameid_);
  std::swap(session_, other->session_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCLReplay::GetTypeName() const {
  return "proto3.MsgCLReplay";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCLReplay

// optional .proto3.pb_msg mid = 1;
void MsgCLReplay::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCLReplay::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLReplay.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCLReplay::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLReplay.mid)
}

// optional uint32 gameId = 2;
void MsgCLReplay::clear_gameid() {
  gameid_ = 0u;
}
 ::google::protobuf::uint32 MsgCLReplay::gameid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLReplay.gameId)
  return gameid_;
}
 void MsgCLReplay::set_gameid(::google::protobuf::uint32 value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLReplay.gameId)
}

// optional uint64 session = 3;
void MsgCLReplay::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCLReplay::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCLReplay.session)
  return session_;
}
 void MsgCLReplay::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCLReplay.session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgLCReplay::kMidFieldNumber;
const int MsgLCReplay::kGameIdFieldNumber;
const int MsgLCReplay::kGameCategoryFieldNumber;
const int MsgLCReplay::kBankerFieldNumber;
const int MsgLCReplay::kRoundFieldNumber;
const int MsgLCReplay::kRoundsFieldNumber;
const int MsgLCReplay::kPilesFieldNumber;
const int MsgLCReplay::kBottomFieldNumber;
const int MsgLCReplay::kHandsFieldNumber;
const int MsgLCReplay::kEngageFieldNumber;
const int MsgLCReplay::kOpsFieldNumber;
const int MsgLCReplay::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgLCReplay::MsgLCReplay()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgLCReplay)
}

void MsgLCReplay::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgLCReplay::MsgLCReplay(const MsgLCReplay& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgLCReplay)
}

void MsgLCReplay::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  gameid_ = 0;
  gamecategory_ = 0;
  banker_ = 0;
  round_ = 0;
  rounds_ = 0;
  result_ = 0;
}

MsgLCReplay::~MsgLCReplay() {
  // @@protoc_insertion_point(destructor:proto3.MsgLCReplay)
  SharedDtor();
}

void MsgLCReplay::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgLCReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgLCReplay& MsgLCReplay::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgLCReplay* MsgLCReplay::default_instance_ = NULL;

MsgLCReplay* MsgLCReplay::New(::google::protobuf::Arena* arena) const {
  MsgLCReplay* n = new MsgLCReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgLCReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgLCReplay)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgLCReplay, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgLCReplay*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, rounds_);
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

  piles_.Clear();
  bottom_.Clear();
  hands_.Clear();
  engage_.Clear();
  ops_.Clear();
}

bool MsgLCReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgLCReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 2;
      case 2: {
        if (tag == 16) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameCategory;
        break;
      }

      // optional .proto3.pb_msg gameCategory = 3;
      case 3: {
        if (tag == 24) {
         parse_gameCategory:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gamecategory(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_banker;
        break;
      }

      // optional int32 banker = 4;
      case 4: {
        if (tag == 32) {
         parse_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_round;
        break;
      }

      // optional int32 round = 5;
      case 5: {
        if (tag == 40) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rounds;
        break;
      }

      // optional int32 rounds = 6;
      case 6: {
        if (tag == 48) {
         parse_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rounds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_piles;
        break;
      }

      // repeated int32 piles = 7;
      case 7: {
        if (tag == 58) {
         parse_piles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piles())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_piles())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bottom;
        break;
      }

      // repeated int32 bottom = 8;
      case 8: {
        if (tag == 66) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bottom())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_bottom())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_hands;
        break;
      }

      // repeated .proto3.bunch_t hands = 9;
      case 9: {
        if (tag == 74) {
         parse_hands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_hands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_hands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_engage;
        break;
      }

      // repeated int32 engage = 10;
      case 10: {
        if (tag == 82) {
         parse_engage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_engage())));
        } else if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82, input, this->mutable_engage())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ops;
        break;
      }

      // repeated .proto3.bunch_t ops = 11;
      case 11: {
        if (tag == 90) {
         parse_ops:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_ops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 12;
      case 12: {
        if (tag == 96) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgLCReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgLCReplay)
  return false;
#undef DO_
}

void MsgLCReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgLCReplay)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 gameId = 2;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // optional .proto3.pb_msg gameCategory = 3;
  if (this->gamecategory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamecategory(), output);
  }

  // optional int32 banker = 4;
  if (this->banker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->banker(), output);
  }

  // optional int32 round = 5;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->round(), output);
  }

  // optional int32 rounds = 6;
  if (this->rounds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rounds(), output);
  }

  // repeated int32 piles = 7;
  if (this->piles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_piles_cached_byte_size_);
  }
  for (int i = 0; i < this->piles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->piles(i), output);
  }

  // repeated int32 bottom = 8;
  if (this->bottom_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bottom_cached_byte_size_);
  }
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bottom(i), output);
  }

  // repeated .proto3.bunch_t hands = 9;
  for (unsigned int i = 0, n = this->hands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->hands(i), output);
  }

  // repeated int32 engage = 10;
  if (this->engage_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_engage_cached_byte_size_);
  }
  for (int i = 0; i < this->engage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->engage(i), output);
  }

  // repeated .proto3.bunch_t ops = 11;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->ops(i), output);
  }

  // optional .proto3.pb_enum result = 12;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgLCReplay)
}

int MsgLCReplay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgLCReplay)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 gameId = 2;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gameid());
  }

  // optional .proto3.pb_msg gameCategory = 3;
  if (this->gamecategory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamecategory());
  }

  // optional int32 banker = 4;
  if (this->banker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->banker());
  }

  // optional int32 round = 5;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  // optional int32 rounds = 6;
  if (this->rounds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rounds());
  }

  // optional .proto3.pb_enum result = 12;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated int32 piles = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->piles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piles(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _piles_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 bottom = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->bottom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bottom(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bottom_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto3.bunch_t hands = 9;
  total_size += 1 * this->hands_size();
  for (int i = 0; i < this->hands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hands(i));
  }

  // repeated int32 engage = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->engage_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->engage(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _engage_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto3.bunch_t ops = 11;
  total_size += 1 * this->ops_size();
  for (int i = 0; i < this->ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ops(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLCReplay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgLCReplay*>(&from));
}

void MsgLCReplay::MergeFrom(const MsgLCReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgLCReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  piles_.MergeFrom(from.piles_);
  bottom_.MergeFrom(from.bottom_);
  hands_.MergeFrom(from.hands_);
  engage_.MergeFrom(from.engage_);
  ops_.MergeFrom(from.ops_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.gamecategory() != 0) {
    set_gamecategory(from.gamecategory());
  }
  if (from.banker() != 0) {
    set_banker(from.banker());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.rounds() != 0) {
    set_rounds(from.rounds());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgLCReplay::CopyFrom(const MsgLCReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgLCReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLCReplay::IsInitialized() const {

  return true;
}

void MsgLCReplay::Swap(MsgLCReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgLCReplay::InternalSwap(MsgLCReplay* other) {
  std::swap(mid_, other->mid_);
  std::swap(gameid_, other->gameid_);
  std::swap(gamecategory_, other->gamecategory_);
  std::swap(banker_, other->banker_);
  std::swap(round_, other->round_);
  std::swap(rounds_, other->rounds_);
  piles_.UnsafeArenaSwap(&other->piles_);
  bottom_.UnsafeArenaSwap(&other->bottom_);
  hands_.UnsafeArenaSwap(&other->hands_);
  engage_.UnsafeArenaSwap(&other->engage_);
  ops_.UnsafeArenaSwap(&other->ops_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgLCReplay::GetTypeName() const {
  return "proto3.MsgLCReplay";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgLCReplay

// optional .proto3.pb_msg mid = 1;
void MsgLCReplay::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgLCReplay::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgLCReplay::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.mid)
}

// optional int32 gameId = 2;
void MsgLCReplay::clear_gameid() {
  gameid_ = 0;
}
 ::google::protobuf::int32 MsgLCReplay::gameid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.gameId)
  return gameid_;
}
 void MsgLCReplay::set_gameid(::google::protobuf::int32 value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.gameId)
}

// optional .proto3.pb_msg gameCategory = 3;
void MsgLCReplay::clear_gamecategory() {
  gamecategory_ = 0;
}
 ::proto3::pb_msg MsgLCReplay::gamecategory() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.gameCategory)
  return static_cast< ::proto3::pb_msg >(gamecategory_);
}
 void MsgLCReplay::set_gamecategory(::proto3::pb_msg value) {
  
  gamecategory_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.gameCategory)
}

// optional int32 banker = 4;
void MsgLCReplay::clear_banker() {
  banker_ = 0;
}
 ::google::protobuf::int32 MsgLCReplay::banker() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.banker)
  return banker_;
}
 void MsgLCReplay::set_banker(::google::protobuf::int32 value) {
  
  banker_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.banker)
}

// optional int32 round = 5;
void MsgLCReplay::clear_round() {
  round_ = 0;
}
 ::google::protobuf::int32 MsgLCReplay::round() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.round)
  return round_;
}
 void MsgLCReplay::set_round(::google::protobuf::int32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.round)
}

// optional int32 rounds = 6;
void MsgLCReplay::clear_rounds() {
  rounds_ = 0;
}
 ::google::protobuf::int32 MsgLCReplay::rounds() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.rounds)
  return rounds_;
}
 void MsgLCReplay::set_rounds(::google::protobuf::int32 value) {
  
  rounds_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.rounds)
}

// repeated int32 piles = 7;
int MsgLCReplay::piles_size() const {
  return piles_.size();
}
void MsgLCReplay::clear_piles() {
  piles_.Clear();
}
 ::google::protobuf::int32 MsgLCReplay::piles(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.piles)
  return piles_.Get(index);
}
 void MsgLCReplay::set_piles(int index, ::google::protobuf::int32 value) {
  piles_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.piles)
}
 void MsgLCReplay::add_piles(::google::protobuf::int32 value) {
  piles_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgLCReplay.piles)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgLCReplay::piles() const {
  // @@protoc_insertion_point(field_list:proto3.MsgLCReplay.piles)
  return piles_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgLCReplay::mutable_piles() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgLCReplay.piles)
  return &piles_;
}

// repeated int32 bottom = 8;
int MsgLCReplay::bottom_size() const {
  return bottom_.size();
}
void MsgLCReplay::clear_bottom() {
  bottom_.Clear();
}
 ::google::protobuf::int32 MsgLCReplay::bottom(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.bottom)
  return bottom_.Get(index);
}
 void MsgLCReplay::set_bottom(int index, ::google::protobuf::int32 value) {
  bottom_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.bottom)
}
 void MsgLCReplay::add_bottom(::google::protobuf::int32 value) {
  bottom_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgLCReplay.bottom)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgLCReplay::bottom() const {
  // @@protoc_insertion_point(field_list:proto3.MsgLCReplay.bottom)
  return bottom_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgLCReplay::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgLCReplay.bottom)
  return &bottom_;
}

// repeated .proto3.bunch_t hands = 9;
int MsgLCReplay::hands_size() const {
  return hands_.size();
}
void MsgLCReplay::clear_hands() {
  hands_.Clear();
}
const ::proto3::bunch_t& MsgLCReplay::hands(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.hands)
  return hands_.Get(index);
}
::proto3::bunch_t* MsgLCReplay::mutable_hands(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgLCReplay.hands)
  return hands_.Mutable(index);
}
::proto3::bunch_t* MsgLCReplay::add_hands() {
  // @@protoc_insertion_point(field_add:proto3.MsgLCReplay.hands)
  return hands_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >*
MsgLCReplay::mutable_hands() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgLCReplay.hands)
  return &hands_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >&
MsgLCReplay::hands() const {
  // @@protoc_insertion_point(field_list:proto3.MsgLCReplay.hands)
  return hands_;
}

// repeated int32 engage = 10;
int MsgLCReplay::engage_size() const {
  return engage_.size();
}
void MsgLCReplay::clear_engage() {
  engage_.Clear();
}
 ::google::protobuf::int32 MsgLCReplay::engage(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.engage)
  return engage_.Get(index);
}
 void MsgLCReplay::set_engage(int index, ::google::protobuf::int32 value) {
  engage_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.engage)
}
 void MsgLCReplay::add_engage(::google::protobuf::int32 value) {
  engage_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgLCReplay.engage)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgLCReplay::engage() const {
  // @@protoc_insertion_point(field_list:proto3.MsgLCReplay.engage)
  return engage_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgLCReplay::mutable_engage() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgLCReplay.engage)
  return &engage_;
}

// repeated .proto3.bunch_t ops = 11;
int MsgLCReplay::ops_size() const {
  return ops_.size();
}
void MsgLCReplay::clear_ops() {
  ops_.Clear();
}
const ::proto3::bunch_t& MsgLCReplay::ops(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.ops)
  return ops_.Get(index);
}
::proto3::bunch_t* MsgLCReplay::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgLCReplay.ops)
  return ops_.Mutable(index);
}
::proto3::bunch_t* MsgLCReplay::add_ops() {
  // @@protoc_insertion_point(field_add:proto3.MsgLCReplay.ops)
  return ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >*
MsgLCReplay::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgLCReplay.ops)
  return &ops_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >&
MsgLCReplay::ops() const {
  // @@protoc_insertion_point(field_list:proto3.MsgLCReplay.ops)
  return ops_;
}

// optional .proto3.pb_enum result = 12;
void MsgLCReplay::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgLCReplay::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgLCReplay.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgLCReplay::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgLCReplay.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCHLogin::kMidFieldNumber;
const int MsgCHLogin::kVersionFieldNumber;
const int MsgCHLogin::kPhoneFieldNumber;
const int MsgCHLogin::kPswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCHLogin::MsgCHLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCHLogin)
}

void MsgCHLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCHLogin::MsgCHLogin(const MsgCHLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCHLogin)
}

void MsgCHLogin::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  version_ = 0u;
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgCHLogin::~MsgCHLogin() {
  // @@protoc_insertion_point(destructor:proto3.MsgCHLogin)
  SharedDtor();
}

void MsgCHLogin::SharedDtor() {
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCHLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCHLogin& MsgCHLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCHLogin* MsgCHLogin::default_instance_ = NULL;

MsgCHLogin* MsgCHLogin::New(::google::protobuf::Arena* arena) const {
  MsgCHLogin* n = new MsgCHLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCHLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCHLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCHLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCHLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, version_);
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCHLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCHLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (tag == 26) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHLogin.phone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pswd;
        break;
      }

      // optional string pswd = 4;
      case 4: {
        if (tag == 34) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHLogin.pswd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCHLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCHLogin)
  return false;
#undef DO_
}

void MsgCHLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCHLogin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string phone = 3;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHLogin.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phone(), output);
  }

  // optional string pswd = 4;
  if (this->pswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHLogin.pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pswd(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCHLogin)
}

int MsgCHLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCHLogin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional string phone = 3;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // optional string pswd = 4;
  if (this->pswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pswd());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCHLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCHLogin*>(&from));
}

void MsgCHLogin::MergeFrom(const MsgCHLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCHLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.pswd().size() > 0) {

    pswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pswd_);
  }
}

void MsgCHLogin::CopyFrom(const MsgCHLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCHLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCHLogin::IsInitialized() const {

  return true;
}

void MsgCHLogin::Swap(MsgCHLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCHLogin::InternalSwap(MsgCHLogin* other) {
  std::swap(mid_, other->mid_);
  std::swap(version_, other->version_);
  phone_.Swap(&other->phone_);
  pswd_.Swap(&other->pswd_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCHLogin::GetTypeName() const {
  return "proto3.MsgCHLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCHLogin

// optional .proto3.pb_msg mid = 1;
void MsgCHLogin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCHLogin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHLogin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCHLogin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCHLogin.mid)
}

// optional uint32 version = 2;
void MsgCHLogin::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgCHLogin::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHLogin.version)
  return version_;
}
 void MsgCHLogin::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCHLogin.version)
}

// optional string phone = 3;
void MsgCHLogin::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHLogin::phone() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHLogin.phone)
  return phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHLogin::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHLogin.phone)
}
 void MsgCHLogin::set_phone(const char* value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHLogin.phone)
}
 void MsgCHLogin::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHLogin.phone)
}
 ::std::string* MsgCHLogin::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHLogin.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHLogin::release_phone() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHLogin.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHLogin::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHLogin.phone)
}

// optional string pswd = 4;
void MsgCHLogin::clear_pswd() {
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHLogin::pswd() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHLogin.pswd)
  return pswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHLogin::set_pswd(const ::std::string& value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHLogin.pswd)
}
 void MsgCHLogin::set_pswd(const char* value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHLogin.pswd)
}
 void MsgCHLogin::set_pswd(const char* value, size_t size) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHLogin.pswd)
}
 ::std::string* MsgCHLogin::mutable_pswd() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHLogin.pswd)
  return pswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHLogin::release_pswd() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHLogin.pswd)
  
  return pswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHLogin::set_allocated_pswd(::std::string* pswd) {
  if (pswd != NULL) {
    
  } else {
    
  }
  pswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pswd);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHLogin.pswd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHCLogin::kMidFieldNumber;
const int MsgHCLogin::kAmountFieldNumber;
const int MsgHCLogin::kSessionFieldNumber;
const int MsgHCLogin::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHCLogin::MsgHCLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgHCLogin)
}

void MsgHCLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgHCLogin::MsgHCLogin(const MsgHCLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgHCLogin)
}

void MsgHCLogin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  amount_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
}

MsgHCLogin::~MsgHCLogin() {
  // @@protoc_insertion_point(destructor:proto3.MsgHCLogin)
  SharedDtor();
}

void MsgHCLogin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgHCLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgHCLogin& MsgHCLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgHCLogin* MsgHCLogin::default_instance_ = NULL;

MsgHCLogin* MsgHCLogin::New(::google::protobuf::Arena* arena) const {
  MsgHCLogin* n = new MsgHCLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHCLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgHCLogin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgHCLogin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgHCLogin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgHCLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgHCLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int32 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // optional uint64 session = 3;
      case 3: {
        if (tag == 24) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgHCLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgHCLogin)
  return false;
#undef DO_
}

void MsgHCLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgHCLogin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session(), output);
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgHCLogin)
}

int MsgHCLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgHCLogin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amount());
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHCLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgHCLogin*>(&from));
}

void MsgHCLogin::MergeFrom(const MsgHCLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgHCLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgHCLogin::CopyFrom(const MsgHCLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgHCLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHCLogin::IsInitialized() const {

  return true;
}

void MsgHCLogin::Swap(MsgHCLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHCLogin::InternalSwap(MsgHCLogin* other) {
  std::swap(mid_, other->mid_);
  std::swap(amount_, other->amount_);
  std::swap(session_, other->session_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgHCLogin::GetTypeName() const {
  return "proto3.MsgHCLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHCLogin

// optional .proto3.pb_msg mid = 1;
void MsgHCLogin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgHCLogin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCLogin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgHCLogin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCLogin.mid)
}

// optional int32 amount = 2;
void MsgHCLogin::clear_amount() {
  amount_ = 0;
}
 ::google::protobuf::int32 MsgHCLogin::amount() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCLogin.amount)
  return amount_;
}
 void MsgHCLogin::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCLogin.amount)
}

// optional uint64 session = 3;
void MsgHCLogin::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgHCLogin::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCLogin.session)
  return session_;
}
 void MsgHCLogin::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCLogin.session)
}

// optional .proto3.pb_enum result = 4;
void MsgHCLogin::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgHCLogin::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCLogin.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgHCLogin::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCLogin.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCHRegister::kMidFieldNumber;
const int MsgCHRegister::kUidFieldNumber;
const int MsgCHRegister::kPhoneFieldNumber;
const int MsgCHRegister::kPswdFieldNumber;
const int MsgCHRegister::kNameFieldNumber;
const int MsgCHRegister::kAddressFieldNumber;
const int MsgCHRegister::kIdcardFieldNumber;
const int MsgCHRegister::kWechatFieldNumber;
const int MsgCHRegister::kAlipayFieldNumber;
const int MsgCHRegister::kVerifycodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCHRegister::MsgCHRegister()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCHRegister)
}

void MsgCHRegister::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCHRegister::MsgCHRegister(const MsgCHRegister& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCHRegister)
}

void MsgCHRegister::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wechat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alipay_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgCHRegister::~MsgCHRegister() {
  // @@protoc_insertion_point(destructor:proto3.MsgCHRegister)
  SharedDtor();
}

void MsgCHRegister::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wechat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alipay_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCHRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCHRegister& MsgCHRegister::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCHRegister* MsgCHRegister::default_instance_ = NULL;

MsgCHRegister* MsgCHRegister::New(::google::protobuf::Arena* arena) const {
  MsgCHRegister* n = new MsgCHRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCHRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCHRegister)
  mid_ = 0;
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wechat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alipay_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgCHRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCHRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (tag == 26) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.phone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pswd;
        break;
      }

      // optional string pswd = 4;
      case 4: {
        if (tag == 34) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.pswd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_address;
        break;
      }

      // optional string address = 6;
      case 6: {
        if (tag == 50) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_idcard;
        break;
      }

      // optional string idcard = 7;
      case 7: {
        if (tag == 58) {
         parse_idcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcard()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->idcard().data(), this->idcard().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.idcard"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wechat;
        break;
      }

      // optional string wechat = 8;
      case 8: {
        if (tag == 66) {
         parse_wechat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wechat()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wechat().data(), this->wechat().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.wechat"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_alipay;
        break;
      }

      // optional string alipay = 9;
      case 9: {
        if (tag == 74) {
         parse_alipay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipay()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alipay().data(), this->alipay().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.alipay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_verifycode;
        break;
      }

      // optional string verifycode = 10;
      case 10: {
        if (tag == 82) {
         parse_verifycode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verifycode().data(), this->verifycode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHRegister.verifycode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCHRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCHRegister)
  return false;
#undef DO_
}

void MsgCHRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCHRegister)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional string phone = 3;
  if (this->phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phone(), output);
  }

  // optional string pswd = 4;
  if (this->pswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pswd(), output);
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional string address = 6;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->address(), output);
  }

  // optional string idcard = 7;
  if (this->idcard().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.idcard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->idcard(), output);
  }

  // optional string wechat = 8;
  if (this->wechat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wechat().data(), this->wechat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.wechat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->wechat(), output);
  }

  // optional string alipay = 9;
  if (this->alipay().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.alipay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->alipay(), output);
  }

  // optional string verifycode = 10;
  if (this->verifycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHRegister.verifycode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->verifycode(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCHRegister)
}

int MsgCHRegister::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCHRegister)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional string phone = 3;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // optional string pswd = 4;
  if (this->pswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pswd());
  }

  // optional string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string address = 6;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional string idcard = 7;
  if (this->idcard().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->idcard());
  }

  // optional string wechat = 8;
  if (this->wechat().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wechat());
  }

  // optional string alipay = 9;
  if (this->alipay().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alipay());
  }

  // optional string verifycode = 10;
  if (this->verifycode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verifycode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCHRegister::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCHRegister*>(&from));
}

void MsgCHRegister::MergeFrom(const MsgCHRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCHRegister)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.pswd().size() > 0) {

    pswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pswd_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.idcard().size() > 0) {

    idcard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idcard_);
  }
  if (from.wechat().size() > 0) {

    wechat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wechat_);
  }
  if (from.alipay().size() > 0) {

    alipay_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alipay_);
  }
  if (from.verifycode().size() > 0) {

    verifycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycode_);
  }
}

void MsgCHRegister::CopyFrom(const MsgCHRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCHRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCHRegister::IsInitialized() const {

  return true;
}

void MsgCHRegister::Swap(MsgCHRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCHRegister::InternalSwap(MsgCHRegister* other) {
  std::swap(mid_, other->mid_);
  uid_.Swap(&other->uid_);
  phone_.Swap(&other->phone_);
  pswd_.Swap(&other->pswd_);
  name_.Swap(&other->name_);
  address_.Swap(&other->address_);
  idcard_.Swap(&other->idcard_);
  wechat_.Swap(&other->wechat_);
  alipay_.Swap(&other->alipay_);
  verifycode_.Swap(&other->verifycode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCHRegister::GetTypeName() const {
  return "proto3.MsgCHRegister";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCHRegister

// optional .proto3.pb_msg mid = 1;
void MsgCHRegister::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCHRegister::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCHRegister::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.mid)
}

// optional string uid = 2;
void MsgCHRegister::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.uid)
}
 void MsgCHRegister::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.uid)
}
 void MsgCHRegister::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.uid)
}
 ::std::string* MsgCHRegister::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.uid)
}

// optional string phone = 3;
void MsgCHRegister::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::phone() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.phone)
  return phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.phone)
}
 void MsgCHRegister::set_phone(const char* value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.phone)
}
 void MsgCHRegister::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.phone)
}
 ::std::string* MsgCHRegister::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_phone() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.phone)
}

// optional string pswd = 4;
void MsgCHRegister::clear_pswd() {
  pswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::pswd() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.pswd)
  return pswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_pswd(const ::std::string& value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.pswd)
}
 void MsgCHRegister::set_pswd(const char* value) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.pswd)
}
 void MsgCHRegister::set_pswd(const char* value, size_t size) {
  
  pswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.pswd)
}
 ::std::string* MsgCHRegister::mutable_pswd() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.pswd)
  return pswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_pswd() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.pswd)
  
  return pswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_pswd(::std::string* pswd) {
  if (pswd != NULL) {
    
  } else {
    
  }
  pswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pswd);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.pswd)
}

// optional string name = 5;
void MsgCHRegister::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::name() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.name)
}
 void MsgCHRegister::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.name)
}
 void MsgCHRegister::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.name)
}
 ::std::string* MsgCHRegister::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_name() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.name)
}

// optional string address = 6;
void MsgCHRegister::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::address() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.address)
}
 void MsgCHRegister::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.address)
}
 void MsgCHRegister::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.address)
}
 ::std::string* MsgCHRegister::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_address() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.address)
}

// optional string idcard = 7;
void MsgCHRegister::clear_idcard() {
  idcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::idcard() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.idcard)
  return idcard_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_idcard(const ::std::string& value) {
  
  idcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.idcard)
}
 void MsgCHRegister::set_idcard(const char* value) {
  
  idcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.idcard)
}
 void MsgCHRegister::set_idcard(const char* value, size_t size) {
  
  idcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.idcard)
}
 ::std::string* MsgCHRegister::mutable_idcard() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.idcard)
  return idcard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_idcard() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.idcard)
  
  return idcard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_idcard(::std::string* idcard) {
  if (idcard != NULL) {
    
  } else {
    
  }
  idcard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idcard);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.idcard)
}

// optional string wechat = 8;
void MsgCHRegister::clear_wechat() {
  wechat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::wechat() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.wechat)
  return wechat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_wechat(const ::std::string& value) {
  
  wechat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.wechat)
}
 void MsgCHRegister::set_wechat(const char* value) {
  
  wechat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.wechat)
}
 void MsgCHRegister::set_wechat(const char* value, size_t size) {
  
  wechat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.wechat)
}
 ::std::string* MsgCHRegister::mutable_wechat() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.wechat)
  return wechat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_wechat() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.wechat)
  
  return wechat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_wechat(::std::string* wechat) {
  if (wechat != NULL) {
    
  } else {
    
  }
  wechat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wechat);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.wechat)
}

// optional string alipay = 9;
void MsgCHRegister::clear_alipay() {
  alipay_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::alipay() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.alipay)
  return alipay_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_alipay(const ::std::string& value) {
  
  alipay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.alipay)
}
 void MsgCHRegister::set_alipay(const char* value) {
  
  alipay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.alipay)
}
 void MsgCHRegister::set_alipay(const char* value, size_t size) {
  
  alipay_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.alipay)
}
 ::std::string* MsgCHRegister::mutable_alipay() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.alipay)
  return alipay_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_alipay() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.alipay)
  
  return alipay_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_alipay(::std::string* alipay) {
  if (alipay != NULL) {
    
  } else {
    
  }
  alipay_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alipay);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.alipay)
}

// optional string verifycode = 10;
void MsgCHRegister::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHRegister::verifycode() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHRegister.verifycode)
  return verifycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_verifycode(const ::std::string& value) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHRegister.verifycode)
}
 void MsgCHRegister::set_verifycode(const char* value) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHRegister.verifycode)
}
 void MsgCHRegister::set_verifycode(const char* value, size_t size) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHRegister.verifycode)
}
 ::std::string* MsgCHRegister::mutable_verifycode() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHRegister.verifycode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHRegister::release_verifycode() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHRegister.verifycode)
  
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHRegister::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    
  } else {
    
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHRegister.verifycode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHCRegister::kMidFieldNumber;
const int MsgHCRegister::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHCRegister::MsgHCRegister()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgHCRegister)
}

void MsgHCRegister::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgHCRegister::MsgHCRegister(const MsgHCRegister& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgHCRegister)
}

void MsgHCRegister::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgHCRegister::~MsgHCRegister() {
  // @@protoc_insertion_point(destructor:proto3.MsgHCRegister)
  SharedDtor();
}

void MsgHCRegister::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgHCRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgHCRegister& MsgHCRegister::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgHCRegister* MsgHCRegister::default_instance_ = NULL;

MsgHCRegister* MsgHCRegister::New(::google::protobuf::Arena* arena) const {
  MsgHCRegister* n = new MsgHCRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHCRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgHCRegister)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgHCRegister, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgHCRegister*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgHCRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgHCRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgHCRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgHCRegister)
  return false;
#undef DO_
}

void MsgHCRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgHCRegister)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.pb_enum result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgHCRegister)
}

int MsgHCRegister::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgHCRegister)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHCRegister::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgHCRegister*>(&from));
}

void MsgHCRegister::MergeFrom(const MsgHCRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgHCRegister)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgHCRegister::CopyFrom(const MsgHCRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgHCRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHCRegister::IsInitialized() const {

  return true;
}

void MsgHCRegister::Swap(MsgHCRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHCRegister::InternalSwap(MsgHCRegister* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgHCRegister::GetTypeName() const {
  return "proto3.MsgHCRegister";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHCRegister

// optional .proto3.pb_msg mid = 1;
void MsgHCRegister::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgHCRegister::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCRegister.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgHCRegister::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCRegister.mid)
}

// optional .proto3.pb_enum result = 2;
void MsgHCRegister::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgHCRegister::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCRegister.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgHCRegister::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCRegister.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCHCharge::kMidFieldNumber;
const int MsgCHCharge::kSessionFieldNumber;
const int MsgCHCharge::kUidFieldNumber;
const int MsgCHCharge::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCHCharge::MsgCHCharge()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCHCharge)
}

void MsgCHCharge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCHCharge::MsgCHCharge(const MsgCHCharge& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCHCharge)
}

void MsgCHCharge::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
}

MsgCHCharge::~MsgCHCharge() {
  // @@protoc_insertion_point(destructor:proto3.MsgCHCharge)
  SharedDtor();
}

void MsgCHCharge::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCHCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCHCharge& MsgCHCharge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCHCharge* MsgCHCharge::default_instance_ = NULL;

MsgCHCharge* MsgCHCharge::New(::google::protobuf::Arena* arena) const {
  MsgCHCharge* n = new MsgCHCharge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCHCharge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCHCharge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCHCharge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCHCharge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(session_, amount_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCHCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCHCharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session;
        break;
      }

      // optional uint64 session = 2;
      case 2: {
        if (tag == 16) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (tag == 26) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHCharge.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }

      // optional int32 amount = 4;
      case 4: {
        if (tag == 32) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCHCharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCHCharge)
  return false;
#undef DO_
}

void MsgCHCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCHCharge)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint64 session = 2;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session(), output);
  }

  // optional string uid = 3;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHCharge.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uid(), output);
  }

  // optional int32 amount = 4;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCHCharge)
}

int MsgCHCharge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCHCharge)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint64 session = 2;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  // optional string uid = 3;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional int32 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->amount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCHCharge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCHCharge*>(&from));
}

void MsgCHCharge::MergeFrom(const MsgCHCharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCHCharge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void MsgCHCharge::CopyFrom(const MsgCHCharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCHCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCHCharge::IsInitialized() const {

  return true;
}

void MsgCHCharge::Swap(MsgCHCharge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCHCharge::InternalSwap(MsgCHCharge* other) {
  std::swap(mid_, other->mid_);
  std::swap(session_, other->session_);
  uid_.Swap(&other->uid_);
  std::swap(amount_, other->amount_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCHCharge::GetTypeName() const {
  return "proto3.MsgCHCharge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCHCharge

// optional .proto3.pb_msg mid = 1;
void MsgCHCharge::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCHCharge::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHCharge.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCHCharge::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCHCharge.mid)
}

// optional uint64 session = 2;
void MsgCHCharge::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCHCharge::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHCharge.session)
  return session_;
}
 void MsgCHCharge::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCHCharge.session)
}

// optional string uid = 3;
void MsgCHCharge::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHCharge::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHCharge.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHCharge::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHCharge.uid)
}
 void MsgCHCharge::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHCharge.uid)
}
 void MsgCHCharge::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHCharge.uid)
}
 ::std::string* MsgCHCharge::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHCharge.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHCharge::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHCharge.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHCharge::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHCharge.uid)
}

// optional int32 amount = 4;
void MsgCHCharge::clear_amount() {
  amount_ = 0;
}
 ::google::protobuf::int32 MsgCHCharge::amount() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHCharge.amount)
  return amount_;
}
 void MsgCHCharge::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCHCharge.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHCCharge::kMidFieldNumber;
const int MsgHCCharge::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHCCharge::MsgHCCharge()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgHCCharge)
}

void MsgHCCharge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgHCCharge::MsgHCCharge(const MsgHCCharge& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgHCCharge)
}

void MsgHCCharge::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgHCCharge::~MsgHCCharge() {
  // @@protoc_insertion_point(destructor:proto3.MsgHCCharge)
  SharedDtor();
}

void MsgHCCharge::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgHCCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgHCCharge& MsgHCCharge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgHCCharge* MsgHCCharge::default_instance_ = NULL;

MsgHCCharge* MsgHCCharge::New(::google::protobuf::Arena* arena) const {
  MsgHCCharge* n = new MsgHCCharge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHCCharge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgHCCharge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgHCCharge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgHCCharge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgHCCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgHCCharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgHCCharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgHCCharge)
  return false;
#undef DO_
}

void MsgHCCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgHCCharge)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.pb_enum result = 5;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgHCCharge)
}

int MsgHCCharge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgHCCharge)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 5;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHCCharge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgHCCharge*>(&from));
}

void MsgHCCharge::MergeFrom(const MsgHCCharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgHCCharge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgHCCharge::CopyFrom(const MsgHCCharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgHCCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHCCharge::IsInitialized() const {

  return true;
}

void MsgHCCharge::Swap(MsgHCCharge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHCCharge::InternalSwap(MsgHCCharge* other) {
  std::swap(mid_, other->mid_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgHCCharge::GetTypeName() const {
  return "proto3.MsgHCCharge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHCCharge

// optional .proto3.pb_msg mid = 1;
void MsgHCCharge::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgHCCharge::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCCharge.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgHCCharge::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCCharge.mid)
}

// optional .proto3.pb_enum result = 5;
void MsgHCCharge::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgHCCharge::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCCharge.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgHCCharge::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCCharge.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCHQuery::kMidFieldNumber;
const int MsgCHQuery::kSessionFieldNumber;
const int MsgCHQuery::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCHQuery::MsgCHQuery()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCHQuery)
}

void MsgCHQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCHQuery::MsgCHQuery(const MsgCHQuery& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCHQuery)
}

void MsgCHQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgCHQuery::~MsgCHQuery() {
  // @@protoc_insertion_point(destructor:proto3.MsgCHQuery)
  SharedDtor();
}

void MsgCHQuery::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCHQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCHQuery& MsgCHQuery::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCHQuery* MsgCHQuery::default_instance_ = NULL;

MsgCHQuery* MsgCHQuery::New(::google::protobuf::Arena* arena) const {
  MsgCHQuery* n = new MsgCHQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCHQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCHQuery)
  mid_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgCHQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCHQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session;
        break;
      }

      // optional uint64 session = 2;
      case 2: {
        if (tag == 16) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // optional string uid = 3;
      case 3: {
        if (tag == 26) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCHQuery.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCHQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCHQuery)
  return false;
#undef DO_
}

void MsgCHQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCHQuery)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional uint64 session = 2;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session(), output);
  }

  // optional string uid = 3;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCHQuery.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCHQuery)
}

int MsgCHQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCHQuery)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional uint64 session = 2;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  // optional string uid = 3;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCHQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCHQuery*>(&from));
}

void MsgCHQuery::MergeFrom(const MsgCHQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCHQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
}

void MsgCHQuery::CopyFrom(const MsgCHQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCHQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCHQuery::IsInitialized() const {

  return true;
}

void MsgCHQuery::Swap(MsgCHQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCHQuery::InternalSwap(MsgCHQuery* other) {
  std::swap(mid_, other->mid_);
  std::swap(session_, other->session_);
  uid_.Swap(&other->uid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCHQuery::GetTypeName() const {
  return "proto3.MsgCHQuery";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCHQuery

// optional .proto3.pb_msg mid = 1;
void MsgCHQuery::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCHQuery::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHQuery.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCHQuery::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCHQuery.mid)
}

// optional uint64 session = 2;
void MsgCHQuery::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCHQuery::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHQuery.session)
  return session_;
}
 void MsgCHQuery::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCHQuery.session)
}

// optional string uid = 3;
void MsgCHQuery::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCHQuery::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCHQuery.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHQuery::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCHQuery.uid)
}
 void MsgCHQuery::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCHQuery.uid)
}
 void MsgCHQuery::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCHQuery.uid)
}
 ::std::string* MsgCHQuery::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCHQuery.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCHQuery::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCHQuery.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCHQuery::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCHQuery.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHCQuery::kMidFieldNumber;
const int MsgHCQuery::kLogFieldNumber;
const int MsgHCQuery::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHCQuery::MsgHCQuery()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgHCQuery)
}

void MsgHCQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgHCQuery::MsgHCQuery(const MsgHCQuery& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgHCQuery)
}

void MsgHCQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgHCQuery::~MsgHCQuery() {
  // @@protoc_insertion_point(destructor:proto3.MsgHCQuery)
  SharedDtor();
}

void MsgHCQuery::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgHCQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgHCQuery& MsgHCQuery::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgHCQuery* MsgHCQuery::default_instance_ = NULL;

MsgHCQuery* MsgHCQuery::New(::google::protobuf::Arena* arena) const {
  MsgHCQuery* n = new MsgHCQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHCQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgHCQuery)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgHCQuery, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgHCQuery*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

  log_.Clear();
}

bool MsgHCQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgHCQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_log;
        break;
      }

      // repeated .proto3.charge_t log = 2;
      case 2: {
        if (tag == 18) {
         parse_log:
          DO_(input->IncrementRecursionDepth());
         parse_loop_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_log;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgHCQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgHCQuery)
  return false;
#undef DO_
}

void MsgHCQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgHCQuery)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // repeated .proto3.charge_t log = 2;
  for (unsigned int i = 0, n = this->log_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->log(i), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgHCQuery)
}

int MsgHCQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgHCQuery)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.charge_t log = 2;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHCQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgHCQuery*>(&from));
}

void MsgHCQuery::MergeFrom(const MsgHCQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgHCQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  log_.MergeFrom(from.log_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgHCQuery::CopyFrom(const MsgHCQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgHCQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHCQuery::IsInitialized() const {

  return true;
}

void MsgHCQuery::Swap(MsgHCQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHCQuery::InternalSwap(MsgHCQuery* other) {
  std::swap(mid_, other->mid_);
  log_.UnsafeArenaSwap(&other->log_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgHCQuery::GetTypeName() const {
  return "proto3.MsgHCQuery";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHCQuery

// optional .proto3.pb_msg mid = 1;
void MsgHCQuery::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgHCQuery::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCQuery.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgHCQuery::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCQuery.mid)
}

// repeated .proto3.charge_t log = 2;
int MsgHCQuery::log_size() const {
  return log_.size();
}
void MsgHCQuery::clear_log() {
  log_.Clear();
}
const ::proto3::charge_t& MsgHCQuery::log(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCQuery.log)
  return log_.Get(index);
}
::proto3::charge_t* MsgHCQuery::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgHCQuery.log)
  return log_.Mutable(index);
}
::proto3::charge_t* MsgHCQuery::add_log() {
  // @@protoc_insertion_point(field_add:proto3.MsgHCQuery.log)
  return log_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::charge_t >*
MsgHCQuery::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgHCQuery.log)
  return &log_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::charge_t >&
MsgHCQuery::log() const {
  // @@protoc_insertion_point(field_list:proto3.MsgHCQuery.log)
  return log_;
}

// optional .proto3.pb_enum result = 3;
void MsgHCQuery::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgHCQuery::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgHCQuery.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgHCQuery::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgHCQuery.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNConnect::kMidFieldNumber;
const int MsgCNConnect::kUidFieldNumber;
const int MsgCNConnect::kVersionFieldNumber;
const int MsgCNConnect::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNConnect::MsgCNConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNConnect)
}

void MsgCNConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNConnect::MsgCNConnect(const MsgCNConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNConnect)
}

void MsgCNConnect::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  session_ = GOOGLE_ULONGLONG(0);
}

MsgCNConnect::~MsgCNConnect() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNConnect)
  SharedDtor();
}

void MsgCNConnect::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNConnect& MsgCNConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNConnect* MsgCNConnect::default_instance_ = NULL;

MsgCNConnect* MsgCNConnect::New(::google::protobuf::Arena* arena) const {
  MsgCNConnect* n = new MsgCNConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCNConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCNConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, session_);
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCNConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCNConnect.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }

      // optional uint64 session = 4;
      case 4: {
        if (tag == 32) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNConnect)
  return false;
#undef DO_
}

void MsgCNConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNConnect)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCNConnect.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNConnect)
}

int MsgCNConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNConnect)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // optional uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // optional uint64 session = 4;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNConnect*>(&from));
}

void MsgCNConnect::MergeFrom(const MsgCNConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
}

void MsgCNConnect::CopyFrom(const MsgCNConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNConnect::IsInitialized() const {

  return true;
}

void MsgCNConnect::Swap(MsgCNConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNConnect::InternalSwap(MsgCNConnect* other) {
  std::swap(mid_, other->mid_);
  uid_.Swap(&other->uid_);
  std::swap(version_, other->version_);
  std::swap(session_, other->session_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNConnect::GetTypeName() const {
  return "proto3.MsgCNConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNConnect

// optional .proto3.pb_msg mid = 1;
void MsgCNConnect::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNConnect::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNConnect.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNConnect::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNConnect.mid)
}

// optional string uid = 2;
void MsgCNConnect::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCNConnect::uid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNConnect.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNConnect::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCNConnect.uid)
}
 void MsgCNConnect::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCNConnect.uid)
}
 void MsgCNConnect::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCNConnect.uid)
}
 ::std::string* MsgCNConnect::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNConnect.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCNConnect::release_uid() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNConnect.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNConnect::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNConnect.uid)
}

// optional uint32 version = 3;
void MsgCNConnect::clear_version() {
  version_ = 0u;
}
 ::google::protobuf::uint32 MsgCNConnect::version() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNConnect.version)
  return version_;
}
 void MsgCNConnect::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNConnect.version)
}

// optional uint64 session = 4;
void MsgCNConnect::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCNConnect::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNConnect.session)
  return session_;
}
 void MsgCNConnect::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNConnect.session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCConnect::kMidFieldNumber;
const int MsgNCConnect::kPlayerFieldNumber;
const int MsgNCConnect::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCConnect::MsgNCConnect()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCConnect)
}

void MsgNCConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  player_ = const_cast< ::proto3::player_t*>(
      ::proto3::player_t::internal_default_instance());
#else
  player_ = const_cast< ::proto3::player_t*>(&::proto3::player_t::default_instance());
#endif
}

MsgNCConnect::MsgNCConnect(const MsgNCConnect& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCConnect)
}

void MsgNCConnect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  player_ = NULL;
  result_ = 0;
}

MsgNCConnect::~MsgNCConnect() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCConnect)
  SharedDtor();
}

void MsgNCConnect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete player_;
  }
}

void MsgNCConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCConnect& MsgNCConnect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCConnect* MsgNCConnect::default_instance_ = NULL;

MsgNCConnect* MsgNCConnect::New(::google::protobuf::Arena* arena) const {
  MsgNCConnect* n = new MsgNCConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCConnect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCConnect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCConnect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .proto3.player_t player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCConnect)
  return false;
#undef DO_
}

void MsgNCConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCConnect)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.player_t player = 2;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->player_, output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCConnect)
}

int MsgNCConnect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCConnect)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.player_t player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCConnect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCConnect*>(&from));
}

void MsgNCConnect::MergeFrom(const MsgNCConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_player()) {
    mutable_player()->::proto3::player_t::MergeFrom(from.player());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCConnect::CopyFrom(const MsgNCConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCConnect::IsInitialized() const {

  return true;
}

void MsgNCConnect::Swap(MsgNCConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCConnect::InternalSwap(MsgNCConnect* other) {
  std::swap(mid_, other->mid_);
  std::swap(player_, other->player_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCConnect::GetTypeName() const {
  return "proto3.MsgNCConnect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCConnect

// optional .proto3.pb_msg mid = 1;
void MsgNCConnect::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCConnect::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCConnect.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCConnect::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCConnect.mid)
}

// optional .proto3.player_t player = 2;
bool MsgNCConnect::has_player() const {
  return !_is_default_instance_ && player_ != NULL;
}
void MsgNCConnect::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3::player_t& MsgNCConnect::player() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCConnect.player)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return player_ != NULL ? *player_ : *default_instance().player_;
#else
  return player_ != NULL ? *player_ : *default_instance_->player_;
#endif
}
::proto3::player_t* MsgNCConnect::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3::player_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCConnect.player)
  return player_;
}
::proto3::player_t* MsgNCConnect::release_player() {
  // @@protoc_insertion_point(field_release:proto3.MsgNCConnect.player)
  
  ::proto3::player_t* temp = player_;
  player_ = NULL;
  return temp;
}
void MsgNCConnect::set_allocated_player(::proto3::player_t* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgNCConnect.player)
}

// optional .proto3.pb_enum result = 3;
void MsgNCConnect::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCConnect::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCConnect.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCConnect::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCConnect.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNCreate::kMidFieldNumber;
const int MsgCNCreate::kGameFieldNumber;
const int MsgCNCreate::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNCreate::MsgCNCreate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNCreate)
}

void MsgCNCreate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNCreate::MsgCNCreate(const MsgCNCreate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNCreate)
}

void MsgCNCreate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  game_ = 0;
}

MsgCNCreate::~MsgCNCreate() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNCreate)
  SharedDtor();
}

void MsgCNCreate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNCreate& MsgCNCreate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNCreate* MsgCNCreate::default_instance_ = NULL;

MsgCNCreate* MsgCNCreate::New(::google::protobuf::Arena* arena) const {
  MsgCNCreate* n = new MsgCNCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNCreate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCNCreate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCNCreate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, game_);

#undef ZR_HELPER_
#undef ZR_

  options_.Clear();
}

bool MsgCNCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game;
        break;
      }

      // optional .proto3.pb_enum game = 2;
      case 2: {
        if (tag == 16) {
         parse_game:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_game(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }

      // repeated .proto3.key_value options = 3;
      case 3: {
        if (tag == 26) {
         parse_options:
          DO_(input->IncrementRecursionDepth());
         parse_loop_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_options;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNCreate)
  return false;
#undef DO_
}

void MsgCNCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNCreate)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.pb_enum game = 2;
  if (this->game() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game(), output);
  }

  // repeated .proto3.key_value options = 3;
  for (unsigned int i = 0, n = this->options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->options(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNCreate)
}

int MsgCNCreate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNCreate)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum game = 2;
  if (this->game() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->game());
  }

  // repeated .proto3.key_value options = 3;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->options(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNCreate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNCreate*>(&from));
}

void MsgCNCreate::MergeFrom(const MsgCNCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  options_.MergeFrom(from.options_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.game() != 0) {
    set_game(from.game());
  }
}

void MsgCNCreate::CopyFrom(const MsgCNCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNCreate::IsInitialized() const {

  return true;
}

void MsgCNCreate::Swap(MsgCNCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNCreate::InternalSwap(MsgCNCreate* other) {
  std::swap(mid_, other->mid_);
  std::swap(game_, other->game_);
  options_.UnsafeArenaSwap(&other->options_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNCreate::GetTypeName() const {
  return "proto3.MsgCNCreate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNCreate

// optional .proto3.pb_msg mid = 1;
void MsgCNCreate::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNCreate::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNCreate.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNCreate::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNCreate.mid)
}

// optional .proto3.pb_enum game = 2;
void MsgCNCreate::clear_game() {
  game_ = 0;
}
 ::proto3::pb_enum MsgCNCreate::game() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNCreate.game)
  return static_cast< ::proto3::pb_enum >(game_);
}
 void MsgCNCreate::set_game(::proto3::pb_enum value) {
  
  game_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNCreate.game)
}

// repeated .proto3.key_value options = 3;
int MsgCNCreate::options_size() const {
  return options_.size();
}
void MsgCNCreate::clear_options() {
  options_.Clear();
}
const ::proto3::key_value& MsgCNCreate::options(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNCreate.options)
  return options_.Get(index);
}
::proto3::key_value* MsgCNCreate::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNCreate.options)
  return options_.Mutable(index);
}
::proto3::key_value* MsgCNCreate::add_options() {
  // @@protoc_insertion_point(field_add:proto3.MsgCNCreate.options)
  return options_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::key_value >*
MsgCNCreate::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgCNCreate.options)
  return &options_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::key_value >&
MsgCNCreate::options() const {
  // @@protoc_insertion_point(field_list:proto3.MsgCNCreate.options)
  return options_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCCreate::kMidFieldNumber;
const int MsgNCCreate::kGameIdFieldNumber;
const int MsgNCCreate::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCCreate::MsgNCCreate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCCreate)
}

void MsgNCCreate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCCreate::MsgNCCreate(const MsgNCCreate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCCreate)
}

void MsgNCCreate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  game_id_ = 0;
  result_ = 0;
}

MsgNCCreate::~MsgNCCreate() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCCreate)
  SharedDtor();
}

void MsgNCCreate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCCreate& MsgNCCreate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCCreate* MsgNCCreate::default_instance_ = NULL;

MsgNCCreate* MsgNCCreate::New(::google::protobuf::Arena* arena) const {
  MsgNCCreate* n = new MsgNCCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCCreate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCCreate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCCreate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional int32 game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCCreate)
  return false;
#undef DO_
}

void MsgNCCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCCreate)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 game_id = 2;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCCreate)
}

int MsgNCCreate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCCreate)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCCreate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCCreate*>(&from));
}

void MsgNCCreate::MergeFrom(const MsgNCCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCCreate::CopyFrom(const MsgNCCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCCreate::IsInitialized() const {

  return true;
}

void MsgNCCreate::Swap(MsgNCCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCCreate::InternalSwap(MsgNCCreate* other) {
  std::swap(mid_, other->mid_);
  std::swap(game_id_, other->game_id_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCCreate::GetTypeName() const {
  return "proto3.MsgNCCreate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCCreate

// optional .proto3.pb_msg mid = 1;
void MsgNCCreate::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCCreate::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCCreate.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCCreate::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCCreate.mid)
}

// optional int32 game_id = 2;
void MsgNCCreate::clear_game_id() {
  game_id_ = 0;
}
 ::google::protobuf::int32 MsgNCCreate::game_id() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCCreate.game_id)
  return game_id_;
}
 void MsgNCCreate::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCCreate.game_id)
}

// optional .proto3.pb_enum result = 3;
void MsgNCCreate::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCCreate::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCCreate.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCCreate::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCCreate.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNJoin::kMidFieldNumber;
const int MsgCNJoin::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNJoin::MsgCNJoin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNJoin)
}

void MsgCNJoin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNJoin::MsgCNJoin(const MsgCNJoin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNJoin)
}

void MsgCNJoin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  game_id_ = 0;
}

MsgCNJoin::~MsgCNJoin() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNJoin)
  SharedDtor();
}

void MsgCNJoin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNJoin& MsgCNJoin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNJoin* MsgCNJoin::default_instance_ = NULL;

MsgCNJoin* MsgCNJoin::New(::google::protobuf::Arena* arena) const {
  MsgCNJoin* n = new MsgCNJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNJoin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCNJoin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCNJoin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, game_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCNJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional int32 game_id = 2;
      case 2: {
        if (tag == 16) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNJoin)
  return false;
#undef DO_
}

void MsgCNJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNJoin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 game_id = 2;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNJoin)
}

int MsgCNJoin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNJoin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNJoin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNJoin*>(&from));
}

void MsgCNJoin::MergeFrom(const MsgCNJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void MsgCNJoin::CopyFrom(const MsgCNJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNJoin::IsInitialized() const {

  return true;
}

void MsgCNJoin::Swap(MsgCNJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNJoin::InternalSwap(MsgCNJoin* other) {
  std::swap(mid_, other->mid_);
  std::swap(game_id_, other->game_id_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNJoin::GetTypeName() const {
  return "proto3.MsgCNJoin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNJoin

// optional .proto3.pb_msg mid = 1;
void MsgCNJoin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNJoin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNJoin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNJoin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNJoin.mid)
}

// optional int32 game_id = 2;
void MsgCNJoin::clear_game_id() {
  game_id_ = 0;
}
 ::google::protobuf::int32 MsgCNJoin::game_id() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNJoin.game_id)
  return game_id_;
}
 void MsgCNJoin::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNJoin.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCJoin::kMidFieldNumber;
const int MsgNCJoin::kGameFieldNumber;
const int MsgNCJoin::kCategoryFieldNumber;
const int MsgNCJoin::kPlayersFieldNumber;
const int MsgNCJoin::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCJoin::MsgNCJoin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCJoin)
}

void MsgNCJoin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCJoin::MsgNCJoin(const MsgNCJoin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCJoin)
}

void MsgNCJoin::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  game_ = 0;
  category_ = 0;
  result_ = 0;
}

MsgNCJoin::~MsgNCJoin() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCJoin)
  SharedDtor();
}

void MsgNCJoin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCJoin& MsgNCJoin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCJoin* MsgNCJoin::default_instance_ = NULL;

MsgNCJoin* MsgNCJoin::New(::google::protobuf::Arena* arena) const {
  MsgNCJoin* n = new MsgNCJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCJoin)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCJoin, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCJoin*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, game_);
  ZR_(category_, result_);

#undef ZR_HELPER_
#undef ZR_

  players_.Clear();
}

bool MsgNCJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game;
        break;
      }

      // optional .proto3.pb_enum game = 2;
      case 2: {
        if (tag == 16) {
         parse_game:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_game(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // optional .proto3.pb_enum category = 3;
      case 3: {
        if (tag == 24) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_category(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .proto3.player_t players = 4;
      case 4: {
        if (tag == 34) {
         parse_players:
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCJoin)
  return false;
#undef DO_
}

void MsgNCJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCJoin)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.pb_enum game = 2;
  if (this->game() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game(), output);
  }

  // optional .proto3.pb_enum category = 3;
  if (this->category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->category(), output);
  }

  // repeated .proto3.player_t players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->players(i), output);
  }

  // optional .proto3.pb_enum result = 5;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCJoin)
}

int MsgNCJoin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCJoin)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum game = 2;
  if (this->game() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->game());
  }

  // optional .proto3.pb_enum category = 3;
  if (this->category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
  }

  // optional .proto3.pb_enum result = 5;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.player_t players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCJoin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCJoin*>(&from));
}

void MsgNCJoin::MergeFrom(const MsgNCJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCJoin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  players_.MergeFrom(from.players_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.game() != 0) {
    set_game(from.game());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCJoin::CopyFrom(const MsgNCJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCJoin::IsInitialized() const {

  return true;
}

void MsgNCJoin::Swap(MsgNCJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCJoin::InternalSwap(MsgNCJoin* other) {
  std::swap(mid_, other->mid_);
  std::swap(game_, other->game_);
  std::swap(category_, other->category_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCJoin::GetTypeName() const {
  return "proto3.MsgNCJoin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCJoin

// optional .proto3.pb_msg mid = 1;
void MsgNCJoin::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCJoin::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCJoin.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCJoin::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCJoin.mid)
}

// optional .proto3.pb_enum game = 2;
void MsgNCJoin::clear_game() {
  game_ = 0;
}
 ::proto3::pb_enum MsgNCJoin::game() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCJoin.game)
  return static_cast< ::proto3::pb_enum >(game_);
}
 void MsgNCJoin::set_game(::proto3::pb_enum value) {
  
  game_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCJoin.game)
}

// optional .proto3.pb_enum category = 3;
void MsgNCJoin::clear_category() {
  category_ = 0;
}
 ::proto3::pb_enum MsgNCJoin::category() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCJoin.category)
  return static_cast< ::proto3::pb_enum >(category_);
}
 void MsgNCJoin::set_category(::proto3::pb_enum value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCJoin.category)
}

// repeated .proto3.player_t players = 4;
int MsgNCJoin::players_size() const {
  return players_.size();
}
void MsgNCJoin::clear_players() {
  players_.Clear();
}
const ::proto3::player_t& MsgNCJoin::players(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCJoin.players)
  return players_.Get(index);
}
::proto3::player_t* MsgNCJoin::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCJoin.players)
  return players_.Mutable(index);
}
::proto3::player_t* MsgNCJoin::add_players() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCJoin.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::player_t >*
MsgNCJoin::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCJoin.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::player_t >&
MsgNCJoin::players() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCJoin.players)
  return players_;
}

// optional .proto3.pb_enum result = 5;
void MsgNCJoin::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCJoin::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCJoin.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCJoin::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCJoin.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNReady::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNReady::MsgCNReady()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNReady)
}

void MsgCNReady::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNReady::MsgCNReady(const MsgCNReady& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNReady)
}

void MsgCNReady::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgCNReady::~MsgCNReady() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNReady)
  SharedDtor();
}

void MsgCNReady::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNReady& MsgCNReady::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNReady* MsgCNReady::default_instance_ = NULL;

MsgCNReady* MsgCNReady::New(::google::protobuf::Arena* arena) const {
  MsgCNReady* n = new MsgCNReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNReady::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNReady)
  mid_ = 0;
}

bool MsgCNReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNReady)
  return false;
#undef DO_
}

void MsgCNReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNReady)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNReady)
}

int MsgCNReady::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNReady)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNReady*>(&from));
}

void MsgCNReady::MergeFrom(const MsgCNReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgCNReady::CopyFrom(const MsgCNReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNReady::IsInitialized() const {

  return true;
}

void MsgCNReady::Swap(MsgCNReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNReady::InternalSwap(MsgCNReady* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNReady::GetTypeName() const {
  return "proto3.MsgCNReady";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNReady

// optional .proto3.pb_msg mid = 1;
void MsgCNReady::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNReady::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNReady.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNReady::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNReady.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCReady::kMidFieldNumber;
const int MsgNCReady::kPosFieldNumber;
const int MsgNCReady::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCReady::MsgNCReady()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCReady)
}

void MsgNCReady::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCReady::MsgNCReady(const MsgNCReady& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCReady)
}

void MsgNCReady::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  pos_ = 0;
  result_ = 0;
}

MsgNCReady::~MsgNCReady() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCReady)
  SharedDtor();
}

void MsgNCReady::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCReady& MsgNCReady::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCReady* MsgNCReady::default_instance_ = NULL;

MsgNCReady* MsgNCReady::New(::google::protobuf::Arena* arena) const {
  MsgNCReady* n = new MsgNCReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCReady::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCReady)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCReady, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCReady*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCReady)
  return false;
#undef DO_
}

void MsgNCReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCReady)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCReady)
}

int MsgNCReady::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCReady)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCReady::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCReady*>(&from));
}

void MsgNCReady::MergeFrom(const MsgNCReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCReady::CopyFrom(const MsgNCReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCReady::IsInitialized() const {

  return true;
}

void MsgNCReady::Swap(MsgNCReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCReady::InternalSwap(MsgNCReady* other) {
  std::swap(mid_, other->mid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCReady::GetTypeName() const {
  return "proto3.MsgNCReady";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCReady

// optional .proto3.pb_msg mid = 1;
void MsgNCReady::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCReady::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCReady.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCReady::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCReady.mid)
}

// optional int32 pos = 2;
void MsgNCReady::clear_pos() {
  pos_ = 0;
}
 ::google::protobuf::int32 MsgNCReady::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCReady.pos)
  return pos_;
}
 void MsgNCReady::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCReady.pos)
}

// optional .proto3.pb_enum result = 3;
void MsgNCReady::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCReady::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCReady.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCReady::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCReady.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNRevive::kMidFieldNumber;
const int MsgCNRevive::kGameFieldNumber;
const int MsgCNRevive::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNRevive::MsgCNRevive()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNRevive)
}

void MsgCNRevive::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNRevive::MsgCNRevive(const MsgCNRevive& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNRevive)
}

void MsgCNRevive::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  game_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
}

MsgCNRevive::~MsgCNRevive() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNRevive)
  SharedDtor();
}

void MsgCNRevive::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNRevive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNRevive& MsgCNRevive::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNRevive* MsgCNRevive::default_instance_ = NULL;

MsgCNRevive* MsgCNRevive::New(::google::protobuf::Arena* arena) const {
  MsgCNRevive* n = new MsgCNRevive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNRevive::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNRevive)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCNRevive, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCNRevive*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, session_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCNRevive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNRevive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game;
        break;
      }

      // optional int32 game = 2;
      case 2: {
        if (tag == 16) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // optional uint64 session = 3;
      case 3: {
        if (tag == 24) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNRevive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNRevive)
  return false;
#undef DO_
}

void MsgCNRevive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNRevive)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 game = 2;
  if (this->game() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game(), output);
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNRevive)
}

int MsgCNRevive::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNRevive)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 game = 2;
  if (this->game() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game());
  }

  // optional uint64 session = 3;
  if (this->session() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNRevive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNRevive*>(&from));
}

void MsgCNRevive::MergeFrom(const MsgCNRevive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNRevive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.game() != 0) {
    set_game(from.game());
  }
  if (from.session() != 0) {
    set_session(from.session());
  }
}

void MsgCNRevive::CopyFrom(const MsgCNRevive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNRevive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNRevive::IsInitialized() const {

  return true;
}

void MsgCNRevive::Swap(MsgCNRevive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNRevive::InternalSwap(MsgCNRevive* other) {
  std::swap(mid_, other->mid_);
  std::swap(game_, other->game_);
  std::swap(session_, other->session_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNRevive::GetTypeName() const {
  return "proto3.MsgCNRevive";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNRevive

// optional .proto3.pb_msg mid = 1;
void MsgCNRevive::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNRevive::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNRevive.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNRevive::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNRevive.mid)
}

// optional int32 game = 2;
void MsgCNRevive::clear_game() {
  game_ = 0;
}
 ::google::protobuf::int32 MsgCNRevive::game() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNRevive.game)
  return game_;
}
 void MsgCNRevive::set_game(::google::protobuf::int32 value) {
  
  game_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNRevive.game)
}

// optional uint64 session = 3;
void MsgCNRevive::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MsgCNRevive::session() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNRevive.session)
  return session_;
}
 void MsgCNRevive::set_session(::google::protobuf::uint64 value) {
  
  session_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNRevive.session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCRevive::kMidFieldNumber;
const int MsgNCRevive::kDealFieldNumber;
const int MsgNCRevive::kPlayFieldNumber;
const int MsgNCRevive::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCRevive::MsgNCRevive()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCRevive)
}

void MsgNCRevive::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  deal_ = const_cast< ::proto3::MsgNCDeal*>(
      ::proto3::MsgNCDeal::internal_default_instance());
#else
  deal_ = const_cast< ::proto3::MsgNCDeal*>(&::proto3::MsgNCDeal::default_instance());
#endif
}

MsgNCRevive::MsgNCRevive(const MsgNCRevive& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCRevive)
}

void MsgNCRevive::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  deal_ = NULL;
  result_ = 0;
}

MsgNCRevive::~MsgNCRevive() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCRevive)
  SharedDtor();
}

void MsgNCRevive::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete deal_;
  }
}

void MsgNCRevive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCRevive& MsgNCRevive::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCRevive* MsgNCRevive::default_instance_ = NULL;

MsgNCRevive* MsgNCRevive::New(::google::protobuf::Arena* arena) const {
  MsgNCRevive* n = new MsgNCRevive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCRevive::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCRevive)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCRevive, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCRevive*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && deal_ != NULL) delete deal_;
  deal_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  play_.Clear();
}

bool MsgNCRevive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCRevive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deal;
        break;
      }

      // optional .proto3.MsgNCDeal deal = 2;
      case 2: {
        if (tag == 18) {
         parse_deal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_play;
        break;
      }

      // repeated .proto3.play_t play = 3;
      case 3: {
        if (tag == 26) {
         parse_play:
          DO_(input->IncrementRecursionDepth());
         parse_loop_play:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_play()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_play;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCRevive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCRevive)
  return false;
#undef DO_
}

void MsgNCRevive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCRevive)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.MsgNCDeal deal = 2;
  if (this->has_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->deal_, output);
  }

  // repeated .proto3.play_t play = 3;
  for (unsigned int i = 0, n = this->play_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->play(i), output);
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCRevive)
}

int MsgNCRevive::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCRevive)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.MsgNCDeal deal = 2;
  if (this->has_deal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deal_);
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.play_t play = 3;
  total_size += 1 * this->play_size();
  for (int i = 0; i < this->play_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->play(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCRevive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCRevive*>(&from));
}

void MsgNCRevive::MergeFrom(const MsgNCRevive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCRevive)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  play_.MergeFrom(from.play_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_deal()) {
    mutable_deal()->::proto3::MsgNCDeal::MergeFrom(from.deal());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCRevive::CopyFrom(const MsgNCRevive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCRevive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCRevive::IsInitialized() const {

  return true;
}

void MsgNCRevive::Swap(MsgNCRevive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCRevive::InternalSwap(MsgNCRevive* other) {
  std::swap(mid_, other->mid_);
  std::swap(deal_, other->deal_);
  play_.UnsafeArenaSwap(&other->play_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCRevive::GetTypeName() const {
  return "proto3.MsgNCRevive";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCRevive

// optional .proto3.pb_msg mid = 1;
void MsgNCRevive::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCRevive::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCRevive.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCRevive::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCRevive.mid)
}

// optional .proto3.MsgNCDeal deal = 2;
bool MsgNCRevive::has_deal() const {
  return !_is_default_instance_ && deal_ != NULL;
}
void MsgNCRevive::clear_deal() {
  if (GetArenaNoVirtual() == NULL && deal_ != NULL) delete deal_;
  deal_ = NULL;
}
const ::proto3::MsgNCDeal& MsgNCRevive::deal() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCRevive.deal)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return deal_ != NULL ? *deal_ : *default_instance().deal_;
#else
  return deal_ != NULL ? *deal_ : *default_instance_->deal_;
#endif
}
::proto3::MsgNCDeal* MsgNCRevive::mutable_deal() {
  
  if (deal_ == NULL) {
    deal_ = new ::proto3::MsgNCDeal;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCRevive.deal)
  return deal_;
}
::proto3::MsgNCDeal* MsgNCRevive::release_deal() {
  // @@protoc_insertion_point(field_release:proto3.MsgNCRevive.deal)
  
  ::proto3::MsgNCDeal* temp = deal_;
  deal_ = NULL;
  return temp;
}
void MsgNCRevive::set_allocated_deal(::proto3::MsgNCDeal* deal) {
  delete deal_;
  deal_ = deal;
  if (deal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgNCRevive.deal)
}

// repeated .proto3.play_t play = 3;
int MsgNCRevive::play_size() const {
  return play_.size();
}
void MsgNCRevive::clear_play() {
  play_.Clear();
}
const ::proto3::play_t& MsgNCRevive::play(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCRevive.play)
  return play_.Get(index);
}
::proto3::play_t* MsgNCRevive::mutable_play(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCRevive.play)
  return play_.Mutable(index);
}
::proto3::play_t* MsgNCRevive::add_play() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCRevive.play)
  return play_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::play_t >*
MsgNCRevive::mutable_play() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCRevive.play)
  return &play_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::play_t >&
MsgNCRevive::play() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCRevive.play)
  return play_;
}

// optional .proto3.pb_enum result = 4;
void MsgNCRevive::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCRevive::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCRevive.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCRevive::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCRevive.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCDeal::kMidFieldNumber;
const int MsgNCDeal::kBankerFieldNumber;
const int MsgNCDeal::kPosFieldNumber;
const int MsgNCDeal::kAnteFieldNumber;
const int MsgNCDeal::kMultipleFieldNumber;
const int MsgNCDeal::kHandsFieldNumber;
const int MsgNCDeal::kBottomFieldNumber;
const int MsgNCDeal::kCountFieldNumber;
const int MsgNCDeal::kPilesFieldNumber;
const int MsgNCDeal::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCDeal::MsgNCDeal()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCDeal)
}

void MsgNCDeal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCDeal::MsgNCDeal(const MsgNCDeal& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCDeal)
}

void MsgNCDeal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  banker_ = 0;
  pos_ = 0;
  ante_ = 0;
  multiple_ = 0;
  piles_ = 0;
  result_ = 0;
}

MsgNCDeal::~MsgNCDeal() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCDeal)
  SharedDtor();
}

void MsgNCDeal::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCDeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCDeal& MsgNCDeal::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCDeal* MsgNCDeal::default_instance_ = NULL;

MsgNCDeal* MsgNCDeal::New(::google::protobuf::Arena* arena) const {
  MsgNCDeal* n = new MsgNCDeal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCDeal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCDeal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCDeal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCDeal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, ante_);
  multiple_ = 0;
  piles_ = 0;
  result_ = 0;

#undef ZR_HELPER_
#undef ZR_

  hands_.Clear();
  bottom_.Clear();
  count_.Clear();
}

bool MsgNCDeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCDeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_banker;
        break;
      }

      // optional int32 banker = 2;
      case 2: {
        if (tag == 16) {
         parse_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional int32 pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ante;
        break;
      }

      // optional int32 ante = 4;
      case 4: {
        if (tag == 32) {
         parse_ante:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ante_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multiple;
        break;
      }

      // optional int32 multiple = 5;
      case 5: {
        if (tag == 40) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hands;
        break;
      }

      // repeated int32 hands = 6;
      case 6: {
        if (tag == 50) {
         parse_hands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hands())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_hands())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bottom;
        break;
      }

      // repeated int32 bottom = 7;
      case 7: {
        if (tag == 58) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bottom())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_bottom())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_count;
        break;
      }

      // repeated int32 count = 8;
      case 8: {
        if (tag == 66) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_count())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_piles;
        break;
      }

      // optional int32 piles = 9;
      case 9: {
        if (tag == 72) {
         parse_piles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piles_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 10;
      case 10: {
        if (tag == 80) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCDeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCDeal)
  return false;
#undef DO_
}

void MsgNCDeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCDeal)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 banker = 2;
  if (this->banker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->banker(), output);
  }

  // optional int32 pos = 3;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // optional int32 ante = 4;
  if (this->ante() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ante(), output);
  }

  // optional int32 multiple = 5;
  if (this->multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->multiple(), output);
  }

  // repeated int32 hands = 6;
  if (this->hands_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hands_cached_byte_size_);
  }
  for (int i = 0; i < this->hands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->hands(i), output);
  }

  // repeated int32 bottom = 7;
  if (this->bottom_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bottom_cached_byte_size_);
  }
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bottom(i), output);
  }

  // repeated int32 count = 8;
  if (this->count_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_count_cached_byte_size_);
  }
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->count(i), output);
  }

  // optional int32 piles = 9;
  if (this->piles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->piles(), output);
  }

  // optional .proto3.pb_enum result = 10;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCDeal)
}

int MsgNCDeal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCDeal)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 banker = 2;
  if (this->banker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->banker());
  }

  // optional int32 pos = 3;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // optional int32 ante = 4;
  if (this->ante() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ante());
  }

  // optional int32 multiple = 5;
  if (this->multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiple());
  }

  // optional int32 piles = 9;
  if (this->piles() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->piles());
  }

  // optional .proto3.pb_enum result = 10;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated int32 hands = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->hands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hands(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hands_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 bottom = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->bottom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bottom(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bottom_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 count = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->count(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _count_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCDeal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCDeal*>(&from));
}

void MsgNCDeal::MergeFrom(const MsgNCDeal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCDeal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  hands_.MergeFrom(from.hands_);
  bottom_.MergeFrom(from.bottom_);
  count_.MergeFrom(from.count_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.banker() != 0) {
    set_banker(from.banker());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.ante() != 0) {
    set_ante(from.ante());
  }
  if (from.multiple() != 0) {
    set_multiple(from.multiple());
  }
  if (from.piles() != 0) {
    set_piles(from.piles());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCDeal::CopyFrom(const MsgNCDeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCDeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCDeal::IsInitialized() const {

  return true;
}

void MsgNCDeal::Swap(MsgNCDeal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCDeal::InternalSwap(MsgNCDeal* other) {
  std::swap(mid_, other->mid_);
  std::swap(banker_, other->banker_);
  std::swap(pos_, other->pos_);
  std::swap(ante_, other->ante_);
  std::swap(multiple_, other->multiple_);
  hands_.UnsafeArenaSwap(&other->hands_);
  bottom_.UnsafeArenaSwap(&other->bottom_);
  count_.UnsafeArenaSwap(&other->count_);
  std::swap(piles_, other->piles_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCDeal::GetTypeName() const {
  return "proto3.MsgNCDeal";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCDeal

// optional .proto3.pb_msg mid = 1;
void MsgNCDeal::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCDeal::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCDeal::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.mid)
}

// optional int32 banker = 2;
void MsgNCDeal::clear_banker() {
  banker_ = 0;
}
 ::google::protobuf::int32 MsgNCDeal::banker() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.banker)
  return banker_;
}
 void MsgNCDeal::set_banker(::google::protobuf::int32 value) {
  
  banker_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.banker)
}

// optional int32 pos = 3;
void MsgNCDeal::clear_pos() {
  pos_ = 0;
}
 ::google::protobuf::int32 MsgNCDeal::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.pos)
  return pos_;
}
 void MsgNCDeal::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.pos)
}

// optional int32 ante = 4;
void MsgNCDeal::clear_ante() {
  ante_ = 0;
}
 ::google::protobuf::int32 MsgNCDeal::ante() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.ante)
  return ante_;
}
 void MsgNCDeal::set_ante(::google::protobuf::int32 value) {
  
  ante_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.ante)
}

// optional int32 multiple = 5;
void MsgNCDeal::clear_multiple() {
  multiple_ = 0;
}
 ::google::protobuf::int32 MsgNCDeal::multiple() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.multiple)
  return multiple_;
}
 void MsgNCDeal::set_multiple(::google::protobuf::int32 value) {
  
  multiple_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.multiple)
}

// repeated int32 hands = 6;
int MsgNCDeal::hands_size() const {
  return hands_.size();
}
void MsgNCDeal::clear_hands() {
  hands_.Clear();
}
 ::google::protobuf::int32 MsgNCDeal::hands(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.hands)
  return hands_.Get(index);
}
 void MsgNCDeal::set_hands(int index, ::google::protobuf::int32 value) {
  hands_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.hands)
}
 void MsgNCDeal::add_hands(::google::protobuf::int32 value) {
  hands_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgNCDeal.hands)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgNCDeal::hands() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCDeal.hands)
  return hands_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgNCDeal::mutable_hands() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCDeal.hands)
  return &hands_;
}

// repeated int32 bottom = 7;
int MsgNCDeal::bottom_size() const {
  return bottom_.size();
}
void MsgNCDeal::clear_bottom() {
  bottom_.Clear();
}
 ::google::protobuf::int32 MsgNCDeal::bottom(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.bottom)
  return bottom_.Get(index);
}
 void MsgNCDeal::set_bottom(int index, ::google::protobuf::int32 value) {
  bottom_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.bottom)
}
 void MsgNCDeal::add_bottom(::google::protobuf::int32 value) {
  bottom_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgNCDeal.bottom)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgNCDeal::bottom() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCDeal.bottom)
  return bottom_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgNCDeal::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCDeal.bottom)
  return &bottom_;
}

// repeated int32 count = 8;
int MsgNCDeal::count_size() const {
  return count_.size();
}
void MsgNCDeal::clear_count() {
  count_.Clear();
}
 ::google::protobuf::int32 MsgNCDeal::count(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.count)
  return count_.Get(index);
}
 void MsgNCDeal::set_count(int index, ::google::protobuf::int32 value) {
  count_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.count)
}
 void MsgNCDeal::add_count(::google::protobuf::int32 value) {
  count_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgNCDeal.count)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgNCDeal::count() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCDeal.count)
  return count_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgNCDeal::mutable_count() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCDeal.count)
  return &count_;
}

// optional int32 piles = 9;
void MsgNCDeal::clear_piles() {
  piles_ = 0;
}
 ::google::protobuf::int32 MsgNCDeal::piles() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.piles)
  return piles_;
}
 void MsgNCDeal::set_piles(::google::protobuf::int32 value) {
  
  piles_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.piles)
}

// optional .proto3.pb_enum result = 10;
void MsgNCDeal::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCDeal::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDeal.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCDeal::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDeal.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNEngage::kMidFieldNumber;
const int MsgCNEngage::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNEngage::MsgCNEngage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNEngage)
}

void MsgCNEngage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNEngage::MsgCNEngage(const MsgCNEngage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNEngage)
}

void MsgCNEngage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  key_ = 0;
}

MsgCNEngage::~MsgCNEngage() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNEngage)
  SharedDtor();
}

void MsgCNEngage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNEngage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNEngage& MsgCNEngage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNEngage* MsgCNEngage::default_instance_ = NULL;

MsgCNEngage* MsgCNEngage::New(::google::protobuf::Arena* arena) const {
  MsgCNEngage* n = new MsgCNEngage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNEngage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNEngage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgCNEngage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgCNEngage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, key_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgCNEngage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNEngage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional int32 key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNEngage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNEngage)
  return false;
#undef DO_
}

void MsgCNEngage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNEngage)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 key = 2;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNEngage)
}

int MsgCNEngage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNEngage)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 key = 2;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNEngage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNEngage*>(&from));
}

void MsgCNEngage::MergeFrom(const MsgCNEngage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNEngage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
}

void MsgCNEngage::CopyFrom(const MsgCNEngage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNEngage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNEngage::IsInitialized() const {

  return true;
}

void MsgCNEngage::Swap(MsgCNEngage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNEngage::InternalSwap(MsgCNEngage* other) {
  std::swap(mid_, other->mid_);
  std::swap(key_, other->key_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNEngage::GetTypeName() const {
  return "proto3.MsgCNEngage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNEngage

// optional .proto3.pb_msg mid = 1;
void MsgCNEngage::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNEngage::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNEngage.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNEngage::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNEngage.mid)
}

// optional int32 key = 2;
void MsgCNEngage::clear_key() {
  key_ = 0;
}
 ::google::protobuf::int32 MsgCNEngage::key() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNEngage.key)
  return key_;
}
 void MsgCNEngage::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNEngage.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCEngage::kMidFieldNumber;
const int MsgNCEngage::kKeysFieldNumber;
const int MsgNCEngage::kBunchFieldNumber;
const int MsgNCEngage::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCEngage::MsgNCEngage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCEngage)
}

void MsgNCEngage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCEngage::MsgNCEngage(const MsgNCEngage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCEngage)
}

void MsgNCEngage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgNCEngage::~MsgNCEngage() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCEngage)
  SharedDtor();
}

void MsgNCEngage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCEngage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCEngage& MsgNCEngage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCEngage* MsgNCEngage::default_instance_ = NULL;

MsgNCEngage* MsgNCEngage::New(::google::protobuf::Arena* arena) const {
  MsgNCEngage* n = new MsgNCEngage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCEngage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCEngage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCEngage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCEngage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

  keys_.Clear();
  bunch_.Clear();
}

bool MsgNCEngage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCEngage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated int32 keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_keys())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bunch;
        break;
      }

      // repeated .proto3.bunch_t bunch = 3;
      case 3: {
        if (tag == 26) {
         parse_bunch:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_bunch;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 6;
      case 6: {
        if (tag == 48) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCEngage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCEngage)
  return false;
#undef DO_
}

void MsgNCEngage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCEngage)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // repeated int32 keys = 2;
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keys_cached_byte_size_);
  }
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->keys(i), output);
  }

  // repeated .proto3.bunch_t bunch = 3;
  for (unsigned int i = 0, n = this->bunch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bunch(i), output);
  }

  // optional .proto3.pb_enum result = 6;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCEngage)
}

int MsgNCEngage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCEngage)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 6;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated int32 keys = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->keys(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto3.bunch_t bunch = 3;
  total_size += 1 * this->bunch_size();
  for (int i = 0; i < this->bunch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bunch(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCEngage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCEngage*>(&from));
}

void MsgNCEngage::MergeFrom(const MsgNCEngage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCEngage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keys_.MergeFrom(from.keys_);
  bunch_.MergeFrom(from.bunch_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCEngage::CopyFrom(const MsgNCEngage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCEngage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCEngage::IsInitialized() const {

  return true;
}

void MsgNCEngage::Swap(MsgNCEngage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCEngage::InternalSwap(MsgNCEngage* other) {
  std::swap(mid_, other->mid_);
  keys_.UnsafeArenaSwap(&other->keys_);
  bunch_.UnsafeArenaSwap(&other->bunch_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCEngage::GetTypeName() const {
  return "proto3.MsgNCEngage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCEngage

// optional .proto3.pb_msg mid = 1;
void MsgNCEngage::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCEngage::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCEngage.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCEngage::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCEngage.mid)
}

// repeated int32 keys = 2;
int MsgNCEngage::keys_size() const {
  return keys_.size();
}
void MsgNCEngage::clear_keys() {
  keys_.Clear();
}
 ::google::protobuf::int32 MsgNCEngage::keys(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCEngage.keys)
  return keys_.Get(index);
}
 void MsgNCEngage::set_keys(int index, ::google::protobuf::int32 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgNCEngage.keys)
}
 void MsgNCEngage::add_keys(::google::protobuf::int32 value) {
  keys_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgNCEngage.keys)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgNCEngage::keys() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCEngage.keys)
  return keys_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgNCEngage::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCEngage.keys)
  return &keys_;
}

// repeated .proto3.bunch_t bunch = 3;
int MsgNCEngage::bunch_size() const {
  return bunch_.size();
}
void MsgNCEngage::clear_bunch() {
  bunch_.Clear();
}
const ::proto3::bunch_t& MsgNCEngage::bunch(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCEngage.bunch)
  return bunch_.Get(index);
}
::proto3::bunch_t* MsgNCEngage::mutable_bunch(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCEngage.bunch)
  return bunch_.Mutable(index);
}
::proto3::bunch_t* MsgNCEngage::add_bunch() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCEngage.bunch)
  return bunch_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >*
MsgNCEngage::mutable_bunch() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCEngage.bunch)
  return &bunch_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >&
MsgNCEngage::bunch() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCEngage.bunch)
  return bunch_;
}

// optional .proto3.pb_enum result = 6;
void MsgNCEngage::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCEngage::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCEngage.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCEngage::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCEngage.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNDiscard::kMidFieldNumber;
const int MsgCNDiscard::kBunchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNDiscard::MsgCNDiscard()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNDiscard)
}

void MsgCNDiscard::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bunch_ = const_cast< ::proto3::bunch_t*>(
      ::proto3::bunch_t::internal_default_instance());
#else
  bunch_ = const_cast< ::proto3::bunch_t*>(&::proto3::bunch_t::default_instance());
#endif
}

MsgCNDiscard::MsgCNDiscard(const MsgCNDiscard& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNDiscard)
}

void MsgCNDiscard::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  bunch_ = NULL;
}

MsgCNDiscard::~MsgCNDiscard() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNDiscard)
  SharedDtor();
}

void MsgCNDiscard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bunch_;
  }
}

void MsgCNDiscard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNDiscard& MsgCNDiscard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNDiscard* MsgCNDiscard::default_instance_ = NULL;

MsgCNDiscard* MsgCNDiscard::New(::google::protobuf::Arena* arena) const {
  MsgCNDiscard* n = new MsgCNDiscard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNDiscard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNDiscard)
  mid_ = 0;
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
}

bool MsgCNDiscard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNDiscard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bunch;
        break;
      }

      // optional .proto3.bunch_t bunch = 2;
      case 2: {
        if (tag == 18) {
         parse_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNDiscard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNDiscard)
  return false;
#undef DO_
}

void MsgCNDiscard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNDiscard)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->bunch_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNDiscard)
}

int MsgCNDiscard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNDiscard)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bunch_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNDiscard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNDiscard*>(&from));
}

void MsgCNDiscard::MergeFrom(const MsgCNDiscard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNDiscard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_bunch()) {
    mutable_bunch()->::proto3::bunch_t::MergeFrom(from.bunch());
  }
}

void MsgCNDiscard::CopyFrom(const MsgCNDiscard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNDiscard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNDiscard::IsInitialized() const {

  return true;
}

void MsgCNDiscard::Swap(MsgCNDiscard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNDiscard::InternalSwap(MsgCNDiscard* other) {
  std::swap(mid_, other->mid_);
  std::swap(bunch_, other->bunch_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNDiscard::GetTypeName() const {
  return "proto3.MsgCNDiscard";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNDiscard

// optional .proto3.pb_msg mid = 1;
void MsgCNDiscard::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNDiscard::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNDiscard.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNDiscard::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNDiscard.mid)
}

// optional .proto3.bunch_t bunch = 2;
bool MsgCNDiscard::has_bunch() const {
  return !_is_default_instance_ && bunch_ != NULL;
}
void MsgCNDiscard::clear_bunch() {
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
}
const ::proto3::bunch_t& MsgCNDiscard::bunch() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNDiscard.bunch)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bunch_ != NULL ? *bunch_ : *default_instance().bunch_;
#else
  return bunch_ != NULL ? *bunch_ : *default_instance_->bunch_;
#endif
}
::proto3::bunch_t* MsgCNDiscard::mutable_bunch() {
  
  if (bunch_ == NULL) {
    bunch_ = new ::proto3::bunch_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNDiscard.bunch)
  return bunch_;
}
::proto3::bunch_t* MsgCNDiscard::release_bunch() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNDiscard.bunch)
  
  ::proto3::bunch_t* temp = bunch_;
  bunch_ = NULL;
  return temp;
}
void MsgCNDiscard::set_allocated_bunch(::proto3::bunch_t* bunch) {
  delete bunch_;
  bunch_ = bunch;
  if (bunch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNDiscard.bunch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCDiscard::kMidFieldNumber;
const int MsgNCDiscard::kBunchFieldNumber;
const int MsgNCDiscard::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCDiscard::MsgNCDiscard()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCDiscard)
}

void MsgNCDiscard::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bunch_ = const_cast< ::proto3::bunch_t*>(
      ::proto3::bunch_t::internal_default_instance());
#else
  bunch_ = const_cast< ::proto3::bunch_t*>(&::proto3::bunch_t::default_instance());
#endif
}

MsgNCDiscard::MsgNCDiscard(const MsgNCDiscard& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCDiscard)
}

void MsgNCDiscard::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  bunch_ = NULL;
  result_ = 0;
}

MsgNCDiscard::~MsgNCDiscard() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCDiscard)
  SharedDtor();
}

void MsgNCDiscard::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bunch_;
  }
}

void MsgNCDiscard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCDiscard& MsgNCDiscard::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCDiscard* MsgNCDiscard::default_instance_ = NULL;

MsgNCDiscard* MsgNCDiscard::New(::google::protobuf::Arena* arena) const {
  MsgNCDiscard* n = new MsgNCDiscard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCDiscard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCDiscard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCDiscard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCDiscard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCDiscard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCDiscard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bunch;
        break;
      }

      // optional .proto3.bunch_t bunch = 2;
      case 2: {
        if (tag == 18) {
         parse_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCDiscard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCDiscard)
  return false;
#undef DO_
}

void MsgNCDiscard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCDiscard)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->bunch_, output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCDiscard)
}

int MsgNCDiscard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCDiscard)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bunch_);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCDiscard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCDiscard*>(&from));
}

void MsgNCDiscard::MergeFrom(const MsgNCDiscard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCDiscard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_bunch()) {
    mutable_bunch()->::proto3::bunch_t::MergeFrom(from.bunch());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCDiscard::CopyFrom(const MsgNCDiscard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCDiscard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCDiscard::IsInitialized() const {

  return true;
}

void MsgNCDiscard::Swap(MsgNCDiscard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCDiscard::InternalSwap(MsgNCDiscard* other) {
  std::swap(mid_, other->mid_);
  std::swap(bunch_, other->bunch_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCDiscard::GetTypeName() const {
  return "proto3.MsgNCDiscard";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCDiscard

// optional .proto3.pb_msg mid = 1;
void MsgNCDiscard::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCDiscard::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDiscard.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCDiscard::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDiscard.mid)
}

// optional .proto3.bunch_t bunch = 2;
bool MsgNCDiscard::has_bunch() const {
  return !_is_default_instance_ && bunch_ != NULL;
}
void MsgNCDiscard::clear_bunch() {
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
}
const ::proto3::bunch_t& MsgNCDiscard::bunch() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDiscard.bunch)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bunch_ != NULL ? *bunch_ : *default_instance().bunch_;
#else
  return bunch_ != NULL ? *bunch_ : *default_instance_->bunch_;
#endif
}
::proto3::bunch_t* MsgNCDiscard::mutable_bunch() {
  
  if (bunch_ == NULL) {
    bunch_ = new ::proto3::bunch_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCDiscard.bunch)
  return bunch_;
}
::proto3::bunch_t* MsgNCDiscard::release_bunch() {
  // @@protoc_insertion_point(field_release:proto3.MsgNCDiscard.bunch)
  
  ::proto3::bunch_t* temp = bunch_;
  bunch_ = NULL;
  return temp;
}
void MsgNCDiscard::set_allocated_bunch(::proto3::bunch_t* bunch) {
  delete bunch_;
  bunch_ = bunch;
  if (bunch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgNCDiscard.bunch)
}

// optional .proto3.pb_enum result = 3;
void MsgNCDiscard::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCDiscard::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDiscard.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCDiscard::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDiscard.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNMeld::kMidFieldNumber;
const int MsgCNMeld::kBunchFieldNumber;
const int MsgCNMeld::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNMeld::MsgCNMeld()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNMeld)
}

void MsgCNMeld::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bunch_ = const_cast< ::proto3::bunch_t*>(
      ::proto3::bunch_t::internal_default_instance());
#else
  bunch_ = const_cast< ::proto3::bunch_t*>(&::proto3::bunch_t::default_instance());
#endif
}

MsgCNMeld::MsgCNMeld(const MsgCNMeld& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNMeld)
}

void MsgCNMeld::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  bunch_ = NULL;
}

MsgCNMeld::~MsgCNMeld() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNMeld)
  SharedDtor();
}

void MsgCNMeld::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bunch_;
  }
}

void MsgCNMeld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNMeld& MsgCNMeld::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNMeld* MsgCNMeld::default_instance_ = NULL;

MsgCNMeld* MsgCNMeld::New(::google::protobuf::Arena* arena) const {
  MsgCNMeld* n = new MsgCNMeld;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNMeld::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNMeld)
  mid_ = 0;
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
  extra_.Clear();
}

bool MsgCNMeld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNMeld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bunch;
        break;
      }

      // optional .proto3.bunch_t bunch = 2;
      case 2: {
        if (tag == 18) {
         parse_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extra;
        break;
      }

      // repeated .proto3.bunch_t extra = 3;
      case 3: {
        if (tag == 26) {
         parse_extra:
          DO_(input->IncrementRecursionDepth());
         parse_loop_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_extra;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNMeld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNMeld)
  return false;
#undef DO_
}

void MsgCNMeld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNMeld)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->bunch_, output);
  }

  // repeated .proto3.bunch_t extra = 3;
  for (unsigned int i = 0, n = this->extra_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->extra(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNMeld)
}

int MsgCNMeld::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNMeld)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bunch_);
  }

  // repeated .proto3.bunch_t extra = 3;
  total_size += 1 * this->extra_size();
  for (int i = 0; i < this->extra_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNMeld::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNMeld*>(&from));
}

void MsgCNMeld::MergeFrom(const MsgCNMeld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNMeld)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  extra_.MergeFrom(from.extra_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_bunch()) {
    mutable_bunch()->::proto3::bunch_t::MergeFrom(from.bunch());
  }
}

void MsgCNMeld::CopyFrom(const MsgCNMeld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNMeld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNMeld::IsInitialized() const {

  return true;
}

void MsgCNMeld::Swap(MsgCNMeld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNMeld::InternalSwap(MsgCNMeld* other) {
  std::swap(mid_, other->mid_);
  std::swap(bunch_, other->bunch_);
  extra_.UnsafeArenaSwap(&other->extra_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNMeld::GetTypeName() const {
  return "proto3.MsgCNMeld";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNMeld

// optional .proto3.pb_msg mid = 1;
void MsgCNMeld::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNMeld::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNMeld.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNMeld::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNMeld.mid)
}

// optional .proto3.bunch_t bunch = 2;
bool MsgCNMeld::has_bunch() const {
  return !_is_default_instance_ && bunch_ != NULL;
}
void MsgCNMeld::clear_bunch() {
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
}
const ::proto3::bunch_t& MsgCNMeld::bunch() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNMeld.bunch)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bunch_ != NULL ? *bunch_ : *default_instance().bunch_;
#else
  return bunch_ != NULL ? *bunch_ : *default_instance_->bunch_;
#endif
}
::proto3::bunch_t* MsgCNMeld::mutable_bunch() {
  
  if (bunch_ == NULL) {
    bunch_ = new ::proto3::bunch_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNMeld.bunch)
  return bunch_;
}
::proto3::bunch_t* MsgCNMeld::release_bunch() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNMeld.bunch)
  
  ::proto3::bunch_t* temp = bunch_;
  bunch_ = NULL;
  return temp;
}
void MsgCNMeld::set_allocated_bunch(::proto3::bunch_t* bunch) {
  delete bunch_;
  bunch_ = bunch;
  if (bunch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNMeld.bunch)
}

// repeated .proto3.bunch_t extra = 3;
int MsgCNMeld::extra_size() const {
  return extra_.size();
}
void MsgCNMeld::clear_extra() {
  extra_.Clear();
}
const ::proto3::bunch_t& MsgCNMeld::extra(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNMeld.extra)
  return extra_.Get(index);
}
::proto3::bunch_t* MsgCNMeld::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNMeld.extra)
  return extra_.Mutable(index);
}
::proto3::bunch_t* MsgCNMeld::add_extra() {
  // @@protoc_insertion_point(field_add:proto3.MsgCNMeld.extra)
  return extra_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >*
MsgCNMeld::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgCNMeld.extra)
  return &extra_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::bunch_t >&
MsgCNMeld::extra() const {
  // @@protoc_insertion_point(field_list:proto3.MsgCNMeld.extra)
  return extra_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCMeld::kMidFieldNumber;
const int MsgNCMeld::kBunchFieldNumber;
const int MsgNCMeld::kFromFieldNumber;
const int MsgNCMeld::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCMeld::MsgNCMeld()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCMeld)
}

void MsgNCMeld::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bunch_ = const_cast< ::proto3::bunch_t*>(
      ::proto3::bunch_t::internal_default_instance());
#else
  bunch_ = const_cast< ::proto3::bunch_t*>(&::proto3::bunch_t::default_instance());
#endif
}

MsgNCMeld::MsgNCMeld(const MsgNCMeld& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCMeld)
}

void MsgNCMeld::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  bunch_ = NULL;
  from_ = 0;
  result_ = 0;
}

MsgNCMeld::~MsgNCMeld() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCMeld)
  SharedDtor();
}

void MsgNCMeld::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bunch_;
  }
}

void MsgNCMeld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCMeld& MsgNCMeld::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCMeld* MsgNCMeld::default_instance_ = NULL;

MsgNCMeld* MsgNCMeld::New(::google::protobuf::Arena* arena) const {
  MsgNCMeld* n = new MsgNCMeld;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCMeld::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCMeld)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCMeld, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCMeld*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCMeld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCMeld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bunch;
        break;
      }

      // optional .proto3.bunch_t bunch = 2;
      case 2: {
        if (tag == 18) {
         parse_bunch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bunch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from;
        break;
      }

      // optional int32 from = 3;
      case 3: {
        if (tag == 24) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCMeld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCMeld)
  return false;
#undef DO_
}

void MsgNCMeld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCMeld)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->bunch_, output);
  }

  // optional int32 from = 3;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->from(), output);
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCMeld)
}

int MsgNCMeld::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCMeld)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.bunch_t bunch = 2;
  if (this->has_bunch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bunch_);
  }

  // optional int32 from = 3;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from());
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCMeld::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCMeld*>(&from));
}

void MsgNCMeld::MergeFrom(const MsgNCMeld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCMeld)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.has_bunch()) {
    mutable_bunch()->::proto3::bunch_t::MergeFrom(from.bunch());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCMeld::CopyFrom(const MsgNCMeld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCMeld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCMeld::IsInitialized() const {

  return true;
}

void MsgNCMeld::Swap(MsgNCMeld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCMeld::InternalSwap(MsgNCMeld* other) {
  std::swap(mid_, other->mid_);
  std::swap(bunch_, other->bunch_);
  std::swap(from_, other->from_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCMeld::GetTypeName() const {
  return "proto3.MsgNCMeld";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCMeld

// optional .proto3.pb_msg mid = 1;
void MsgNCMeld::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCMeld::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCMeld.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCMeld::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCMeld.mid)
}

// optional .proto3.bunch_t bunch = 2;
bool MsgNCMeld::has_bunch() const {
  return !_is_default_instance_ && bunch_ != NULL;
}
void MsgNCMeld::clear_bunch() {
  if (GetArenaNoVirtual() == NULL && bunch_ != NULL) delete bunch_;
  bunch_ = NULL;
}
const ::proto3::bunch_t& MsgNCMeld::bunch() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCMeld.bunch)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bunch_ != NULL ? *bunch_ : *default_instance().bunch_;
#else
  return bunch_ != NULL ? *bunch_ : *default_instance_->bunch_;
#endif
}
::proto3::bunch_t* MsgNCMeld::mutable_bunch() {
  
  if (bunch_ == NULL) {
    bunch_ = new ::proto3::bunch_t;
  }
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCMeld.bunch)
  return bunch_;
}
::proto3::bunch_t* MsgNCMeld::release_bunch() {
  // @@protoc_insertion_point(field_release:proto3.MsgNCMeld.bunch)
  
  ::proto3::bunch_t* temp = bunch_;
  bunch_ = NULL;
  return temp;
}
void MsgNCMeld::set_allocated_bunch(::proto3::bunch_t* bunch) {
  delete bunch_;
  bunch_ = bunch;
  if (bunch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgNCMeld.bunch)
}

// optional int32 from = 3;
void MsgNCMeld::clear_from() {
  from_ = 0;
}
 ::google::protobuf::int32 MsgNCMeld::from() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCMeld.from)
  return from_;
}
 void MsgNCMeld::set_from(::google::protobuf::int32 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCMeld.from)
}

// optional .proto3.pb_enum result = 4;
void MsgNCMeld::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCMeld::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCMeld.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCMeld::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCMeld.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCDraw::kMidFieldNumber;
const int MsgNCDraw::kPosFieldNumber;
const int MsgNCDraw::kCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCDraw::MsgNCDraw()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCDraw)
}

void MsgNCDraw::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCDraw::MsgNCDraw(const MsgNCDraw& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCDraw)
}

void MsgNCDraw::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  pos_ = 0;
  card_ = 0;
}

MsgNCDraw::~MsgNCDraw() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCDraw)
  SharedDtor();
}

void MsgNCDraw::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCDraw& MsgNCDraw::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCDraw* MsgNCDraw::default_instance_ = NULL;

MsgNCDraw* MsgNCDraw::New(::google::protobuf::Arena* arena) const {
  MsgNCDraw* n = new MsgNCDraw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCDraw)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCDraw, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCDraw*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, card_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_card;
        break;
      }

      // optional int32 card = 3;
      case 3: {
        if (tag == 24) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCDraw)
  return false;
#undef DO_
}

void MsgNCDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCDraw)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional int32 card = 3;
  if (this->card() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCDraw)
}

int MsgNCDraw::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCDraw)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // optional int32 card = 3;
  if (this->card() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->card());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCDraw::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCDraw*>(&from));
}

void MsgNCDraw::MergeFrom(const MsgNCDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCDraw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.card() != 0) {
    set_card(from.card());
  }
}

void MsgNCDraw::CopyFrom(const MsgNCDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCDraw::IsInitialized() const {

  return true;
}

void MsgNCDraw::Swap(MsgNCDraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCDraw::InternalSwap(MsgNCDraw* other) {
  std::swap(mid_, other->mid_);
  std::swap(pos_, other->pos_);
  std::swap(card_, other->card_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCDraw::GetTypeName() const {
  return "proto3.MsgNCDraw";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCDraw

// optional .proto3.pb_msg mid = 1;
void MsgNCDraw::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCDraw::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDraw.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCDraw::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDraw.mid)
}

// optional int32 pos = 2;
void MsgNCDraw::clear_pos() {
  pos_ = 0;
}
 ::google::protobuf::int32 MsgNCDraw::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDraw.pos)
  return pos_;
}
 void MsgNCDraw::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDraw.pos)
}

// optional int32 card = 3;
void MsgNCDraw::clear_card() {
  card_ = 0;
}
 ::google::protobuf::int32 MsgNCDraw::card() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDraw.card)
  return card_;
}
 void MsgNCDraw::set_card(::google::protobuf::int32 value) {
  
  card_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDraw.card)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNDismissSync::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNDismissSync::MsgCNDismissSync()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNDismissSync)
}

void MsgCNDismissSync::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNDismissSync::MsgCNDismissSync(const MsgCNDismissSync& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNDismissSync)
}

void MsgCNDismissSync::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgCNDismissSync::~MsgCNDismissSync() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNDismissSync)
  SharedDtor();
}

void MsgCNDismissSync::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNDismissSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNDismissSync& MsgCNDismissSync::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNDismissSync* MsgCNDismissSync::default_instance_ = NULL;

MsgCNDismissSync* MsgCNDismissSync::New(::google::protobuf::Arena* arena) const {
  MsgCNDismissSync* n = new MsgCNDismissSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNDismissSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNDismissSync)
  mid_ = 0;
}

bool MsgCNDismissSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNDismissSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNDismissSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNDismissSync)
  return false;
#undef DO_
}

void MsgCNDismissSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNDismissSync)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNDismissSync)
}

int MsgCNDismissSync::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNDismissSync)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNDismissSync::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNDismissSync*>(&from));
}

void MsgCNDismissSync::MergeFrom(const MsgCNDismissSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNDismissSync)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgCNDismissSync::CopyFrom(const MsgCNDismissSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNDismissSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNDismissSync::IsInitialized() const {

  return true;
}

void MsgCNDismissSync::Swap(MsgCNDismissSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNDismissSync::InternalSwap(MsgCNDismissSync* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNDismissSync::GetTypeName() const {
  return "proto3.MsgCNDismissSync";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNDismissSync

// optional .proto3.pb_msg mid = 1;
void MsgCNDismissSync::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNDismissSync::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNDismissSync.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNDismissSync::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNDismissSync.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCDismissSync::kMidFieldNumber;
const int MsgNCDismissSync::kPosFieldNumber;
const int MsgNCDismissSync::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCDismissSync::MsgNCDismissSync()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCDismissSync)
}

void MsgNCDismissSync::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCDismissSync::MsgNCDismissSync(const MsgNCDismissSync& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCDismissSync)
}

void MsgNCDismissSync::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  pos_ = 0;
  result_ = 0;
}

MsgNCDismissSync::~MsgNCDismissSync() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCDismissSync)
  SharedDtor();
}

void MsgNCDismissSync::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCDismissSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCDismissSync& MsgNCDismissSync::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCDismissSync* MsgNCDismissSync::default_instance_ = NULL;

MsgNCDismissSync* MsgNCDismissSync::New(::google::protobuf::Arena* arena) const {
  MsgNCDismissSync* n = new MsgNCDismissSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCDismissSync::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCDismissSync)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCDismissSync, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCDismissSync*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCDismissSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCDismissSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCDismissSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCDismissSync)
  return false;
#undef DO_
}

void MsgNCDismissSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCDismissSync)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCDismissSync)
}

int MsgNCDismissSync::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCDismissSync)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCDismissSync::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCDismissSync*>(&from));
}

void MsgNCDismissSync::MergeFrom(const MsgNCDismissSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCDismissSync)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCDismissSync::CopyFrom(const MsgNCDismissSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCDismissSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCDismissSync::IsInitialized() const {

  return true;
}

void MsgNCDismissSync::Swap(MsgNCDismissSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCDismissSync::InternalSwap(MsgNCDismissSync* other) {
  std::swap(mid_, other->mid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCDismissSync::GetTypeName() const {
  return "proto3.MsgNCDismissSync";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCDismissSync

// optional .proto3.pb_msg mid = 1;
void MsgNCDismissSync::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCDismissSync::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissSync.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCDismissSync::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissSync.mid)
}

// optional int32 pos = 2;
void MsgNCDismissSync::clear_pos() {
  pos_ = 0;
}
 ::google::protobuf::int32 MsgNCDismissSync::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissSync.pos)
  return pos_;
}
 void MsgNCDismissSync::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissSync.pos)
}

// optional .proto3.pb_enum result = 3;
void MsgNCDismissSync::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCDismissSync::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissSync.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCDismissSync::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissSync.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNDismissAck::kMidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNDismissAck::MsgCNDismissAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNDismissAck)
}

void MsgCNDismissAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNDismissAck::MsgCNDismissAck(const MsgCNDismissAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNDismissAck)
}

void MsgCNDismissAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
}

MsgCNDismissAck::~MsgCNDismissAck() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNDismissAck)
  SharedDtor();
}

void MsgCNDismissAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNDismissAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNDismissAck& MsgCNDismissAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNDismissAck* MsgCNDismissAck::default_instance_ = NULL;

MsgCNDismissAck* MsgCNDismissAck::New(::google::protobuf::Arena* arena) const {
  MsgCNDismissAck* n = new MsgCNDismissAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNDismissAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNDismissAck)
  mid_ = 0;
}

bool MsgCNDismissAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNDismissAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNDismissAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNDismissAck)
  return false;
#undef DO_
}

void MsgCNDismissAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNDismissAck)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNDismissAck)
}

int MsgCNDismissAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNDismissAck)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNDismissAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNDismissAck*>(&from));
}

void MsgCNDismissAck::MergeFrom(const MsgCNDismissAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNDismissAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
}

void MsgCNDismissAck::CopyFrom(const MsgCNDismissAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNDismissAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNDismissAck::IsInitialized() const {

  return true;
}

void MsgCNDismissAck::Swap(MsgCNDismissAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNDismissAck::InternalSwap(MsgCNDismissAck* other) {
  std::swap(mid_, other->mid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNDismissAck::GetTypeName() const {
  return "proto3.MsgCNDismissAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNDismissAck

// optional .proto3.pb_msg mid = 1;
void MsgCNDismissAck::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNDismissAck::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNDismissAck.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNDismissAck::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNDismissAck.mid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCDismissAck::kMidFieldNumber;
const int MsgNCDismissAck::kPosFieldNumber;
const int MsgNCDismissAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCDismissAck::MsgNCDismissAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCDismissAck)
}

void MsgNCDismissAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCDismissAck::MsgNCDismissAck(const MsgNCDismissAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCDismissAck)
}

void MsgNCDismissAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  pos_ = 0;
  result_ = 0;
}

MsgNCDismissAck::~MsgNCDismissAck() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCDismissAck)
  SharedDtor();
}

void MsgNCDismissAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCDismissAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCDismissAck& MsgNCDismissAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCDismissAck* MsgNCDismissAck::default_instance_ = NULL;

MsgNCDismissAck* MsgNCDismissAck::New(::google::protobuf::Arena* arena) const {
  MsgNCDismissAck* n = new MsgNCDismissAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCDismissAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCDismissAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCDismissAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCDismissAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgNCDismissAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCDismissAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCDismissAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCDismissAck)
  return false;
#undef DO_
}

void MsgNCDismissAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCDismissAck)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCDismissAck)
}

int MsgNCDismissAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCDismissAck)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional int32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCDismissAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCDismissAck*>(&from));
}

void MsgNCDismissAck::MergeFrom(const MsgNCDismissAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCDismissAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCDismissAck::CopyFrom(const MsgNCDismissAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCDismissAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCDismissAck::IsInitialized() const {

  return true;
}

void MsgNCDismissAck::Swap(MsgNCDismissAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCDismissAck::InternalSwap(MsgNCDismissAck* other) {
  std::swap(mid_, other->mid_);
  std::swap(pos_, other->pos_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCDismissAck::GetTypeName() const {
  return "proto3.MsgNCDismissAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCDismissAck

// optional .proto3.pb_msg mid = 1;
void MsgNCDismissAck::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCDismissAck::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissAck.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCDismissAck::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissAck.mid)
}

// optional int32 pos = 2;
void MsgNCDismissAck::clear_pos() {
  pos_ = 0;
}
 ::google::protobuf::int32 MsgNCDismissAck::pos() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissAck.pos)
  return pos_;
}
 void MsgNCDismissAck::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissAck.pos)
}

// optional .proto3.pb_enum result = 3;
void MsgNCDismissAck::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCDismissAck::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCDismissAck.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCDismissAck::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCDismissAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCSettle::kMidFieldNumber;
const int MsgNCSettle::kPlayFieldNumber;
const int MsgNCSettle::kPileFieldNumber;
const int MsgNCSettle::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCSettle::MsgNCSettle()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCSettle)
}

void MsgNCSettle::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCSettle::MsgNCSettle(const MsgNCSettle& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCSettle)
}

void MsgNCSettle::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgNCSettle::~MsgNCSettle() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCSettle)
  SharedDtor();
}

void MsgNCSettle::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCSettle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCSettle& MsgNCSettle::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCSettle* MsgNCSettle::default_instance_ = NULL;

MsgNCSettle* MsgNCSettle::New(::google::protobuf::Arena* arena) const {
  MsgNCSettle* n = new MsgNCSettle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCSettle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCSettle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCSettle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCSettle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

  play_.Clear();
  pile_.Clear();
}

bool MsgNCSettle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCSettle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_play;
        break;
      }

      // repeated .proto3.play_t play = 2;
      case 2: {
        if (tag == 18) {
         parse_play:
          DO_(input->IncrementRecursionDepth());
         parse_loop_play:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_play()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_play;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_pile;
        break;
      }

      // repeated int32 pile = 3;
      case 3: {
        if (tag == 26) {
         parse_pile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pile())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_pile())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCSettle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCSettle)
  return false;
#undef DO_
}

void MsgNCSettle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCSettle)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // repeated .proto3.play_t play = 2;
  for (unsigned int i = 0, n = this->play_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->play(i), output);
  }

  // repeated int32 pile = 3;
  if (this->pile_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pile_cached_byte_size_);
  }
  for (int i = 0; i < this->pile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pile(i), output);
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCSettle)
}

int MsgNCSettle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCSettle)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.play_t play = 2;
  total_size += 1 * this->play_size();
  for (int i = 0; i < this->play_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->play(i));
  }

  // repeated int32 pile = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pile_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pile(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pile_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCSettle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCSettle*>(&from));
}

void MsgNCSettle::MergeFrom(const MsgNCSettle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCSettle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  play_.MergeFrom(from.play_);
  pile_.MergeFrom(from.pile_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCSettle::CopyFrom(const MsgNCSettle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCSettle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCSettle::IsInitialized() const {

  return true;
}

void MsgNCSettle::Swap(MsgNCSettle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCSettle::InternalSwap(MsgNCSettle* other) {
  std::swap(mid_, other->mid_);
  play_.UnsafeArenaSwap(&other->play_);
  pile_.UnsafeArenaSwap(&other->pile_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCSettle::GetTypeName() const {
  return "proto3.MsgNCSettle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCSettle

// optional .proto3.pb_msg mid = 1;
void MsgNCSettle::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCSettle::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCSettle::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCSettle.mid)
}

// repeated .proto3.play_t play = 2;
int MsgNCSettle::play_size() const {
  return play_.size();
}
void MsgNCSettle::clear_play() {
  play_.Clear();
}
const ::proto3::play_t& MsgNCSettle::play(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.play)
  return play_.Get(index);
}
::proto3::play_t* MsgNCSettle::mutable_play(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCSettle.play)
  return play_.Mutable(index);
}
::proto3::play_t* MsgNCSettle::add_play() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCSettle.play)
  return play_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::play_t >*
MsgNCSettle::mutable_play() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCSettle.play)
  return &play_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::play_t >&
MsgNCSettle::play() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCSettle.play)
  return play_;
}

// repeated int32 pile = 3;
int MsgNCSettle::pile_size() const {
  return pile_.size();
}
void MsgNCSettle::clear_pile() {
  pile_.Clear();
}
 ::google::protobuf::int32 MsgNCSettle::pile(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.pile)
  return pile_.Get(index);
}
 void MsgNCSettle::set_pile(int index, ::google::protobuf::int32 value) {
  pile_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3.MsgNCSettle.pile)
}
 void MsgNCSettle::add_pile(::google::protobuf::int32 value) {
  pile_.Add(value);
  // @@protoc_insertion_point(field_add:proto3.MsgNCSettle.pile)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgNCSettle::pile() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCSettle.pile)
  return pile_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgNCSettle::mutable_pile() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCSettle.pile)
  return &pile_;
}

// optional .proto3.pb_enum result = 4;
void MsgNCSettle::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCSettle::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCSettle.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCSettle::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCSettle.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgNCFinish::kMidFieldNumber;
const int MsgNCFinish::kPlayFieldNumber;
const int MsgNCFinish::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgNCFinish::MsgNCFinish()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgNCFinish)
}

void MsgNCFinish::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgNCFinish::MsgNCFinish(const MsgNCFinish& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgNCFinish)
}

void MsgNCFinish::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mid_ = 0;
  result_ = 0;
}

MsgNCFinish::~MsgNCFinish() {
  // @@protoc_insertion_point(destructor:proto3.MsgNCFinish)
  SharedDtor();
}

void MsgNCFinish::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgNCFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgNCFinish& MsgNCFinish::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgNCFinish* MsgNCFinish::default_instance_ = NULL;

MsgNCFinish* MsgNCFinish::New(::google::protobuf::Arena* arena) const {
  MsgNCFinish* n = new MsgNCFinish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgNCFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgNCFinish)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgNCFinish, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgNCFinish*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mid_, result_);

#undef ZR_HELPER_
#undef ZR_

  play_.Clear();
}

bool MsgNCFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgNCFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_play;
        break;
      }

      // repeated .proto3.play_t play = 2;
      case 2: {
        if (tag == 18) {
         parse_play:
          DO_(input->IncrementRecursionDepth());
         parse_loop_play:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_play()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_play;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .proto3.pb_enum result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::proto3::pb_enum >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgNCFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgNCFinish)
  return false;
#undef DO_
}

void MsgNCFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgNCFinish)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // repeated .proto3.play_t play = 2;
  for (unsigned int i = 0, n = this->play_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->play(i), output);
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgNCFinish)
}

int MsgNCFinish::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgNCFinish)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional .proto3.pb_enum result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated .proto3.play_t play = 2;
  total_size += 1 * this->play_size();
  for (int i = 0; i < this->play_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->play(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNCFinish::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgNCFinish*>(&from));
}

void MsgNCFinish::MergeFrom(const MsgNCFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgNCFinish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  play_.MergeFrom(from.play_);
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void MsgNCFinish::CopyFrom(const MsgNCFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgNCFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNCFinish::IsInitialized() const {

  return true;
}

void MsgNCFinish::Swap(MsgNCFinish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgNCFinish::InternalSwap(MsgNCFinish* other) {
  std::swap(mid_, other->mid_);
  play_.UnsafeArenaSwap(&other->play_);
  std::swap(result_, other->result_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgNCFinish::GetTypeName() const {
  return "proto3.MsgNCFinish";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgNCFinish

// optional .proto3.pb_msg mid = 1;
void MsgNCFinish::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgNCFinish::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCFinish.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgNCFinish::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCFinish.mid)
}

// repeated .proto3.play_t play = 2;
int MsgNCFinish::play_size() const {
  return play_.size();
}
void MsgNCFinish::clear_play() {
  play_.Clear();
}
const ::proto3::play_t& MsgNCFinish::play(int index) const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCFinish.play)
  return play_.Get(index);
}
::proto3::play_t* MsgNCFinish::mutable_play(int index) {
  // @@protoc_insertion_point(field_mutable:proto3.MsgNCFinish.play)
  return play_.Mutable(index);
}
::proto3::play_t* MsgNCFinish::add_play() {
  // @@protoc_insertion_point(field_add:proto3.MsgNCFinish.play)
  return play_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3::play_t >*
MsgNCFinish::mutable_play() {
  // @@protoc_insertion_point(field_mutable_list:proto3.MsgNCFinish.play)
  return &play_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3::play_t >&
MsgNCFinish::play() const {
  // @@protoc_insertion_point(field_list:proto3.MsgNCFinish.play)
  return play_;
}

// optional .proto3.pb_enum result = 3;
void MsgNCFinish::clear_result() {
  result_ = 0;
}
 ::proto3::pb_enum MsgNCFinish::result() const {
  // @@protoc_insertion_point(field_get:proto3.MsgNCFinish.result)
  return static_cast< ::proto3::pb_enum >(result_);
}
 void MsgNCFinish::set_result(::proto3::pb_enum value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgNCFinish.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCNStats::kMidFieldNumber;
const int MsgCNStats::kKeyFieldNumber;
const int MsgCNStats::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCNStats::MsgCNStats()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3.MsgCNStats)
}

void MsgCNStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgCNStats::MsgCNStats(const MsgCNStats& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3.MsgCNStats)
}

void MsgCNStats::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgCNStats::~MsgCNStats() {
  // @@protoc_insertion_point(destructor:proto3.MsgCNStats)
  SharedDtor();
}

void MsgCNStats::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgCNStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgCNStats& MsgCNStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
#endif
  return *default_instance_;
}

MsgCNStats* MsgCNStats::default_instance_ = NULL;

MsgCNStats* MsgCNStats::New(::google::protobuf::Arena* arena) const {
  MsgCNStats* n = new MsgCNStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCNStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3.MsgCNStats)
  mid_ = 0;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgCNStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3.MsgCNStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto3.pb_msg mid = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mid(static_cast< ::proto3::pb_msg >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCNStats.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3.MsgCNStats.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3.MsgCNStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3.MsgCNStats)
  return false;
#undef DO_
}

void MsgCNStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3.MsgCNStats)
  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mid(), output);
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCNStats.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3.MsgCNStats.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3.MsgCNStats)
}

int MsgCNStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto3.MsgCNStats)
  int total_size = 0;

  // optional .proto3.pb_msg mid = 1;
  if (this->mid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mid());
  }

  // optional string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCNStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgCNStats*>(&from));
}

void MsgCNStats::MergeFrom(const MsgCNStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3.MsgCNStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mid() != 0) {
    set_mid(from.mid());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MsgCNStats::CopyFrom(const MsgCNStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3.MsgCNStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCNStats::IsInitialized() const {

  return true;
}

void MsgCNStats::Swap(MsgCNStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCNStats::InternalSwap(MsgCNStats* other) {
  std::swap(mid_, other->mid_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgCNStats::GetTypeName() const {
  return "proto3.MsgCNStats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCNStats

// optional .proto3.pb_msg mid = 1;
void MsgCNStats::clear_mid() {
  mid_ = 0;
}
 ::proto3::pb_msg MsgCNStats::mid() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNStats.mid)
  return static_cast< ::proto3::pb_msg >(mid_);
}
 void MsgCNStats::set_mid(::proto3::pb_msg value) {
  
  mid_ = value;
  // @@protoc_insertion_point(field_set:proto3.MsgCNStats.mid)
}

// optional string key = 2;
void MsgCNStats::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCNStats::key() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNStats.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNStats::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCNStats.key)
}
 void MsgCNStats::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCNStats.key)
}
 void MsgCNStats::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCNStats.key)
}
 ::std::string* MsgCNStats::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNStats.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCNStats::release_key() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNStats.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNStats::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNStats.key)
}

// optional string value = 3;
void MsgCNStats::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgCNStats::value() const {
  // @@protoc_insertion_point(field_get:proto3.MsgCNStats.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNStats::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3.MsgCNStats.value)
}
 void MsgCNStats::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3.MsgCNStats.value)
}
 void MsgCNStats::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3.MsgCNStats.value)
}
 ::std::string* MsgCNStats::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:proto3.MsgCNStats.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgCNStats::release_value() {
  // @@protoc_insertion_point(field_release:proto3.MsgCNStats.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgCNStats::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto3.MsgCNStats.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3

// @@protoc_insertion_point(global_scope)
