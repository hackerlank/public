// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIGcHJvdG8zIlYKCWtleV92YWx1ZRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKAkSHQoEaWtleRgDIAEoDjIPLnByb3RvMy5w",
            "Yl9lbnVtEg4KBml2YWx1ZRgEIAEoBSKeAQoGdXNlcl90EgsKA3VpZBgBIAEo",
            "CRIMCgRmbGFnGAIgASgFEiEKCGRldl90eXBlGAMgASgOMg8ucHJvdG8zLnBi",
            "X2VudW0SDwoHYWNjb3VudBgEIAEoCRIMCgRuYW1lGAUgASgJEgwKBHBzd2QY",
            "BiABKAkSDgoGZ2VuZGVyGAcgASgFEgsKA2FnZRgIIAEoBRIMCgR1ZGlkGAkg",
            "ASgJIqkBCghwbGF5ZXJfdBILCgN1aWQYASABKAkSCwoDcGlkGAIgASgNEg0K",
            "BWxldmVsGAMgASgFEgoKAnhwGAQgASgFEg4KBnNpbHZlchgFIAEoBRIMCgRn",
            "b2xkGAYgASgFEg4KBmVuZXJneRgHIAEoBRIbCgR3aW5zGAggAygLMg0ucHJv",
            "dG8zLndpbl90Eh0KBWFjaHZzGAkgAygLMg4ucHJvdG8zLmFjaHZfdCJZCgV3",
            "aW5fdBILCgN1aWQYASABKAkSCwoDZ2lkGAIgASgFEgsKA3dpbhgDIAEoBRIM",
            "CgRsb3NlGAQgASgFEgwKBGRyYXcYBSABKAUSDQoFc2NvcmUYBiABKAUiUQoG",
            "YWNodl90Eh0KBHR5cGUYASABKA4yDy5wcm90bzMucGJfZW51bRIMCgRuYW1l",
            "GAIgASgJEgsKA2tleRgDIAEoBRINCgV2YWx1ZRgEIAEoBSL3AQoGZ2FtZV90",
            "EhsKAmlkGAEgASgOMg8ucHJvdG8zLnBiX2VudW0SDwoHdmVyc2lvbhgCIAEo",
            "DRIKCgJpcBgDIAEoCRIMCgRwb3J0GAQgASgNEhAKCG9jY3VwaWVkGAUgASgF",
            "EhAKCGNhcGFjaXR5GAYgASgFEgwKBGRlc2MYByABKAkSDgoGc3RhdHVzGAgg",
            "ASgFEhUKDW9wZW5uaW5nX3RpbWUYCSABKA0SFgoObWFpbnRhaW5fc3RhcnQY",
            "CiABKA0SFAoMbWFpbnRhaW5fZW5kGAsgASgNEh4KBXJ1bGVzGAwgAygOMg8u",
            "cHJvdG8zLnBiX2VudW0i6AEKB2xvYmJ5X3QSDwoHdmVyc2lvbhgBIAEoDRIK",
            "CgJpcBgCIAEoCRIMCgRwb3J0GAMgASgNEhAKCG9jY3VwaWVkGAQgASgFEhAK",
            "CGNhcGFjaXR5GAUgASgFEgwKBGRlc2MYBiABKAkSEAoIYnVsbGV0aW4YByAB",
            "KAkSDgoGc3RhdHVzGAggASgFEhYKDm1haW50YWluX3N0YXJ0GAkgASgNEhQK",
            "DG1haW50YWluX2VuZBgKIAEoDRIRCgl0aW1lX3pvbmUYCyABKA0SHQoFZ2Ft",
            "ZXMYDCADKAsyDi5wcm90bzMuZ2FtZV90ImQKB2J1bmNoX3QSHQoEdHlwZRgB",
            "IAEoDjIPLnByb3RvMy5wYl9lbnVtEgsKA3BvcxgCIAEoBRINCgVwYXducxgD",
            "IAMoBRIeCgVjaGlsZBgEIAMoCzIPLnByb3RvMy5idW5jaF90IpkCCgZwbGF5",
            "X3QSIAoGcGxheWVyGAEgASgLMhAucHJvdG8zLnBsYXllcl90Eg0KBWhhbmRz",
            "GAIgAygFEhAKCGRpc2NhcmRzGAMgAygFEh4KBWJ1bmNoGAQgAygLMg8ucHJv",
            "dG8zLmJ1bmNoX3QSFQoNc2VsZWN0ZWRfY2FyZBgFIAEoBRILCgN3aW4YBiAB",
            "KAUSDQoFd2luYnkYByADKAUSDQoFcG9pbnQYCCABKAUSDQoFY2h1bmsYCSAB",
            "KAUSEAoIbXVsdGlwbGUYCiABKAUSDQoFc2NvcmUYCyABKAUSDQoFdG90YWwY",
            "DCABKAUSDAoEc2VhdBgNIAEoBRIdCgVhY2h2cxgOIAMoCzIOLnByb3RvMy5h",
            "Y2h2X3QiRAoIY2hhcmdlX3QSDQoFcGhvbmUYASABKAkSCwoDdWlkGAIgASgJ",
            "EgwKBHRpbWUYAyABKA0SDgoGYW1vdW50GAQgASgFIpUBCgdyZXBsYXlzEg4K",
            "BmdhbWVJZBgBIAEoBRIlCgxnYW1lQ2F0ZWdvcnkYAiABKA4yDy5wcm90bzMu",
            "cGJfZW51bRIOCgZyb3VuZHMYAyABKAUSEQoJbWF4X3JvdW5kGAQgASgFEh0K",
            "BXVzZXJzGAUgAygLMg4ucHJvdG8zLnVzZXJfdBIRCgl0aW1lc3RhbXAYBiAB",
            "KA0itwEKBnJlcGxheRIOCgZnYW1lSWQYASABKAUSDgoGYmFua2VyGAIgASgF",
            "Eg0KBXJvdW5kGAMgASgFEg0KBXBpbGVzGAQgAygFEg4KBmJvdHRvbRgFIAMo",
            "BRIeCgVoYW5kcxgGIAMoCzIPLnByb3RvMy5idW5jaF90Eg4KBmVuZ2FnZRgH",
            "IAMoBRIcCgNvcHMYCCADKAsyDy5wcm90bzMuYnVuY2hfdBIRCgl0aW1lc3Rh",
            "bXAYCSABKA0iJgoHTXNnQmFzZRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJf",
            "bXNnIlgKCk1zZ0NMTG9naW4SGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21z",
            "ZxIPCgd2ZXJzaW9uGAMgASgNEhwKBHVzZXIYAiABKAsyDi5wcm90bzMudXNl",
            "cl90Iq0BCgpNc2dMQ0xvZ2luEhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9t",
            "c2cSDwoHdmVyc2lvbhgCIAEoDRIPCgdzZXNzaW9uGAMgASgEEiAKBnBsYXll",
            "chgEIAEoCzIQLnByb3RvMy5wbGF5ZXJfdBINCgVyZWRpchgFIAEoCRIOCgZh",
            "c3NldHMYBiABKAkSHwoGcmVzdWx0GAcgASgOMg8ucHJvdG8zLnBiX2VudW0i",
            "WAoKTXNnQ0xMb2JieRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEgsK",
            "A3VpZBgCIAEoCRIPCgd2ZXJzaW9uGAMgASgNEg8KB3Nlc3Npb24YBCABKAQi",
            "dwoKTXNnTENMb2JieRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEh4K",
            "BWxvYmJ5GAIgASgLMg8ucHJvdG8zLmxvYmJ5X3QSCwoDa2V5GAMgASgFEh8K",
            "BnJlc3VsdBgEIAEoDjIPLnByb3RvMy5wYl9lbnVtIkkKDE1zZ0NMUmVwbGF5",
            "cxIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEgsKA3VpZBgCIAEoCRIP",
            "CgdzZXNzaW9uGAMgASgEImoKDE1zZ0xDUmVwbGF5cxIbCgNtaWQYASABKA4y",
            "Di5wcm90bzMucGJfbXNnEhwKA2FsbBgCIAMoCzIPLnByb3RvMy5yZXBsYXlz",
            "Eh8KBnJlc3VsdBgDIAEoDjIPLnByb3RvMy5wYl9lbnVtIloKC01zZ0NMUmVw",
            "bGF5EhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cSDgoGZ2FtZUlkGAIg",
            "ASgNEg0KBXJvdW5kGAMgASgFEg8KB3Nlc3Npb24YBCABKAQiaQoLTXNnTENS",
            "ZXBsYXkSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxIcCgRkYXRhGAIg",
            "ASgLMg4ucHJvdG8zLnJlcGxheRIfCgZyZXN1bHQYAyABKA4yDy5wcm90bzMu",
            "cGJfZW51bSJYCgpNc2dDUExvZ2luEhsKA21pZBgBIAEoDjIOLnByb3RvMy5w",
            "Yl9tc2cSDwoHdmVyc2lvbhgCIAEoDRIcCgR1c2VyGAMgASgLMg4ucHJvdG8z",
            "LnVzZXJfdCKtAQoKTXNnUENMb2dpbhIbCgNtaWQYASABKA4yDi5wcm90bzMu",
            "cGJfbXNnEg8KB3ZlcnNpb24YAiABKA0SDwoHc2Vzc2lvbhgDIAEoBBIgCgZw",
            "bGF5ZXIYBCABKAsyEC5wcm90bzMucGxheWVyX3QSDQoFcmVkaXIYBSABKAkS",
            "DgoGYXNzZXRzGAYgASgJEh8KBnJlc3VsdBgHIAEoDjIPLnByb3RvMy5wYl9l",
            "bnVtImYKCk1zZ0NQT3JkZXISGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21z",
            "ZxIPCgdzZXNzaW9uGAIgASgEEg4KBmFtb3VudBgDIAEoDRILCgN1aWQYBCAB",
            "KAkSDQoFcGtjczgYBSABKAgicgoKTXNnUENPcmRlchIbCgNtaWQYASABKA4y",
            "Di5wcm90bzMucGJfbXNnEhEKCWFwcFNjaGVtZRgCIAEoCRITCgtvcmRlclN0",
            "cmluZxgDIAEoCRIfCgZyZXN1bHQYBCABKA4yDy5wcm90bzMucGJfZW51bSKX",
            "AQoLTXNnQ1BWZXJpZnkSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxIP",
            "CgdzZXNzaW9uGAIgASgEEg4KBmFwcF9pZBgDIAEoCRIRCglzZWxsZXJfaWQY",
            "BCABKAkSFAoMb3V0X3RyYWRlX25vGAUgASgJEhQKDHRvdGFsX2Ftb3VudBgG",
            "IAEoDRILCgN1aWQYByABKAkibQoLTXNnUENWZXJpZnkSGwoDbWlkGAEgASgO",
            "Mg4ucHJvdG8zLnBiX21zZxIgCgZwbGF5ZXIYAiABKAsyEC5wcm90bzMucGxh",
            "eWVyX3QSHwoGcmVzdWx0GAMgASgOMg8ucHJvdG8zLnBiX2VudW0iuQEKDU1z",
            "Z0NIUmVnaXN0ZXISGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxILCgN1",
            "aWQYAiABKAkSDQoFcGhvbmUYAyABKAkSDAoEcHN3ZBgEIAEoCRIMCgRuYW1l",
            "GAUgASgJEg8KB2FkZHJlc3MYBiABKAkSDgoGaWRjYXJkGAcgASgJEg4KBndl",
            "Y2hhdBgIIAEoCRIOCgZhbGlwYXkYCSABKAkSEgoKdmVyaWZ5Y29kZRgKIAEo",
            "CSJNCg1Nc2dIQ1JlZ2lzdGVyEhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9t",
            "c2cSHwoGcmVzdWx0GAIgASgOMg8ucHJvdG8zLnBiX2VudW0iWAoLTXNnQ0hD",
            "aGFyZ2USGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxIPCgdzZXNzaW9u",
            "GAIgASgEEgsKA3VpZBgDIAEoCRIOCgZhbW91bnQYBCABKAUiSwoLTXNnSEND",
            "aGFyZ2USGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxIfCgZyZXN1bHQY",
            "BSABKA4yDy5wcm90bzMucGJfZW51bSJHCgpNc2dDSFF1ZXJ5EhsKA21pZBgB",
            "IAEoDjIOLnByb3RvMy5wYl9tc2cSDwoHc2Vzc2lvbhgCIAEoBBILCgN1aWQY",
            "AyABKAkiaQoKTXNnSENRdWVyeRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJf",
            "bXNnEh0KA2xvZxgCIAMoCzIQLnByb3RvMy5jaGFyZ2VfdBIfCgZyZXN1bHQY",
            "AyABKA4yDy5wcm90bzMucGJfZW51bSJaCgxNc2dDTkNvbm5lY3QSGwoDbWlk",
            "GAEgASgOMg4ucHJvdG8zLnBiX21zZxILCgN1aWQYAiABKAkSDwoHdmVyc2lv",
            "bhgDIAEoDRIPCgdzZXNzaW9uGAQgASgEIm4KDE1zZ05DQ29ubmVjdBIbCgNt",
            "aWQYASABKA4yDi5wcm90bzMucGJfbXNnEiAKBnBsYXllchgCIAEoCzIQLnBy",
            "b3RvMy5wbGF5ZXJfdBIfCgZyZXN1bHQYAyABKA4yDy5wcm90bzMucGJfZW51",
            "bSJtCgtNc2dDTkNyZWF0ZRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNn",
            "Eh0KBGdhbWUYAiABKA4yDy5wcm90bzMucGJfZW51bRIiCgdvcHRpb25zGAMg",
            "AygLMhEucHJvdG8zLmtleV92YWx1ZSJcCgtNc2dOQ0NyZWF0ZRIbCgNtaWQY",
            "ASABKA4yDi5wcm90bzMucGJfbXNnEg8KB2dhbWVfaWQYAiABKAUSHwoGcmVz",
            "dWx0GAMgASgOMg8ucHJvdG8zLnBiX2VudW0iOQoJTXNnQ05Kb2luEhsKA21p",
            "ZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cSDwoHZ2FtZV9pZBgCIAEoBSKuAQoJ",
            "TXNnTkNKb2luEhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cSHQoEZ2Ft",
            "ZRgCIAEoDjIPLnByb3RvMy5wYl9lbnVtEiEKCGNhdGVnb3J5GAMgASgOMg8u",
            "cHJvdG8zLnBiX2VudW0SIQoHcGxheWVycxgEIAMoCzIQLnByb3RvMy5wbGF5",
            "ZXJfdBIfCgZyZXN1bHQYBSABKA4yDy5wcm90bzMucGJfZW51bSIpCgpNc2dD",
            "TlJlYWR5EhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2ciVwoKTXNnTkNS",
            "ZWFkeRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEgsKA3BvcxgCIAEo",
            "BRIfCgZyZXN1bHQYAyABKA4yDy5wcm90bzMucGJfZW51bSJJCgtNc2dDTlJl",
            "dml2ZRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEgwKBGdhbWUYAiAB",
            "KAUSDwoHc2Vzc2lvbhgDIAEoBCKKAQoLTXNnTkNSZXZpdmUSGwoDbWlkGAEg",
            "ASgOMg4ucHJvdG8zLnBiX21zZxIfCgRkZWFsGAIgASgLMhEucHJvdG8zLk1z",
            "Z05DRGVhbBIcCgRwbGF5GAMgAygLMg4ucHJvdG8zLnBsYXlfdBIfCgZyZXN1",
            "bHQYBCABKA4yDy5wcm90bzMucGJfZW51bSLDAQoJTXNnTkNEZWFsEhsKA21p",
            "ZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cSDgoGYmFua2VyGAIgASgFEgsKA3Bv",
            "cxgDIAEoBRIMCgRhbnRlGAQgASgFEhAKCG11bHRpcGxlGAUgASgFEg0KBWhh",
            "bmRzGAYgAygFEg4KBmJvdHRvbRgHIAMoBRINCgVjb3VudBgIIAMoBRINCgVw",
            "aWxlcxgJIAEoBRIfCgZyZXN1bHQYCiABKA4yDy5wcm90bzMucGJfZW51bSI3",
            "CgtNc2dDTkVuZ2FnZRIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEgsK",
            "A2tleRgCIAEoBSJ5CgtNc2dOQ0VuZ2FnZRIbCgNtaWQYASABKA4yDi5wcm90",
            "bzMucGJfbXNnEgwKBGtleXMYAiADKAUSHgoFYnVuY2gYAyADKAsyDy5wcm90",
            "bzMuYnVuY2hfdBIfCgZyZXN1bHQYBiABKA4yDy5wcm90bzMucGJfZW51bSJL",
            "CgxNc2dDTkRpc2NhcmQSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZxIe",
            "CgVidW5jaBgCIAEoCzIPLnByb3RvMy5idW5jaF90ImwKDE1zZ05DRGlzY2Fy",
            "ZBIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEh4KBWJ1bmNoGAIgASgL",
            "Mg8ucHJvdG8zLmJ1bmNoX3QSHwoGcmVzdWx0GAMgASgOMg8ucHJvdG8zLnBi",
            "X2VudW0iaAoJTXNnQ05NZWxkEhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9t",
            "c2cSHgoFYnVuY2gYAiABKAsyDy5wcm90bzMuYnVuY2hfdBIeCgVleHRyYRgD",
            "IAMoCzIPLnByb3RvMy5idW5jaF90IncKCU1zZ05DTWVsZBIbCgNtaWQYASAB",
            "KA4yDi5wcm90bzMucGJfbXNnEh4KBWJ1bmNoGAIgASgLMg8ucHJvdG8zLmJ1",
            "bmNoX3QSDAoEZnJvbRgDIAEoBRIfCgZyZXN1bHQYBCABKA4yDy5wcm90bzMu",
            "cGJfZW51bSJDCglNc2dOQ0RyYXcSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBi",
            "X21zZxILCgNwb3MYAiABKAUSDAoEY2FyZBgDIAEoBSIvChBNc2dDTkRpc21p",
            "c3NTeW5jEhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2ciXQoQTXNnTkNE",
            "aXNtaXNzU3luYxIbCgNtaWQYASABKA4yDi5wcm90bzMucGJfbXNnEgsKA3Bv",
            "cxgCIAEoBRIfCgZyZXN1bHQYAyABKA4yDy5wcm90bzMucGJfZW51bSIuCg9N",
            "c2dDTkRpc21pc3NBY2sSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21zZyJc",
            "Cg9Nc2dOQ0Rpc21pc3NBY2sSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21z",
            "ZxILCgNwb3MYAiABKAUSHwoGcmVzdWx0GAMgASgOMg8ucHJvdG8zLnBiX2Vu",
            "dW0idwoLTXNnTkNTZXR0bGUSGwoDbWlkGAEgASgOMg4ucHJvdG8zLnBiX21z",
            "ZxIcCgRwbGF5GAIgAygLMg4ucHJvdG8zLnBsYXlfdBIMCgRwaWxlGAMgAygF",
            "Eh8KBnJlc3VsdBgEIAEoDjIPLnByb3RvMy5wYl9lbnVtImkKC01zZ05DRmlu",
            "aXNoEhsKA21pZBgBIAEoDjIOLnByb3RvMy5wYl9tc2cSHAoEcGxheRgCIAMo",
            "CzIOLnByb3RvMy5wbGF5X3QSHwoGcmVzdWx0GAMgASgOMg8ucHJvdG8zLnBi",
            "X2VudW0iRQoKTXNnQ05TdGF0cxIbCgNtaWQYASABKA4yDi5wcm90bzMucGJf",
            "bXNnEgsKA2tleRgCIAEoCRINCgV2YWx1ZRgDIAEoCSrJEAoHcGJfZW51bRIL",
            "CgdVTktOT1dOEAASCAoETk9ORRAAEgwKCFNVQ0NFRVNTEAASCgoGREVWX1BD",
            "EAASCwoHREVWX1BTNBABEgwKCERFVl9YQk9YEAISCwoHREVWX0lPUxADEg8K",
            "C0RFVl9BTkRST0lEEAQSEAoMREVWX1dJTlBIT05FEAUSDAoIR0FNRV9ERFoQ",
            "FBIMCghHQU1FX1BESxAVEgwKCEdBTUVfUEhaEBYSCwoHR0FNRV9NShAXEhAK",
            "DE9QVElPTl9ST1VORBAKEg8KC09QVElPTl9BTlRJEAsSEwoPT1BUSU9OX0NB",
            "VEVHT1JZEAwSGAoUT1BUSU9OX0RFRklORURfQ0FSRFMQDRIRCg1DQVRFR09S",
            "WV9FQVNZEAoSEwoPQ0FURUdPUllfTk9STUFMEAsSEQoNQ0FURUdPUllfSEFS",
            "RBAMEgoKBlBIWl9TWRAAEgwKCFBIWl9TWUJQEAESCgoGUEhaX0xEEAISCgoG",
            "UEhaX0hIEAMSDgoKUEhaX0NEX1FNVBAEEg4KClBIWl9DRF9ISEQQBRIKCgZQ",
            "SFpfQ1MQBhIOCgpQSFpfWFhfR0haEAcSCgoGUEhaX0hZEAgSDgoKUEhaX1la",
            "X1NCVxAJEg0KCVBIWl9QRUdIWhAKEg4KClBIWl9TQ19FUVMQCxIKCgZQSFpf",
            "Q1oQDBIKCgZQSFpfR1gQDRILCgdQSFpfTUFYEA4SDgoKTUpfU0lDSFVBThAe",
            "EhAKDE1KX0dVQU5HRE9ORxAfEgwKCE1KX0hVTkFOECASDQoJTUpfRlVKSUFO",
            "ECESDwoLTUpfWkhFSklBTkcQIhIOCgpERFpfQ0xBU0lDEFoSDAoIRERaX0ZP",
            "UjQQWxILCgdPUF9QQVNTEAASDgoKT1BfRElTQ0FSRBABEhEKDUJVTkNIX0lO",
            "VkFMSUQQChILCgdCVU5DSF9BEAsSDAoIQlVOQ0hfQUEQDBINCglCVU5DSF9B",
            "QUEQDRIOCgpCVU5DSF9BQUFBEA4SDwoLQlVOQ0hfQUFBQUIQDxIOCgpCVU5D",
            "SF9BQUFCEBASDQoJQlVOQ0hfQUJDEBESCgoGUEhaX0FBEAwSCwoHUEhaX0FC",
            "QxASEgsKB1BIWl9CQkIQFBILCgdQSFpfQUFBEBUSDgoKUEhaX0FBQXdlaRAW",
            "Eg8KC1BIWl9BQUFjaG91EBcSDQoJUEhaX0JCQl9CEBgSEAoMUEhaX0JCQkJk",
            "ZXNrEBkSDAoIUEhaX0I0QjMQGhIQCgxQSFpfQUFBQWRlc2sQGxIMCghQSFpf",
            "QUFBQRAcEhEKDVBIWl9BQUFBc3RhcnQQHRINCglCVU5DSF9XSU4QZBINCglX",
            "SU5fRmlyc3QQARIOCgpXSU5fU2Vjb25kEAISDgoKV0lOX01pZGRsZRAFEhAK",
            "DFdJTl9NZW5GbHVzaBAGEg0KCVdJTl9GbHVzaBAHEhEKDVdJTl9NYWpvclBh",
            "aXIQCRIRCg1XSU5fRmx1c2hQYWlyEAoSEwoPV0lOX0RyYWdvbjdQYWlyEAsS",
            "CgoGV0lOXzE5EAwSEgoOV0lOX0ZsdXNoN1BhaXIQDRISCg5XSU5fTWFqb3I3",
            "UGFpchAOEhgKFFdJTl9GbHVzaERyYWdvbjdQYWlyEA8SDwoLV0lOX0ZsdXNo",
            "MTkQEBIOCgpXSU5fTk9STUFMEAASDAoIV0lOX1RJQU4QARIKCgZXSU5fREkQ",
            "AhIMCghXSU5fTEFTVBADEgwKCFdJTl9USU5HEAQSDQoJV0lOXzEzUkVEEAUS",
            "CwoHV0lOX1JFRBAGEg0KCVdJTl9CTEFDSxAHEgsKB1dJTl9CSUcQCBINCglX",
            "SU5fU01BTEwQCRIOCgpXSU5fU0lOR0xFEAoSDAoIV0lOX1BBSVIQCxIOCgpX",
            "SU5fTU9OS0VZEAwSDgoKV0lOX1lFTExPVxANEgwKCFdJTl9TRUxGEA4SCgoG",
            "V0lOXzMwEA8SCgoGV0lOXzIwEBASDAoIV0lOX0ZJUkUQERINCglXSU5fUExB",
            "VEUQEhIMCghXSU5fMlJFRBATEgwKCFdJTl8zUkVEEBQSDAoIV0lOXzRSRUQQ",
            "FRIOCgpXSU5fRE9VQkxFEBYSDQoJV0lOXzEwUkVEEBcSCwoHV0lOXzVGVRAY",
            "Eg8KC1dJTl9SVU5EVUFMEBkSDQoJV0lOXzdQQUlSEBoSDwoLV0lOX0RVQUxE",
            "UkEQGxIOCgpXSU5fUkVQRUFUEBwSCwoHV0lOX01BWBAdEgoKBldJTldFSRAA",
            "EgkKBVdJTlRJEAESCwoHV0lOU0FORBACEgoKBldJTlNJRBADEgsKB1dJTlBF",
            "TkcQBBILCgdXSU5XUEFPEAUSCwoHV0lOUFBBTxAGEgsKB1dJTlBJTkcQBxIL",
            "CgdfV0lOTUFYEAgSDQoJQUNIVl9CT01CEAoSDwoLQUNIVl9IRUFWRU4QCxIN",
            "CglBQ0hWX0hFTEwQDBISCg5BQ0hWX0tFWV9QT0lOVBAAEhIKDkFDSFZfS0VZ",
            "X0NIVU5LEAESEgoOQUNIVl9LRVlfU0NPUkUQAhIVChFBQ0hWX0tFWV9NVUxU",
            "SVBMRRADEhIKDURFRl9NQVhfTk9ERVMQ6AcSHAoWREVGX01BWF9HQU1FU19Q",
            "RVJfTk9ERRCgjQYSDgoKRVJSX0ZBSUxFRBBkEhEKDUVSUl9DQU5DRUxMRUQQ",
            "ZRIQCgxFUlJfUFJPVE9DT0wQZhINCglFUlJfUEFSQU0QZxISCg5FUlJfRFVQ",
            "TElDQVRFRBBoEhEKDUVSUl9OT1RFWElTVFMQaRIQCgxFUlJfTk9FTk9VR0gQ",
            "ahIPCgtFUlJfVkVSU0lPThBrEhAKC0VSUl9VTktOT1dOEOcHGgIQASqmCQoG",
            "cGJfbXNnEg8KC01TR19JTlZBTElEEAASDgoJTVNHX0JFR0lOEOgHEgwKB01T",
            "R19SQVcQ6QcSEQoMTVNHX0NMX0JFR0lOEKAfEhEKDE1TR19DTF9MT0dJThCh",
            "HxIRCgxNU0dfTENfTE9HSU4Qoh8SEQoMTVNHX0NMX0xPQkJZEKMfEhEKDE1T",
            "R19MQ19MT0JCWRCkHxITCg5NU0dfQ0xfUkVQTEFZUxCrHxITCg5NU0dfTENf",
            "UkVQTEFZUxCsHxISCg1NU0dfQ0xfUkVQTEFZEK0fEhIKDU1TR19MQ19SRVBM",
            "QVkQrh8SEAoLTVNHX0xDX0VYSVQQ0h8SDwoKTVNHX0NMX0VORBCHJxIRCgxN",
            "U0dfQ1BfQkVHSU4QiCcSEQoMTVNHX0NQX0xPR0lOEIknEhEKDE1TR19QQ19M",
            "T0dJThCKJxIRCgxNU0dfQ1BfT1JERVIQnScSEQoMTVNHX1BDX09SREVSEJ4n",
            "EhIKDU1TR19DUF9WRVJJRlkQnycSEgoNTVNHX1BDX1ZFUklGWRCgJxIUCg9N",
            "U0dfQ0hfUkVHSVNURVIQiycSFAoPTVNHX0hDX1JFR0lTVEVSEIwnEhIKDU1T",
            "R19DSF9DSEFSR0UQjScSEgoNTVNHX0hDX0NIQVJHRRCOJxIRCgxNU0dfQ0hf",
            "UVVFUlkQjycSEQoMTVNHX0hDX1FVRVJZEJAnEhIKDU1TR19DSF9GT1JHRVQQ",
            "kScSEgoNTVNHX0hDX0ZPUkdFVBCSJxIWChFNU0dfQ0hfUkVTRVRfUFNXRBCT",
            "JxIWChFNU0dfSENfUkVTRVRfUFNXRBCUJxIPCgpNU0dfQ1BfRU5EEO8uEhEK",
            "DE1TR19DTl9CRUdJThDwLhITCg5NU0dfQ05fQ09OTkVDVBDxLhITCg5NU0df",
            "TkNfQ09OTkVDVBDyLhISCg1NU0dfQ05fUkVWSVZFEPMuEhIKDU1TR19OQ19S",
            "RVZJVkUQ9C4SEgoNTVNHX0NOX0NSRUFURRD7LhISCg1NU0dfTkNfQ1JFQVRF",
            "EPwuEhAKC01TR19DTl9KT0lOEP0uEhAKC01TR19OQ19KT0lOEP4uEhgKE01T",
            "R19DTl9ESVNNSVNTX1NZTkMQhS8SGAoTTVNHX05DX0RJU01JU1NfU1lOQxCG",
            "LxIXChJNU0dfQ05fRElTTUlTU19BQ0sQhy8SFwoSTVNHX05DX0RJU01JU1Nf",
            "QUNLEIgvEhEKDE1TR19DTl9SRUFEWRCPLxIRCgxNU0dfTkNfUkVBRFkQkC8S",
            "EgoNTVNHX0NOX0VOR0FHRRCRLxISCg1NU0dfTkNfRU5HQUdFEJIvEhAKC01T",
            "R19OQ19ERUFMEJMvEhIKDU1TR19OQ19TRVRUTEUQlC8SEgoNTVNHX05DX0ZJ",
            "TklTSBCWLxITCg5NU0dfQ05fRElTQ0FSRBCjLxITCg5NU0dfTkNfRElTQ0FS",
            "RBCkLxIQCgtNU0dfQ05fTUVMRBClLxIQCgtNU0dfTkNfTUVMRBCmLxIQCgtN",
            "U0dfTkNfRFJBVxCnLxIRCgxNU0dfQ05fU1RBVFMQwS8SDwoKTVNHX0NOX0VO",
            "RBDXNhIMCgdNU0dfRU5EEI9OQgJIA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto3.pb_enum), typeof(global::Proto3.pb_msg), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.key_value), global::Proto3.key_value.Parser, new[]{ "Key", "Value", "Ikey", "Ivalue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.user_t), global::Proto3.user_t.Parser, new[]{ "Uid", "Flag", "DevType", "Account", "Name", "Pswd", "Gender", "Age", "Udid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.player_t), global::Proto3.player_t.Parser, new[]{ "Uid", "Pid", "Level", "Xp", "Silver", "Gold", "Energy", "Wins", "Achvs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.win_t), global::Proto3.win_t.Parser, new[]{ "Uid", "Gid", "Win", "Lose", "Draw", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.achv_t), global::Proto3.achv_t.Parser, new[]{ "Type", "Name", "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.game_t), global::Proto3.game_t.Parser, new[]{ "Id", "Version", "Ip", "Port", "Occupied", "Capacity", "Desc", "Status", "OpenningTime", "MaintainStart", "MaintainEnd", "Rules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.lobby_t), global::Proto3.lobby_t.Parser, new[]{ "Version", "Ip", "Port", "Occupied", "Capacity", "Desc", "Bulletin", "Status", "MaintainStart", "MaintainEnd", "TimeZone", "Games" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.bunch_t), global::Proto3.bunch_t.Parser, new[]{ "Type", "Pos", "Pawns", "Child" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.play_t), global::Proto3.play_t.Parser, new[]{ "Player", "Hands", "Discards", "Bunch", "SelectedCard", "Win", "Winby", "Point", "Chunk", "Multiple", "Score", "Total", "Seat", "Achvs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.charge_t), global::Proto3.charge_t.Parser, new[]{ "Phone", "Uid", "Time", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.replays), global::Proto3.replays.Parser, new[]{ "GameId", "GameCategory", "Rounds", "MaxRound", "Users", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.replay), global::Proto3.replay.Parser, new[]{ "GameId", "Banker", "Round", "Piles", "Bottom", "Hands", "Engage", "Ops", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgBase), global::Proto3.MsgBase.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCLLogin), global::Proto3.MsgCLLogin.Parser, new[]{ "Mid", "Version", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgLCLogin), global::Proto3.MsgLCLogin.Parser, new[]{ "Mid", "Version", "Session", "Player", "Redir", "Assets", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCLLobby), global::Proto3.MsgCLLobby.Parser, new[]{ "Mid", "Uid", "Version", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgLCLobby), global::Proto3.MsgLCLobby.Parser, new[]{ "Mid", "Lobby", "Key", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCLReplays), global::Proto3.MsgCLReplays.Parser, new[]{ "Mid", "Uid", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgLCReplays), global::Proto3.MsgLCReplays.Parser, new[]{ "Mid", "All", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCLReplay), global::Proto3.MsgCLReplay.Parser, new[]{ "Mid", "GameId", "Round", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgLCReplay), global::Proto3.MsgLCReplay.Parser, new[]{ "Mid", "Data", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCPLogin), global::Proto3.MsgCPLogin.Parser, new[]{ "Mid", "Version", "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgPCLogin), global::Proto3.MsgPCLogin.Parser, new[]{ "Mid", "Version", "Session", "Player", "Redir", "Assets", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCPOrder), global::Proto3.MsgCPOrder.Parser, new[]{ "Mid", "Session", "Amount", "Uid", "Pkcs8" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgPCOrder), global::Proto3.MsgPCOrder.Parser, new[]{ "Mid", "AppScheme", "OrderString", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCPVerify), global::Proto3.MsgCPVerify.Parser, new[]{ "Mid", "Session", "AppId", "SellerId", "OutTradeNo", "TotalAmount", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgPCVerify), global::Proto3.MsgPCVerify.Parser, new[]{ "Mid", "Player", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCHRegister), global::Proto3.MsgCHRegister.Parser, new[]{ "Mid", "Uid", "Phone", "Pswd", "Name", "Address", "Idcard", "Wechat", "Alipay", "Verifycode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgHCRegister), global::Proto3.MsgHCRegister.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCHCharge), global::Proto3.MsgCHCharge.Parser, new[]{ "Mid", "Session", "Uid", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgHCCharge), global::Proto3.MsgHCCharge.Parser, new[]{ "Mid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCHQuery), global::Proto3.MsgCHQuery.Parser, new[]{ "Mid", "Session", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgHCQuery), global::Proto3.MsgHCQuery.Parser, new[]{ "Mid", "Log", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNConnect), global::Proto3.MsgCNConnect.Parser, new[]{ "Mid", "Uid", "Version", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCConnect), global::Proto3.MsgNCConnect.Parser, new[]{ "Mid", "Player", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNCreate), global::Proto3.MsgCNCreate.Parser, new[]{ "Mid", "Game", "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCCreate), global::Proto3.MsgNCCreate.Parser, new[]{ "Mid", "GameId", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNJoin), global::Proto3.MsgCNJoin.Parser, new[]{ "Mid", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCJoin), global::Proto3.MsgNCJoin.Parser, new[]{ "Mid", "Game", "Category", "Players", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNReady), global::Proto3.MsgCNReady.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCReady), global::Proto3.MsgNCReady.Parser, new[]{ "Mid", "Pos", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNRevive), global::Proto3.MsgCNRevive.Parser, new[]{ "Mid", "Game", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCRevive), global::Proto3.MsgNCRevive.Parser, new[]{ "Mid", "Deal", "Play", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDeal), global::Proto3.MsgNCDeal.Parser, new[]{ "Mid", "Banker", "Pos", "Ante", "Multiple", "Hands", "Bottom", "Count", "Piles", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNEngage), global::Proto3.MsgCNEngage.Parser, new[]{ "Mid", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCEngage), global::Proto3.MsgNCEngage.Parser, new[]{ "Mid", "Keys", "Bunch", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDiscard), global::Proto3.MsgCNDiscard.Parser, new[]{ "Mid", "Bunch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDiscard), global::Proto3.MsgNCDiscard.Parser, new[]{ "Mid", "Bunch", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNMeld), global::Proto3.MsgCNMeld.Parser, new[]{ "Mid", "Bunch", "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCMeld), global::Proto3.MsgNCMeld.Parser, new[]{ "Mid", "Bunch", "From", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDraw), global::Proto3.MsgNCDraw.Parser, new[]{ "Mid", "Pos", "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDismissSync), global::Proto3.MsgCNDismissSync.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDismissSync), global::Proto3.MsgNCDismissSync.Parser, new[]{ "Mid", "Pos", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNDismissAck), global::Proto3.MsgCNDismissAck.Parser, new[]{ "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCDismissAck), global::Proto3.MsgNCDismissAck.Parser, new[]{ "Mid", "Pos", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCSettle), global::Proto3.MsgNCSettle.Parser, new[]{ "Mid", "Play", "Pile", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgNCFinish), global::Proto3.MsgNCFinish.Parser, new[]{ "Mid", "Play", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MsgCNStats), global::Proto3.MsgCNStats.Parser, new[]{ "Mid", "Key", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  ----------------------------------------------------------------
  ///  enum
  ///  ----------------------------------------------------------------
  /// </summary>
  public enum pb_enum {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("SUCCEESS")] Succeess = 0,
    /// <summary>
    ///  device type
    /// </summary>
    [pbr::OriginalName("DEV_PC")] DevPc = 0,
    [pbr::OriginalName("DEV_PS4")] DevPs4 = 1,
    [pbr::OriginalName("DEV_XBOX")] DevXbox = 2,
    [pbr::OriginalName("DEV_IOS")] DevIos = 3,
    [pbr::OriginalName("DEV_ANDROID")] DevAndroid = 4,
    [pbr::OriginalName("DEV_WINPHONE")] DevWinphone = 5,
    /// <summary>
    ///  game rule
    /// </summary>
    [pbr::OriginalName("GAME_DDZ")] GameDdz = 20,
    [pbr::OriginalName("GAME_PDK")] GamePdk = 21,
    [pbr::OriginalName("GAME_PHZ")] GamePhz = 22,
    [pbr::OriginalName("GAME_MJ")] GameMj = 23,
    /// <summary>
    ///  game options
    /// </summary>
    [pbr::OriginalName("OPTION_ROUND")] OptionRound = 10,
    [pbr::OriginalName("OPTION_ANTI")] OptionAnti = 11,
    [pbr::OriginalName("OPTION_CATEGORY")] OptionCategory = 12,
    [pbr::OriginalName("OPTION_DEFINED_CARDS")] OptionDefinedCards = 13,
    /// <summary>
    ///  game category
    /// </summary>
    [pbr::OriginalName("CATEGORY_EASY")] CategoryEasy = 10,
    [pbr::OriginalName("CATEGORY_NORMAL")] CategoryNormal = 11,
    [pbr::OriginalName("CATEGORY_HARD")] CategoryHard = 12,
    /// <summary>
    /// 邵阳字牌
    /// </summary>
    [pbr::OriginalName("PHZ_SY")] PhzSy = 0,
    /// <summary>
    /// 邵阳剥皮
    /// </summary>
    [pbr::OriginalName("PHZ_SYBP")] PhzSybp = 1,
    /// <summary>
    /// 娄底放炮
    /// </summary>
    [pbr::OriginalName("PHZ_LD")] PhzLd = 2,
    /// <summary>
    /// 怀化红拐弯
    /// </summary>
    [pbr::OriginalName("PHZ_HH")] PhzHh = 3,
    /// <summary>
    /// 常德全名堂
    /// </summary>
    [pbr::OriginalName("PHZ_CD_QMT")] PhzCdQmt = 4,
    /// <summary>
    /// 常德红黑点
    /// </summary>
    [pbr::OriginalName("PHZ_CD_HHD")] PhzCdHhd = 5,
    /// <summary>
    /// 长沙
    /// </summary>
    [pbr::OriginalName("PHZ_CS")] PhzCs = 6,
    /// <summary>
    /// 湘乡告胡子
    /// </summary>
    [pbr::OriginalName("PHZ_XX_GHZ")] PhzXxGhz = 7,
    /// <summary>
    /// 衡阳六条枪
    /// </summary>
    [pbr::OriginalName("PHZ_HY")] PhzHy = 8,
    /// <summary>
    /// 永州双霸王
    /// </summary>
    [pbr::OriginalName("PHZ_YZ_SBW")] PhzYzSbw = 9,
    /// <summary>
    /// 碰胡子
    /// </summary>
    [pbr::OriginalName("PHZ_PEGHZ")] PhzPeghz = 10,
    /// <summary>
    /// 四川二七十
    /// </summary>
    [pbr::OriginalName("PHZ_SC_EQS")] PhzScEqs = 11,
    /// <summary>
    /// 郴州跑胡子
    /// </summary>
    [pbr::OriginalName("PHZ_CZ")] PhzCz = 12,
    /// <summary>
    /// 广西跑胡子
    /// </summary>
    [pbr::OriginalName("PHZ_GX")] PhzGx = 13,
    [pbr::OriginalName("PHZ_MAX")] PhzMax = 14,
    [pbr::OriginalName("MJ_SICHUAN")] MjSichuan = 30,
    [pbr::OriginalName("MJ_GUANGDONG")] MjGuangdong = 31,
    [pbr::OriginalName("MJ_HUNAN")] MjHunan = 32,
    [pbr::OriginalName("MJ_FUJIAN")] MjFujian = 33,
    [pbr::OriginalName("MJ_ZHEJIANG")] MjZhejiang = 34,
    [pbr::OriginalName("DDZ_CLASIC")] DdzClasic = 90,
    [pbr::OriginalName("DDZ_FOR4")] DdzFor4 = 91,
    /// <summary>
    ///  game operation
    /// </summary>
    [pbr::OriginalName("OP_PASS")] OpPass = 0,
    [pbr::OriginalName("OP_DISCARD")] OpDiscard = 1,
    /// <summary>
    ///  bunch type
    /// </summary>
    [pbr::OriginalName("BUNCH_INVALID")] BunchInvalid = 10,
    [pbr::OriginalName("BUNCH_A")] BunchA = 11,
    [pbr::OriginalName("BUNCH_AA")] BunchAa = 12,
    [pbr::OriginalName("BUNCH_AAA")] BunchAaa = 13,
    [pbr::OriginalName("BUNCH_AAAA")] BunchAaaa = 14,
    [pbr::OriginalName("BUNCH_AAAAB")] BunchAaaab = 15,
    [pbr::OriginalName("BUNCH_AAAB")] BunchAaab = 16,
    [pbr::OriginalName("BUNCH_ABC")] BunchAbc = 17,
    /// <summary>
    /// jiang
    /// </summary>
    [pbr::OriginalName("PHZ_AA")] PhzAa = 12,
    /// <summary>
    /// ju,jiao
    /// </summary>
    [pbr::OriginalName("PHZ_ABC")] PhzAbc = 18,
    /// <summary>
    /// peng  BB_B
    /// </summary>
    [pbr::OriginalName("PHZ_BBB")] PhzBbb = 20,
    /// <summary>
    /// kan
    /// </summary>
    [pbr::OriginalName("PHZ_AAA")] PhzAaa = 21,
    /// <summary>
    /// wei   AA_A
    /// </summary>
    [pbr::OriginalName("PHZ_AAAwei")] PhzAaawei = 22,
    /// <summary>
    /// chou wei  AAA_
    /// </summary>
    [pbr::OriginalName("PHZ_AAAchou")] PhzAaachou = 23,
    /// <summary>
    /// pao
    /// </summary>
    [pbr::OriginalName("PHZ_BBB_B")] PhzBbbB = 24,
    /// <summary>
    /// wei=>pao(desk pao)  AAA_A
    /// </summary>
    [pbr::OriginalName("PHZ_BBBBdesk")] PhzBbbbdesk = 25,
    /// <summary>
    /// peng=>pao(desk pao)
    /// </summary>
    [pbr::OriginalName("PHZ_B4B3")] PhzB4B3 = 26,
    /// <summary>
    /// desk ti   _AAAA
    /// </summary>
    [pbr::OriginalName("PHZ_AAAAdesk")] PhzAaaadesk = 27,
    /// <summary>
    /// ti
    /// </summary>
    [pbr::OriginalName("PHZ_AAAA")] PhzAaaa = 28,
    /// <summary>
    /// startup ti    AAAA_
    /// </summary>
    [pbr::OriginalName("PHZ_AAAAstart")] PhzAaaastart = 29,
    [pbr::OriginalName("BUNCH_WIN")] BunchWin = 100,
    /// <summary>
    /// WIN_Normal              =0; //ping hu
    /// </summary>
    [pbr::OriginalName("WIN_First")] WinFirst = 1,
    /// <summary>
    /// di hu
    /// </summary>
    [pbr::OriginalName("WIN_Second")] WinSecond = 2,
    /// <summary>
    /// WIN_Last                =3; //hai di hu
    /// WIN_Pair                =4; //dui hu
    /// </summary>
    [pbr::OriginalName("WIN_Middle")] WinMiddle = 5,
    /// <summary>
    /// men qing
    /// </summary>
    [pbr::OriginalName("WIN_MenFlush")] WinMenFlush = 6,
    /// <summary>
    /// qing yi se
    /// </summary>
    [pbr::OriginalName("WIN_Flush")] WinFlush = 7,
    /// <summary>
    /// WIN_7Pair               =8; //7 dui
    /// </summary>
    [pbr::OriginalName("WIN_MajorPair")] WinMajorPair = 9,
    /// <summary>
    /// qing dui
    /// </summary>
    [pbr::OriginalName("WIN_FlushPair")] WinFlushPair = 10,
    /// <summary>
    /// long 7 dui
    /// </summary>
    [pbr::OriginalName("WIN_Dragon7Pair")] WinDragon7Pair = 11,
    /// <summary>
    /// yao jiu
    /// </summary>
    [pbr::OriginalName("WIN_19")] Win19 = 12,
    /// <summary>
    /// qing 7 dui
    /// </summary>
    [pbr::OriginalName("WIN_Flush7Pair")] WinFlush7Pair = 13,
    /// <summary>
    /// jiang 7 dui
    /// </summary>
    [pbr::OriginalName("WIN_Major7Pair")] WinMajor7Pair = 14,
    /// <summary>
    /// qing long 7 dui
    /// </summary>
    [pbr::OriginalName("WIN_FlushDragon7Pair")] WinFlushDragon7Pair = 15,
    /// <summary>
    /// qing 19
    /// </summary>
    [pbr::OriginalName("WIN_Flush19")] WinFlush19 = 16,
    [pbr::OriginalName("WIN_NORMAL")] WinNormal = 0,
    /// <summary>
    /// 天胡
    /// </summary>
    [pbr::OriginalName("WIN_TIAN")] WinTian = 1,
    /// <summary>
    /// 地胡
    /// </summary>
    [pbr::OriginalName("WIN_DI")] WinDi = 2,
    /// <summary>
    /// 海胡
    /// </summary>
    [pbr::OriginalName("WIN_LAST")] WinLast = 3,
    /// <summary>
    /// 听胡
    /// </summary>
    [pbr::OriginalName("WIN_TING")] WinTing = 4,
    /// <summary>
    /// 乌红
    /// </summary>
    [pbr::OriginalName("WIN_13RED")] Win13Red = 5,
    /// <summary>
    /// 红胡
    /// </summary>
    [pbr::OriginalName("WIN_RED")] WinRed = 6,
    /// <summary>
    /// 黑胡
    /// </summary>
    [pbr::OriginalName("WIN_BLACK")] WinBlack = 7,
    /// <summary>
    /// 大胡
    /// </summary>
    [pbr::OriginalName("WIN_BIG")] WinBig = 8,
    /// <summary>
    /// 小胡
    /// </summary>
    [pbr::OriginalName("WIN_SMALL")] WinSmall = 9,
    /// <summary>
    /// 点胡
    /// </summary>
    [pbr::OriginalName("WIN_SINGLE")] WinSingle = 10,
    /// <summary>
    /// 对胡
    /// </summary>
    [pbr::OriginalName("WIN_PAIR")] WinPair = 11,
    /// <summary>
    /// 耍猴
    /// </summary>
    [pbr::OriginalName("WIN_MONKEY")] WinMonkey = 12,
    /// <summary>
    /// 黄番
    /// </summary>
    [pbr::OriginalName("WIN_YELLOW")] WinYellow = 13,
    /// <summary>
    /// 自摸
    /// </summary>
    [pbr::OriginalName("WIN_SELF")] WinSelf = 14,
    /// <summary>
    /// 30胡               =1;15
    /// </summary>
    [pbr::OriginalName("WIN_30")] Win30 = 15,
    /// <summary>
    /// 20胡
    /// </summary>
    [pbr::OriginalName("WIN_20")] Win20 = 16,
    /// <summary>
    /// 放炮
    /// </summary>
    [pbr::OriginalName("WIN_FIRE")] WinFire = 17,
    /// <summary>
    /// 一块匾
    /// </summary>
    [pbr::OriginalName("WIN_PLATE")] WinPlate = 18,
    /// <summary>
    /// 二比
    /// </summary>
    [pbr::OriginalName("WIN_2RED")] Win2Red = 19,
    /// <summary>
    /// 三比               =1;20
    /// </summary>
    [pbr::OriginalName("WIN_3RED")] Win3Red = 20,
    /// <summary>
    /// 四比
    /// </summary>
    [pbr::OriginalName("WIN_4RED")] Win4Red = 21,
    /// <summary>
    /// 双飘    2RED_
    /// </summary>
    [pbr::OriginalName("WIN_DOUBLE")] WinDouble = 22,
    /// <summary>
    /// 十红，针对湘乡
    /// </summary>
    [pbr::OriginalName("WIN_10RED")] Win10Red = 23,
    /// <summary>
    /// 五福，碰胡子用
    /// </summary>
    [pbr::OriginalName("WIN_5FU")] Win5Fu = 24,
    /// <summary>
    /// 跑双
    /// </summary>
    [pbr::OriginalName("WIN_RUNDUAL")] WinRundual = 25,
    /// <summary>
    /// 小七对
    /// </summary>
    [pbr::OriginalName("WIN_7PAIR")] Win7Pair = 26,
    /// <summary>
    /// 双龙
    /// </summary>
    [pbr::OriginalName("WIN_DUALDRA")] WinDualdra = 27,
    /// <summary>
    /// 连胡
    /// </summary>
    [pbr::OriginalName("WIN_REPEAT")] WinRepeat = 28,
    [pbr::OriginalName("WIN_MAX")] WinMax = 29,
    /// <summary>
    /// 碰胡子标示胡牌类型
    /// </summary>
    [pbr::OriginalName("WINWEI")] Winwei = 0,
    /// <summary>
    /// 提胡
    /// </summary>
    [pbr::OriginalName("WINTI")] Winti = 1,
    /// <summary>
    /// 三大胡
    /// </summary>
    [pbr::OriginalName("WINSAND")] Winsand = 2,
    /// <summary>
    /// 四大胡
    /// </summary>
    [pbr::OriginalName("WINSID")] Winsid = 3,
    /// <summary>
    /// 碰胡
    /// </summary>
    [pbr::OriginalName("WINPENG")] Winpeng = 4,
    /// <summary>
    /// 偎坎跑胡
    /// </summary>
    [pbr::OriginalName("WINWPAO")] Winwpao = 5,
    /// <summary>
    /// 碰跑胡
    /// </summary>
    [pbr::OriginalName("WINPPAO")] Winppao = 6,
    /// <summary>
    /// 平胡
    /// </summary>
    [pbr::OriginalName("WINPING")] Winping = 7,
    [pbr::OriginalName("_WINMAX")] Winmax = 8,
    /// <summary>
    ///  achievement
    /// </summary>
    [pbr::OriginalName("ACHV_BOMB")] AchvBomb = 10,
    [pbr::OriginalName("ACHV_HEAVEN")] AchvHeaven = 11,
    [pbr::OriginalName("ACHV_HELL")] AchvHell = 12,
    /// <summary>
    ///  achievement key type
    /// </summary>
    [pbr::OriginalName("ACHV_KEY_POINT")] AchvKeyPoint = 0,
    [pbr::OriginalName("ACHV_KEY_CHUNK")] AchvKeyChunk = 1,
    [pbr::OriginalName("ACHV_KEY_SCORE")] AchvKeyScore = 2,
    [pbr::OriginalName("ACHV_KEY_MULTIPLE")] AchvKeyMultiple = 3,
    /// <summary>
    ///  game using
    /// </summary>
    [pbr::OriginalName("DEF_MAX_NODES")] DefMaxNodes = 1000,
    [pbr::OriginalName("DEF_MAX_GAMES_PER_NODE")] DefMaxGamesPerNode = 100000,
    /// <summary>
    ///  error
    /// </summary>
    [pbr::OriginalName("ERR_FAILED")] ErrFailed = 100,
    [pbr::OriginalName("ERR_CANCELLED")] ErrCancelled = 101,
    [pbr::OriginalName("ERR_PROTOCOL")] ErrProtocol = 102,
    [pbr::OriginalName("ERR_PARAM")] ErrParam = 103,
    [pbr::OriginalName("ERR_DUPLICATED")] ErrDuplicated = 104,
    [pbr::OriginalName("ERR_NOTEXISTS")] ErrNotexists = 105,
    [pbr::OriginalName("ERR_NOENOUGH")] ErrNoenough = 106,
    [pbr::OriginalName("ERR_VERSION")] ErrVersion = 107,
    [pbr::OriginalName("ERR_UNKNOWN")] ErrUnknown = 999,
  }

  /// <summary>
  ///  ----------------------------------------------------------------
  ///  messages
  ///  ----------------------------------------------------------------
  /// </summary>
  public enum pb_msg {
    [pbr::OriginalName("MSG_INVALID")] MsgInvalid = 0,
    [pbr::OriginalName("MSG_BEGIN")] MsgBegin = 1000,
    [pbr::OriginalName("MSG_RAW")] MsgRaw = 1001,
    /// <summary>
    /// Client --  Lobby
    /// </summary>
    [pbr::OriginalName("MSG_CL_BEGIN")] MsgClBegin = 4000,
    /// <summary>
    /// odd for in,even for out
    /// </summary>
    [pbr::OriginalName("MSG_CL_LOGIN")] MsgClLogin = 4001,
    [pbr::OriginalName("MSG_LC_LOGIN")] MsgLcLogin = 4002,
    [pbr::OriginalName("MSG_CL_LOBBY")] MsgClLobby = 4003,
    [pbr::OriginalName("MSG_LC_LOBBY")] MsgLcLobby = 4004,
    [pbr::OriginalName("MSG_CL_REPLAYS")] MsgClReplays = 4011,
    [pbr::OriginalName("MSG_LC_REPLAYS")] MsgLcReplays = 4012,
    [pbr::OriginalName("MSG_CL_REPLAY")] MsgClReplay = 4013,
    [pbr::OriginalName("MSG_LC_REPLAY")] MsgLcReplay = 4014,
    [pbr::OriginalName("MSG_LC_EXIT")] MsgLcExit = 4050,
    [pbr::OriginalName("MSG_CL_END")] MsgClEnd = 4999,
    /// <summary>
    /// Client --  Charge
    /// </summary>
    [pbr::OriginalName("MSG_CP_BEGIN")] MsgCpBegin = 5000,
    [pbr::OriginalName("MSG_CP_LOGIN")] MsgCpLogin = 5001,
    [pbr::OriginalName("MSG_PC_LOGIN")] MsgPcLogin = 5002,
    [pbr::OriginalName("MSG_CP_ORDER")] MsgCpOrder = 5021,
    [pbr::OriginalName("MSG_PC_ORDER")] MsgPcOrder = 5022,
    [pbr::OriginalName("MSG_CP_VERIFY")] MsgCpVerify = 5023,
    [pbr::OriginalName("MSG_PC_VERIFY")] MsgPcVerify = 5024,
    /// <summary>
    /// deprecated
    /// </summary>
    [pbr::OriginalName("MSG_CH_REGISTER")] MsgChRegister = 5003,
    [pbr::OriginalName("MSG_HC_REGISTER")] MsgHcRegister = 5004,
    [pbr::OriginalName("MSG_CH_CHARGE")] MsgChCharge = 5005,
    [pbr::OriginalName("MSG_HC_CHARGE")] MsgHcCharge = 5006,
    [pbr::OriginalName("MSG_CH_QUERY")] MsgChQuery = 5007,
    [pbr::OriginalName("MSG_HC_QUERY")] MsgHcQuery = 5008,
    [pbr::OriginalName("MSG_CH_FORGET")] MsgChForget = 5009,
    [pbr::OriginalName("MSG_HC_FORGET")] MsgHcForget = 5010,
    [pbr::OriginalName("MSG_CH_RESET_PSWD")] MsgChResetPswd = 5011,
    [pbr::OriginalName("MSG_HC_RESET_PSWD")] MsgHcResetPswd = 5012,
    [pbr::OriginalName("MSG_CP_END")] MsgCpEnd = 5999,
    /// <summary>
    /// Client --  Node
    /// </summary>
    [pbr::OriginalName("MSG_CN_BEGIN")] MsgCnBegin = 6000,
    [pbr::OriginalName("MSG_CN_CONNECT")] MsgCnConnect = 6001,
    [pbr::OriginalName("MSG_NC_CONNECT")] MsgNcConnect = 6002,
    [pbr::OriginalName("MSG_CN_REVIVE")] MsgCnRevive = 6003,
    [pbr::OriginalName("MSG_NC_REVIVE")] MsgNcRevive = 6004,
    [pbr::OriginalName("MSG_CN_CREATE")] MsgCnCreate = 6011,
    [pbr::OriginalName("MSG_NC_CREATE")] MsgNcCreate = 6012,
    [pbr::OriginalName("MSG_CN_JOIN")] MsgCnJoin = 6013,
    [pbr::OriginalName("MSG_NC_JOIN")] MsgNcJoin = 6014,
    [pbr::OriginalName("MSG_CN_DISMISS_SYNC")] MsgCnDismissSync = 6021,
    [pbr::OriginalName("MSG_NC_DISMISS_SYNC")] MsgNcDismissSync = 6022,
    [pbr::OriginalName("MSG_CN_DISMISS_ACK")] MsgCnDismissAck = 6023,
    [pbr::OriginalName("MSG_NC_DISMISS_ACK")] MsgNcDismissAck = 6024,
    [pbr::OriginalName("MSG_CN_READY")] MsgCnReady = 6031,
    [pbr::OriginalName("MSG_NC_READY")] MsgNcReady = 6032,
    [pbr::OriginalName("MSG_CN_ENGAGE")] MsgCnEngage = 6033,
    [pbr::OriginalName("MSG_NC_ENGAGE")] MsgNcEngage = 6034,
    [pbr::OriginalName("MSG_NC_DEAL")] MsgNcDeal = 6035,
    [pbr::OriginalName("MSG_NC_SETTLE")] MsgNcSettle = 6036,
    [pbr::OriginalName("MSG_NC_FINISH")] MsgNcFinish = 6038,
    [pbr::OriginalName("MSG_CN_DISCARD")] MsgCnDiscard = 6051,
    [pbr::OriginalName("MSG_NC_DISCARD")] MsgNcDiscard = 6052,
    [pbr::OriginalName("MSG_CN_MELD")] MsgCnMeld = 6053,
    [pbr::OriginalName("MSG_NC_MELD")] MsgNcMeld = 6054,
    [pbr::OriginalName("MSG_NC_DRAW")] MsgNcDraw = 6055,
    [pbr::OriginalName("MSG_CN_STATS")] MsgCnStats = 6081,
    [pbr::OriginalName("MSG_CN_END")] MsgCnEnd = 6999,
    [pbr::OriginalName("MSG_END")] MsgEnd = 9999,
  }

  #endregion

  #region Messages
  public sealed partial class key_value : pb::IMessage<key_value> {
    private static readonly pb::MessageParser<key_value> _parser = new pb::MessageParser<key_value>(() => new key_value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<key_value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public key_value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public key_value(key_value other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      ikey_ = other.ikey_;
      ivalue_ = other.ivalue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public key_value Clone() {
      return new key_value(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ikey" field.</summary>
    public const int IkeyFieldNumber = 3;
    private global::Proto3.pb_enum ikey_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Ikey {
      get { return ikey_; }
      set {
        ikey_ = value;
      }
    }

    /// <summary>Field number for the "ivalue" field.</summary>
    public const int IvalueFieldNumber = 4;
    private int ivalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ivalue {
      get { return ivalue_; }
      set {
        ivalue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as key_value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(key_value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Ikey != other.Ikey) return false;
      if (Ivalue != other.Ivalue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Ikey != 0) hash ^= Ikey.GetHashCode();
      if (Ivalue != 0) hash ^= Ivalue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Ikey != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Ikey);
      }
      if (Ivalue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ivalue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Ikey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ikey);
      }
      if (Ivalue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ivalue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(key_value other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Ikey != 0) {
        Ikey = other.Ikey;
      }
      if (other.Ivalue != 0) {
        Ivalue = other.Ivalue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            ikey_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 32: {
            Ivalue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ----------------------------------------------------------------
  ///  struct
  ///  ----------------------------------------------------------------
  /// </summary>
  public sealed partial class user_t : pb::IMessage<user_t> {
    private static readonly pb::MessageParser<user_t> _parser = new pb::MessageParser<user_t>(() => new user_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t(user_t other) : this() {
      uid_ = other.uid_;
      flag_ = other.flag_;
      devType_ = other.devType_;
      account_ = other.account_;
      name_ = other.name_;
      pswd_ = other.pswd_;
      gender_ = other.gender_;
      age_ = other.age_;
      udid_ = other.udid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_t Clone() {
      return new user_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private int flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "dev_type" field.</summary>
    public const int DevTypeFieldNumber = 3;
    private global::Proto3.pb_enum devType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum DevType {
      get { return devType_; }
      set {
        devType_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 4;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pswd" field.</summary>
    public const int PswdFieldNumber = 6;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 7;
    private int gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 8;
    private int age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 9;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Flag != other.Flag) return false;
      if (DevType != other.DevType) return false;
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      if (Pswd != other.Pswd) return false;
      if (Gender != other.Gender) return false;
      if (Age != other.Age) return false;
      if (Udid != other.Udid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (DevType != 0) hash ^= DevType.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Flag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Flag);
      }
      if (DevType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DevType);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Pswd);
      }
      if (Gender != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Gender);
      }
      if (Age != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Age);
      }
      if (Udid.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Udid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      if (DevType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DevType);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
      }
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.DevType != 0) {
        DevType = other.DevType;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Flag = input.ReadInt32();
            break;
          }
          case 24: {
            devType_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 34: {
            Account = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Pswd = input.ReadString();
            break;
          }
          case 56: {
            Gender = input.ReadInt32();
            break;
          }
          case 64: {
            Age = input.ReadInt32();
            break;
          }
          case 74: {
            Udid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class player_t : pb::IMessage<player_t> {
    private static readonly pb::MessageParser<player_t> _parser = new pb::MessageParser<player_t>(() => new player_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<player_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t(player_t other) : this() {
      uid_ = other.uid_;
      pid_ = other.pid_;
      level_ = other.level_;
      xp_ = other.xp_;
      silver_ = other.silver_;
      gold_ = other.gold_;
      energy_ = other.energy_;
      wins_ = other.wins_.Clone();
      achvs_ = other.achvs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public player_t Clone() {
      return new player_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private uint pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "xp" field.</summary>
    public const int XpFieldNumber = 4;
    private int xp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Xp {
      get { return xp_; }
      set {
        xp_ = value;
      }
    }

    /// <summary>Field number for the "silver" field.</summary>
    public const int SilverFieldNumber = 5;
    private int silver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Silver {
      get { return silver_; }
      set {
        silver_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 6;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 7;
    private int energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "wins" field.</summary>
    public const int WinsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Proto3.win_t> _repeated_wins_codec
        = pb::FieldCodec.ForMessage(66, global::Proto3.win_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.win_t> wins_ = new pbc::RepeatedField<global::Proto3.win_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.win_t> Wins {
      get { return wins_; }
    }

    /// <summary>Field number for the "achvs" field.</summary>
    public const int AchvsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Proto3.achv_t> _repeated_achvs_codec
        = pb::FieldCodec.ForMessage(74, global::Proto3.achv_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.achv_t> achvs_ = new pbc::RepeatedField<global::Proto3.achv_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.achv_t> Achvs {
      get { return achvs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as player_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(player_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Pid != other.Pid) return false;
      if (Level != other.Level) return false;
      if (Xp != other.Xp) return false;
      if (Silver != other.Silver) return false;
      if (Gold != other.Gold) return false;
      if (Energy != other.Energy) return false;
      if(!wins_.Equals(other.wins_)) return false;
      if(!achvs_.Equals(other.achvs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Xp != 0) hash ^= Xp.GetHashCode();
      if (Silver != 0) hash ^= Silver.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Energy != 0) hash ^= Energy.GetHashCode();
      hash ^= wins_.GetHashCode();
      hash ^= achvs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Xp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Xp);
      }
      if (Silver != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Silver);
      }
      if (Gold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Gold);
      }
      if (Energy != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Energy);
      }
      wins_.WriteTo(output, _repeated_wins_codec);
      achvs_.WriteTo(output, _repeated_achvs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Xp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Xp);
      }
      if (Silver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Silver);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      size += wins_.CalculateSize(_repeated_wins_codec);
      size += achvs_.CalculateSize(_repeated_achvs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(player_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Xp != 0) {
        Xp = other.Xp;
      }
      if (other.Silver != 0) {
        Silver = other.Silver;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      wins_.Add(other.wins_);
      achvs_.Add(other.achvs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Pid = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Xp = input.ReadInt32();
            break;
          }
          case 40: {
            Silver = input.ReadInt32();
            break;
          }
          case 48: {
            Gold = input.ReadInt32();
            break;
          }
          case 56: {
            Energy = input.ReadInt32();
            break;
          }
          case 66: {
            wins_.AddEntriesFrom(input, _repeated_wins_codec);
            break;
          }
          case 74: {
            achvs_.AddEntriesFrom(input, _repeated_achvs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class win_t : pb::IMessage<win_t> {
    private static readonly pb::MessageParser<win_t> _parser = new pb::MessageParser<win_t>(() => new win_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<win_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public win_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public win_t(win_t other) : this() {
      uid_ = other.uid_;
      gid_ = other.gid_;
      win_ = other.win_;
      lose_ = other.lose_;
      draw_ = other.draw_;
      score_ = other.score_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public win_t Clone() {
      return new win_t(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gid" field.</summary>
    public const int GidFieldNumber = 2;
    private int gid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gid {
      get { return gid_; }
      set {
        gid_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 3;
    private int win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "lose" field.</summary>
    public const int LoseFieldNumber = 4;
    private int lose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lose {
      get { return lose_; }
      set {
        lose_ = value;
      }
    }

    /// <summary>Field number for the "draw" field.</summary>
    public const int DrawFieldNumber = 5;
    private int draw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Draw {
      get { return draw_; }
      set {
        draw_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as win_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(win_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Gid != other.Gid) return false;
      if (Win != other.Win) return false;
      if (Lose != other.Lose) return false;
      if (Draw != other.Draw) return false;
      if (Score != other.Score) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Gid != 0) hash ^= Gid.GetHashCode();
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Lose != 0) hash ^= Lose.GetHashCode();
      if (Draw != 0) hash ^= Draw.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Gid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gid);
      }
      if (Win != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Win);
      }
      if (Lose != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lose);
      }
      if (Draw != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Draw);
      }
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Gid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gid);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      if (Lose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lose);
      }
      if (Draw != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Draw);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(win_t other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Gid != 0) {
        Gid = other.Gid;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Lose != 0) {
        Lose = other.Lose;
      }
      if (other.Draw != 0) {
        Draw = other.Draw;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Gid = input.ReadInt32();
            break;
          }
          case 24: {
            Win = input.ReadInt32();
            break;
          }
          case 32: {
            Lose = input.ReadInt32();
            break;
          }
          case 40: {
            Draw = input.ReadInt32();
            break;
          }
          case 48: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class achv_t : pb::IMessage<achv_t> {
    private static readonly pb::MessageParser<achv_t> _parser = new pb::MessageParser<achv_t>(() => new achv_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<achv_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achv_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achv_t(achv_t other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public achv_t Clone() {
      return new achv_t(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto3.pb_enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as achv_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(achv_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Key != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(achv_t other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Key = input.ReadInt32();
            break;
          }
          case 32: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class game_t : pb::IMessage<game_t> {
    private static readonly pb::MessageParser<game_t> _parser = new pb::MessageParser<game_t>(() => new game_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<game_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t(game_t other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      ip_ = other.ip_;
      port_ = other.port_;
      occupied_ = other.occupied_;
      capacity_ = other.capacity_;
      desc_ = other.desc_;
      status_ = other.status_;
      openningTime_ = other.openningTime_;
      maintainStart_ = other.maintainStart_;
      maintainEnd_ = other.maintainEnd_;
      rules_ = other.rules_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public game_t Clone() {
      return new game_t(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Proto3.pb_enum id_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "occupied" field.</summary>
    public const int OccupiedFieldNumber = 5;
    private int occupied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Occupied {
      get { return occupied_; }
      set {
        occupied_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private int capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 7;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "openning_time" field.</summary>
    public const int OpenningTimeFieldNumber = 9;
    private uint openningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenningTime {
      get { return openningTime_; }
      set {
        openningTime_ = value;
      }
    }

    /// <summary>Field number for the "maintain_start" field.</summary>
    public const int MaintainStartFieldNumber = 10;
    private uint maintainStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainStart {
      get { return maintainStart_; }
      set {
        maintainStart_ = value;
      }
    }

    /// <summary>Field number for the "maintain_end" field.</summary>
    public const int MaintainEndFieldNumber = 11;
    private uint maintainEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainEnd {
      get { return maintainEnd_; }
      set {
        maintainEnd_ = value;
      }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Proto3.pb_enum> _repeated_rules_codec
        = pb::FieldCodec.ForEnum(98, x => (int) x, x => (global::Proto3.pb_enum) x);
    private readonly pbc::RepeatedField<global::Proto3.pb_enum> rules_ = new pbc::RepeatedField<global::Proto3.pb_enum>();
    /// <summary>
    /// categories of game
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.pb_enum> Rules {
      get { return rules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as game_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(game_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Occupied != other.Occupied) return false;
      if (Capacity != other.Capacity) return false;
      if (Desc != other.Desc) return false;
      if (Status != other.Status) return false;
      if (OpenningTime != other.OpenningTime) return false;
      if (MaintainStart != other.MaintainStart) return false;
      if (MaintainEnd != other.MaintainEnd) return false;
      if(!rules_.Equals(other.rules_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Occupied != 0) hash ^= Occupied.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (OpenningTime != 0) hash ^= OpenningTime.GetHashCode();
      if (MaintainStart != 0) hash ^= MaintainStart.GetHashCode();
      if (MaintainEnd != 0) hash ^= MaintainEnd.GetHashCode();
      hash ^= rules_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Id);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Port);
      }
      if (Occupied != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Occupied);
      }
      if (Capacity != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Capacity);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Desc);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Status);
      }
      if (OpenningTime != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(OpenningTime);
      }
      if (MaintainStart != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaintainStart);
      }
      if (MaintainEnd != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MaintainEnd);
      }
      rules_.WriteTo(output, _repeated_rules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Occupied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Occupied);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (OpenningTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenningTime);
      }
      if (MaintainStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainStart);
      }
      if (MaintainEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainEnd);
      }
      size += rules_.CalculateSize(_repeated_rules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(game_t other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Occupied != 0) {
        Occupied = other.Occupied;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.OpenningTime != 0) {
        OpenningTime = other.OpenningTime;
      }
      if (other.MaintainStart != 0) {
        MaintainStart = other.MaintainStart;
      }
      if (other.MaintainEnd != 0) {
        MaintainEnd = other.MaintainEnd;
      }
      rules_.Add(other.rules_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            id_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadUInt32();
            break;
          }
          case 40: {
            Occupied = input.ReadInt32();
            break;
          }
          case 48: {
            Capacity = input.ReadInt32();
            break;
          }
          case 58: {
            Desc = input.ReadString();
            break;
          }
          case 64: {
            Status = input.ReadInt32();
            break;
          }
          case 72: {
            OpenningTime = input.ReadUInt32();
            break;
          }
          case 80: {
            MaintainStart = input.ReadUInt32();
            break;
          }
          case 88: {
            MaintainEnd = input.ReadUInt32();
            break;
          }
          case 98:
          case 96: {
            rules_.AddEntriesFrom(input, _repeated_rules_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class lobby_t : pb::IMessage<lobby_t> {
    private static readonly pb::MessageParser<lobby_t> _parser = new pb::MessageParser<lobby_t>(() => new lobby_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<lobby_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t(lobby_t other) : this() {
      version_ = other.version_;
      ip_ = other.ip_;
      port_ = other.port_;
      occupied_ = other.occupied_;
      capacity_ = other.capacity_;
      desc_ = other.desc_;
      bulletin_ = other.bulletin_;
      status_ = other.status_;
      maintainStart_ = other.maintainStart_;
      maintainEnd_ = other.maintainEnd_;
      timeZone_ = other.timeZone_;
      games_ = other.games_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public lobby_t Clone() {
      return new lobby_t(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "occupied" field.</summary>
    public const int OccupiedFieldNumber = 4;
    private int occupied_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Occupied {
      get { return occupied_; }
      set {
        occupied_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 5;
    private int capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bulletin" field.</summary>
    public const int BulletinFieldNumber = 7;
    private string bulletin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bulletin {
      get { return bulletin_; }
      set {
        bulletin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "maintain_start" field.</summary>
    public const int MaintainStartFieldNumber = 9;
    private uint maintainStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainStart {
      get { return maintainStart_; }
      set {
        maintainStart_ = value;
      }
    }

    /// <summary>Field number for the "maintain_end" field.</summary>
    public const int MaintainEndFieldNumber = 10;
    private uint maintainEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainEnd {
      get { return maintainEnd_; }
      set {
        maintainEnd_ = value;
      }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 11;
    private uint timeZone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "games" field.</summary>
    public const int GamesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Proto3.game_t> _repeated_games_codec
        = pb::FieldCodec.ForMessage(98, global::Proto3.game_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.game_t> games_ = new pbc::RepeatedField<global::Proto3.game_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.game_t> Games {
      get { return games_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as lobby_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(lobby_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Occupied != other.Occupied) return false;
      if (Capacity != other.Capacity) return false;
      if (Desc != other.Desc) return false;
      if (Bulletin != other.Bulletin) return false;
      if (Status != other.Status) return false;
      if (MaintainStart != other.MaintainStart) return false;
      if (MaintainEnd != other.MaintainEnd) return false;
      if (TimeZone != other.TimeZone) return false;
      if(!games_.Equals(other.games_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Occupied != 0) hash ^= Occupied.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Bulletin.Length != 0) hash ^= Bulletin.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (MaintainStart != 0) hash ^= MaintainStart.GetHashCode();
      if (MaintainEnd != 0) hash ^= MaintainEnd.GetHashCode();
      if (TimeZone != 0) hash ^= TimeZone.GetHashCode();
      hash ^= games_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (Occupied != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Occupied);
      }
      if (Capacity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Capacity);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (Bulletin.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Bulletin);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Status);
      }
      if (MaintainStart != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MaintainStart);
      }
      if (MaintainEnd != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaintainEnd);
      }
      if (TimeZone != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TimeZone);
      }
      games_.WriteTo(output, _repeated_games_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Occupied != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Occupied);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Bulletin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bulletin);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (MaintainStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainStart);
      }
      if (MaintainEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaintainEnd);
      }
      if (TimeZone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeZone);
      }
      size += games_.CalculateSize(_repeated_games_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(lobby_t other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Occupied != 0) {
        Occupied = other.Occupied;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Bulletin.Length != 0) {
        Bulletin = other.Bulletin;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.MaintainStart != 0) {
        MaintainStart = other.MaintainStart;
      }
      if (other.MaintainEnd != 0) {
        MaintainEnd = other.MaintainEnd;
      }
      if (other.TimeZone != 0) {
        TimeZone = other.TimeZone;
      }
      games_.Add(other.games_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
          case 32: {
            Occupied = input.ReadInt32();
            break;
          }
          case 40: {
            Capacity = input.ReadInt32();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
          case 58: {
            Bulletin = input.ReadString();
            break;
          }
          case 64: {
            Status = input.ReadInt32();
            break;
          }
          case 72: {
            MaintainStart = input.ReadUInt32();
            break;
          }
          case 80: {
            MaintainEnd = input.ReadUInt32();
            break;
          }
          case 88: {
            TimeZone = input.ReadUInt32();
            break;
          }
          case 98: {
            games_.AddEntriesFrom(input, _repeated_games_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class bunch_t : pb::IMessage<bunch_t> {
    private static readonly pb::MessageParser<bunch_t> _parser = new pb::MessageParser<bunch_t>(() => new bunch_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bunch_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t(bunch_t other) : this() {
      type_ = other.type_;
      pos_ = other.pos_;
      pawns_ = other.pawns_.Clone();
      child_ = other.child_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bunch_t Clone() {
      return new bunch_t(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Proto3.pb_enum type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// easy to use -1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "pawns" field.</summary>
    public const int PawnsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_pawns_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> pawns_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Pawns {
      get { return pawns_; }
    }

    /// <summary>Field number for the "child" field.</summary>
    public const int ChildFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_child_codec
        = pb::FieldCodec.ForMessage(34, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> child_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    /// <summary>
    /// to build bunch tree
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Child {
      get { return child_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bunch_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bunch_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Pos != other.Pos) return false;
      if(!pawns_.Equals(other.pawns_)) return false;
      if(!child_.Equals(other.child_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      hash ^= pawns_.GetHashCode();
      hash ^= child_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      pawns_.WriteTo(output, _repeated_pawns_codec);
      child_.WriteTo(output, _repeated_child_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      size += pawns_.CalculateSize(_repeated_pawns_codec);
      size += child_.CalculateSize(_repeated_child_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bunch_t other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      pawns_.Add(other.pawns_);
      child_.Add(other.child_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            pawns_.AddEntriesFrom(input, _repeated_pawns_codec);
            break;
          }
          case 34: {
            child_.AddEntriesFrom(input, _repeated_child_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class play_t : pb::IMessage<play_t> {
    private static readonly pb::MessageParser<play_t> _parser = new pb::MessageParser<play_t>(() => new play_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<play_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public play_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public play_t(play_t other) : this() {
      Player = other.player_ != null ? other.Player.Clone() : null;
      hands_ = other.hands_.Clone();
      discards_ = other.discards_.Clone();
      bunch_ = other.bunch_.Clone();
      selectedCard_ = other.selectedCard_;
      win_ = other.win_;
      winby_ = other.winby_.Clone();
      point_ = other.point_;
      chunk_ = other.chunk_;
      multiple_ = other.multiple_;
      score_ = other.score_;
      total_ = other.total_;
      seat_ = other.seat_;
      achvs_ = other.achvs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public play_t Clone() {
      return new play_t(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Proto3.player_t player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.player_t Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_hands_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> hands_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "discards" field.</summary>
    public const int DiscardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_discards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> discards_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Discards {
      get { return discards_; }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_bunch_codec
        = pb::FieldCodec.ForMessage(34, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> bunch_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Bunch {
      get { return bunch_; }
    }

    /// <summary>Field number for the "selected_card" field.</summary>
    public const int SelectedCardFieldNumber = 5;
    private int selectedCard_;
    /// <summary>
    /// default or selected card at startup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedCard {
      get { return selectedCard_; }
      set {
        selectedCard_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 6;
    private int win_;
    /// <summary>
    /// win sequence,minus means lose
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "winby" field.</summary>
    public const int WinbyFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_winby_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> winby_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// others were win by me
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Winby {
      get { return winby_; }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 8;
    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "chunk" field.</summary>
    public const int ChunkFieldNumber = 9;
    private int chunk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chunk {
      get { return chunk_; }
      set {
        chunk_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 10;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 11;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 12;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 13;
    private int seat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "achvs" field.</summary>
    public const int AchvsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Proto3.achv_t> _repeated_achvs_codec
        = pb::FieldCodec.ForMessage(114, global::Proto3.achv_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.achv_t> achvs_ = new pbc::RepeatedField<global::Proto3.achv_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.achv_t> Achvs {
      get { return achvs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as play_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(play_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      if(!hands_.Equals(other.hands_)) return false;
      if(!discards_.Equals(other.discards_)) return false;
      if(!bunch_.Equals(other.bunch_)) return false;
      if (SelectedCard != other.SelectedCard) return false;
      if (Win != other.Win) return false;
      if(!winby_.Equals(other.winby_)) return false;
      if (Point != other.Point) return false;
      if (Chunk != other.Chunk) return false;
      if (Multiple != other.Multiple) return false;
      if (Score != other.Score) return false;
      if (Total != other.Total) return false;
      if (Seat != other.Seat) return false;
      if(!achvs_.Equals(other.achvs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      hash ^= hands_.GetHashCode();
      hash ^= discards_.GetHashCode();
      hash ^= bunch_.GetHashCode();
      if (SelectedCard != 0) hash ^= SelectedCard.GetHashCode();
      if (Win != 0) hash ^= Win.GetHashCode();
      hash ^= winby_.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (Chunk != 0) hash ^= Chunk.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Seat != 0) hash ^= Seat.GetHashCode();
      hash ^= achvs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      discards_.WriteTo(output, _repeated_discards_codec);
      bunch_.WriteTo(output, _repeated_bunch_codec);
      if (SelectedCard != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SelectedCard);
      }
      if (Win != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Win);
      }
      winby_.WriteTo(output, _repeated_winby_codec);
      if (Point != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Point);
      }
      if (Chunk != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Chunk);
      }
      if (Multiple != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Multiple);
      }
      if (Score != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Score);
      }
      if (Total != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Total);
      }
      if (Seat != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Seat);
      }
      achvs_.WriteTo(output, _repeated_achvs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      size += discards_.CalculateSize(_repeated_discards_codec);
      size += bunch_.CalculateSize(_repeated_bunch_codec);
      if (SelectedCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedCard);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      size += winby_.CalculateSize(_repeated_winby_codec);
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (Chunk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chunk);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      size += achvs_.CalculateSize(_repeated_achvs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(play_t other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Proto3.player_t();
        }
        Player.MergeFrom(other.Player);
      }
      hands_.Add(other.hands_);
      discards_.Add(other.discards_);
      bunch_.Add(other.bunch_);
      if (other.SelectedCard != 0) {
        SelectedCard = other.SelectedCard;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      winby_.Add(other.winby_);
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.Chunk != 0) {
        Chunk = other.Chunk;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      achvs_.Add(other.achvs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::Proto3.player_t();
            }
            input.ReadMessage(player_);
            break;
          }
          case 18:
          case 16: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 26:
          case 24: {
            discards_.AddEntriesFrom(input, _repeated_discards_codec);
            break;
          }
          case 34: {
            bunch_.AddEntriesFrom(input, _repeated_bunch_codec);
            break;
          }
          case 40: {
            SelectedCard = input.ReadInt32();
            break;
          }
          case 48: {
            Win = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            winby_.AddEntriesFrom(input, _repeated_winby_codec);
            break;
          }
          case 64: {
            Point = input.ReadInt32();
            break;
          }
          case 72: {
            Chunk = input.ReadInt32();
            break;
          }
          case 80: {
            Multiple = input.ReadInt32();
            break;
          }
          case 88: {
            Score = input.ReadInt32();
            break;
          }
          case 96: {
            Total = input.ReadInt32();
            break;
          }
          case 104: {
            Seat = input.ReadInt32();
            break;
          }
          case 114: {
            achvs_.AddEntriesFrom(input, _repeated_achvs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class charge_t : pb::IMessage<charge_t> {
    private static readonly pb::MessageParser<charge_t> _parser = new pb::MessageParser<charge_t>(() => new charge_t());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<charge_t> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public charge_t() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public charge_t(charge_t other) : this() {
      phone_ = other.phone_;
      uid_ = other.uid_;
      time_ = other.time_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public charge_t Clone() {
      return new charge_t(this);
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 1;
    private string phone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as charge_t);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(charge_t other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phone != other.Phone) return false;
      if (Uid != other.Uid) return false;
      if (Time != other.Time) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phone.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Phone);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (Amount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(charge_t other) {
      if (other == null) {
        return;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Phone = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
          case 32: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class replays : pb::IMessage<replays> {
    private static readonly pb::MessageParser<replays> _parser = new pb::MessageParser<replays>(() => new replays());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<replays> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public replays() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public replays(replays other) : this() {
      gameId_ = other.gameId_;
      gameCategory_ = other.gameCategory_;
      rounds_ = other.rounds_;
      maxRound_ = other.maxRound_;
      users_ = other.users_.Clone();
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public replays Clone() {
      return new replays(this);
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 1;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "gameCategory" field.</summary>
    public const int GameCategoryFieldNumber = 2;
    private global::Proto3.pb_enum gameCategory_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum GameCategory {
      get { return gameCategory_; }
      set {
        gameCategory_ = value;
      }
    }

    /// <summary>Field number for the "rounds" field.</summary>
    public const int RoundsFieldNumber = 3;
    private int rounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rounds {
      get { return rounds_; }
      set {
        rounds_ = value;
      }
    }

    /// <summary>Field number for the "max_round" field.</summary>
    public const int MaxRoundFieldNumber = 4;
    private int maxRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto3.user_t> _repeated_users_codec
        = pb::FieldCodec.ForMessage(42, global::Proto3.user_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.user_t> users_ = new pbc::RepeatedField<global::Proto3.user_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.user_t> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as replays);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(replays other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (GameCategory != other.GameCategory) return false;
      if (Rounds != other.Rounds) return false;
      if (MaxRound != other.MaxRound) return false;
      if(!users_.Equals(other.users_)) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (GameCategory != 0) hash ^= GameCategory.GetHashCode();
      if (Rounds != 0) hash ^= Rounds.GetHashCode();
      if (MaxRound != 0) hash ^= MaxRound.GetHashCode();
      hash ^= users_.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (GameCategory != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameCategory);
      }
      if (Rounds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rounds);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxRound);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (Timestamp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (GameCategory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameCategory);
      }
      if (Rounds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rounds);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRound);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(replays other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.GameCategory != 0) {
        GameCategory = other.GameCategory;
      }
      if (other.Rounds != 0) {
        Rounds = other.Rounds;
      }
      if (other.MaxRound != 0) {
        MaxRound = other.MaxRound;
      }
      users_.Add(other.users_);
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            gameCategory_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 24: {
            Rounds = input.ReadInt32();
            break;
          }
          case 32: {
            MaxRound = input.ReadInt32();
            break;
          }
          case 42: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class replay : pb::IMessage<replay> {
    private static readonly pb::MessageParser<replay> _parser = new pb::MessageParser<replay>(() => new replay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<replay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public replay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public replay(replay other) : this() {
      gameId_ = other.gameId_;
      banker_ = other.banker_;
      round_ = other.round_;
      piles_ = other.piles_.Clone();
      bottom_ = other.bottom_.Clone();
      hands_ = other.hands_.Clone();
      engage_ = other.engage_.Clone();
      ops_ = other.ops_.Clone();
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public replay Clone() {
      return new replay(this);
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 1;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "banker" field.</summary>
    public const int BankerFieldNumber = 2;
    private int banker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Banker {
      get { return banker_; }
      set {
        banker_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 3;
    private int round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "piles" field.</summary>
    public const int PilesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_piles_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> piles_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Piles {
      get { return piles_; }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_bottom_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> bottom_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bottom {
      get { return bottom_; }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_hands_codec
        = pb::FieldCodec.ForMessage(50, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> hands_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "engage" field.</summary>
    public const int EngageFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_engage_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> engage_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Engage {
      get { return engage_; }
    }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_ops_codec
        = pb::FieldCodec.ForMessage(66, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> ops_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Ops {
      get { return ops_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 9;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as replay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(replay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (Banker != other.Banker) return false;
      if (Round != other.Round) return false;
      if(!piles_.Equals(other.piles_)) return false;
      if(!bottom_.Equals(other.bottom_)) return false;
      if(!hands_.Equals(other.hands_)) return false;
      if(!engage_.Equals(other.engage_)) return false;
      if(!ops_.Equals(other.ops_)) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Banker != 0) hash ^= Banker.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      hash ^= piles_.GetHashCode();
      hash ^= bottom_.GetHashCode();
      hash ^= hands_.GetHashCode();
      hash ^= engage_.GetHashCode();
      hash ^= ops_.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (Banker != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Banker);
      }
      if (Round != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Round);
      }
      piles_.WriteTo(output, _repeated_piles_codec);
      bottom_.WriteTo(output, _repeated_bottom_codec);
      hands_.WriteTo(output, _repeated_hands_codec);
      engage_.WriteTo(output, _repeated_engage_codec);
      ops_.WriteTo(output, _repeated_ops_codec);
      if (Timestamp != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (Banker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Banker);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      size += piles_.CalculateSize(_repeated_piles_codec);
      size += bottom_.CalculateSize(_repeated_bottom_codec);
      size += hands_.CalculateSize(_repeated_hands_codec);
      size += engage_.CalculateSize(_repeated_engage_codec);
      size += ops_.CalculateSize(_repeated_ops_codec);
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(replay other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Banker != 0) {
        Banker = other.Banker;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      piles_.Add(other.piles_);
      bottom_.Add(other.bottom_);
      hands_.Add(other.hands_);
      engage_.Add(other.engage_);
      ops_.Add(other.ops_);
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 16: {
            Banker = input.ReadInt32();
            break;
          }
          case 24: {
            Round = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            piles_.AddEntriesFrom(input, _repeated_piles_codec);
            break;
          }
          case 42:
          case 40: {
            bottom_.AddEntriesFrom(input, _repeated_bottom_codec);
            break;
          }
          case 50: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 58:
          case 56: {
            engage_.AddEntriesFrom(input, _repeated_engage_codec);
            break;
          }
          case 66: {
            ops_.AddEntriesFrom(input, _repeated_ops_codec);
            break;
          }
          case 72: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgBase : pb::IMessage<MsgBase> {
    private static readonly pb::MessageParser<MsgBase> _parser = new pb::MessageParser<MsgBase>(() => new MsgBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase(MsgBase other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBase Clone() {
      return new MsgBase(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBase other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ----------------------------------------------------------------
  ///  Lobby
  /// </summary>
  public sealed partial class MsgCLLogin : pb::IMessage<MsgCLLogin> {
    private static readonly pb::MessageParser<MsgCLLogin> _parser = new pb::MessageParser<MsgCLLogin>(() => new MsgCLLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCLLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLLogin(MsgCLLogin other) : this() {
      mid_ = other.mid_;
      version_ = other.version_;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLLogin Clone() {
      return new MsgCLLogin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Proto3.user_t user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.user_t User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCLLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCLLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCLLogin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Proto3.user_t();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Proto3.user_t();
            }
            input.ReadMessage(user_);
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgLCLogin : pb::IMessage<MsgLCLogin> {
    private static readonly pb::MessageParser<MsgLCLogin> _parser = new pb::MessageParser<MsgLCLogin>(() => new MsgLCLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLCLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCLogin(MsgLCLogin other) : this() {
      mid_ = other.mid_;
      version_ = other.version_;
      session_ = other.session_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      redir_ = other.redir_;
      assets_ = other.assets_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCLogin Clone() {
      return new MsgLCLogin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 3;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 4;
    private global::Proto3.player_t player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.player_t Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "redir" field.</summary>
    public const int RedirFieldNumber = 5;
    private string redir_ = "";
    /// <summary>
    /// redirection uri
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Redir {
      get { return redir_; }
      set {
        redir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assets" field.</summary>
    public const int AssetsFieldNumber = 6;
    private string assets_ = "";
    /// <summary>
    /// assets uri
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Assets {
      get { return assets_; }
      set {
        assets_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 7;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLCLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLCLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Version != other.Version) return false;
      if (Session != other.Session) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (Redir != other.Redir) return false;
      if (Assets != other.Assets) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (Redir.Length != 0) hash ^= Redir.GetHashCode();
      if (Assets.Length != 0) hash ^= Assets.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (Session != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Session);
      }
      if (player_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Player);
      }
      if (Redir.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Redir);
      }
      if (Assets.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Assets);
      }
      if (Result != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (Redir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Redir);
      }
      if (Assets.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Assets);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLCLogin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Proto3.player_t();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.Redir.Length != 0) {
        Redir = other.Redir;
      }
      if (other.Assets.Length != 0) {
        Assets = other.Assets;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 24: {
            Session = input.ReadUInt64();
            break;
          }
          case 34: {
            if (player_ == null) {
              player_ = new global::Proto3.player_t();
            }
            input.ReadMessage(player_);
            break;
          }
          case 42: {
            Redir = input.ReadString();
            break;
          }
          case 50: {
            Assets = input.ReadString();
            break;
          }
          case 56: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCLLobby : pb::IMessage<MsgCLLobby> {
    private static readonly pb::MessageParser<MsgCLLobby> _parser = new pb::MessageParser<MsgCLLobby>(() => new MsgCLLobby());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCLLobby> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLLobby() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLLobby(MsgCLLobby other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      version_ = other.version_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLLobby Clone() {
      return new MsgCLLobby(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 4;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCLLobby);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCLLobby other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Version != other.Version) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Session != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCLLobby other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Session = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgLCLobby : pb::IMessage<MsgLCLobby> {
    private static readonly pb::MessageParser<MsgLCLobby> _parser = new pb::MessageParser<MsgLCLobby>(() => new MsgLCLobby());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLCLobby> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCLobby() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCLobby(MsgLCLobby other) : this() {
      mid_ = other.mid_;
      Lobby = other.lobby_ != null ? other.Lobby.Clone() : null;
      key_ = other.key_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCLobby Clone() {
      return new MsgLCLobby(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "lobby" field.</summary>
    public const int LobbyFieldNumber = 2;
    private global::Proto3.lobby_t lobby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.lobby_t Lobby {
      get { return lobby_; }
      set {
        lobby_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLCLobby);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLCLobby other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Lobby, other.Lobby)) return false;
      if (Key != other.Key) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (lobby_ != null) hash ^= Lobby.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (lobby_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lobby);
      }
      if (Key != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Key);
      }
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (lobby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lobby);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLCLobby other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.lobby_ != null) {
        if (lobby_ == null) {
          lobby_ = new global::Proto3.lobby_t();
        }
        Lobby.MergeFrom(other.Lobby);
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (lobby_ == null) {
              lobby_ = new global::Proto3.lobby_t();
            }
            input.ReadMessage(lobby_);
            break;
          }
          case 24: {
            Key = input.ReadInt32();
            break;
          }
          case 32: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCLReplays : pb::IMessage<MsgCLReplays> {
    private static readonly pb::MessageParser<MsgCLReplays> _parser = new pb::MessageParser<MsgCLReplays>(() => new MsgCLReplays());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCLReplays> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLReplays() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLReplays(MsgCLReplays other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLReplays Clone() {
      return new MsgCLReplays(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 3;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCLReplays);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCLReplays other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Session != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCLReplays other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Session = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgLCReplays : pb::IMessage<MsgLCReplays> {
    private static readonly pb::MessageParser<MsgLCReplays> _parser = new pb::MessageParser<MsgLCReplays>(() => new MsgLCReplays());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLCReplays> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCReplays() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCReplays(MsgLCReplays other) : this() {
      mid_ = other.mid_;
      all_ = other.all_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCReplays Clone() {
      return new MsgLCReplays(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.replays> _repeated_all_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.replays.Parser);
    private readonly pbc::RepeatedField<global::Proto3.replays> all_ = new pbc::RepeatedField<global::Proto3.replays>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.replays> All {
      get { return all_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLCReplays);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLCReplays other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if(!all_.Equals(other.all_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      hash ^= all_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      all_.WriteTo(output, _repeated_all_codec);
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      size += all_.CalculateSize(_repeated_all_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLCReplays other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      all_.Add(other.all_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            all_.AddEntriesFrom(input, _repeated_all_codec);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCLReplay : pb::IMessage<MsgCLReplay> {
    private static readonly pb::MessageParser<MsgCLReplay> _parser = new pb::MessageParser<MsgCLReplay>(() => new MsgCLReplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCLReplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLReplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLReplay(MsgCLReplay other) : this() {
      mid_ = other.mid_;
      gameId_ = other.gameId_;
      round_ = other.round_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCLReplay Clone() {
      return new MsgCLReplay(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 2;
    private uint gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 3;
    private int round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 4;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCLReplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCLReplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (GameId != other.GameId) return false;
      if (Round != other.Round) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameId);
      }
      if (Round != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Round);
      }
      if (Session != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCLReplay other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            GameId = input.ReadUInt32();
            break;
          }
          case 24: {
            Round = input.ReadInt32();
            break;
          }
          case 32: {
            Session = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgLCReplay : pb::IMessage<MsgLCReplay> {
    private static readonly pb::MessageParser<MsgLCReplay> _parser = new pb::MessageParser<MsgLCReplay>(() => new MsgLCReplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgLCReplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCReplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCReplay(MsgLCReplay other) : this() {
      mid_ = other.mid_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgLCReplay Clone() {
      return new MsgLCReplay(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Proto3.replay data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.replay Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgLCReplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgLCReplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgLCReplay other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Proto3.replay();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Proto3.replay();
            }
            input.ReadMessage(data_);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ----------------------------------------------------------------
  ///  Payment
  /// </summary>
  public sealed partial class MsgCPLogin : pb::IMessage<MsgCPLogin> {
    private static readonly pb::MessageParser<MsgCPLogin> _parser = new pb::MessageParser<MsgCPLogin>(() => new MsgCPLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCPLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPLogin(MsgCPLogin other) : this() {
      mid_ = other.mid_;
      version_ = other.version_;
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPLogin Clone() {
      return new MsgCPLogin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Proto3.user_t user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.user_t User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCPLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCPLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCPLogin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Proto3.user_t();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 26: {
            if (user_ == null) {
              user_ = new global::Proto3.user_t();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgPCLogin : pb::IMessage<MsgPCLogin> {
    private static readonly pb::MessageParser<MsgPCLogin> _parser = new pb::MessageParser<MsgPCLogin>(() => new MsgPCLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPCLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCLogin(MsgPCLogin other) : this() {
      mid_ = other.mid_;
      version_ = other.version_;
      session_ = other.session_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      redir_ = other.redir_;
      assets_ = other.assets_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCLogin Clone() {
      return new MsgPCLogin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 3;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 4;
    private global::Proto3.player_t player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.player_t Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "redir" field.</summary>
    public const int RedirFieldNumber = 5;
    private string redir_ = "";
    /// <summary>
    /// redirection uri
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Redir {
      get { return redir_; }
      set {
        redir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assets" field.</summary>
    public const int AssetsFieldNumber = 6;
    private string assets_ = "";
    /// <summary>
    /// assets uri
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Assets {
      get { return assets_; }
      set {
        assets_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 7;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPCLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPCLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Version != other.Version) return false;
      if (Session != other.Session) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (Redir != other.Redir) return false;
      if (Assets != other.Assets) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (Redir.Length != 0) hash ^= Redir.GetHashCode();
      if (Assets.Length != 0) hash ^= Assets.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Version);
      }
      if (Session != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Session);
      }
      if (player_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Player);
      }
      if (Redir.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Redir);
      }
      if (Assets.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Assets);
      }
      if (Result != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (Redir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Redir);
      }
      if (Assets.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Assets);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPCLogin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Proto3.player_t();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.Redir.Length != 0) {
        Redir = other.Redir;
      }
      if (other.Assets.Length != 0) {
        Assets = other.Assets;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Version = input.ReadUInt32();
            break;
          }
          case 24: {
            Session = input.ReadUInt64();
            break;
          }
          case 34: {
            if (player_ == null) {
              player_ = new global::Proto3.player_t();
            }
            input.ReadMessage(player_);
            break;
          }
          case 42: {
            Redir = input.ReadString();
            break;
          }
          case 50: {
            Assets = input.ReadString();
            break;
          }
          case 56: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCPOrder : pb::IMessage<MsgCPOrder> {
    private static readonly pb::MessageParser<MsgCPOrder> _parser = new pb::MessageParser<MsgCPOrder>(() => new MsgCPOrder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCPOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPOrder(MsgCPOrder other) : this() {
      mid_ = other.mid_;
      session_ = other.session_;
      amount_ = other.amount_;
      uid_ = other.uid_;
      pkcs8_ = other.pkcs8_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPOrder Clone() {
      return new MsgCPOrder(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private uint amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pkcs8" field.</summary>
    public const int Pkcs8FieldNumber = 5;
    private bool pkcs8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Pkcs8 {
      get { return pkcs8_; }
      set {
        pkcs8_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCPOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCPOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Session != other.Session) return false;
      if (Amount != other.Amount) return false;
      if (Uid != other.Uid) return false;
      if (Pkcs8 != other.Pkcs8) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Pkcs8 != false) hash ^= Pkcs8.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Session != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Session);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Amount);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Uid);
      }
      if (Pkcs8 != false) {
        output.WriteRawTag(40);
        output.WriteBool(Pkcs8);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Pkcs8 != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCPOrder other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Pkcs8 != false) {
        Pkcs8 = other.Pkcs8;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Session = input.ReadUInt64();
            break;
          }
          case 24: {
            Amount = input.ReadUInt32();
            break;
          }
          case 34: {
            Uid = input.ReadString();
            break;
          }
          case 40: {
            Pkcs8 = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgPCOrder : pb::IMessage<MsgPCOrder> {
    private static readonly pb::MessageParser<MsgPCOrder> _parser = new pb::MessageParser<MsgPCOrder>(() => new MsgPCOrder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPCOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCOrder(MsgPCOrder other) : this() {
      mid_ = other.mid_;
      appScheme_ = other.appScheme_;
      orderString_ = other.orderString_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCOrder Clone() {
      return new MsgPCOrder(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "appScheme" field.</summary>
    public const int AppSchemeFieldNumber = 2;
    private string appScheme_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppScheme {
      get { return appScheme_; }
      set {
        appScheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderString" field.</summary>
    public const int OrderStringFieldNumber = 3;
    private string orderString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderString {
      get { return orderString_; }
      set {
        orderString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPCOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPCOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (AppScheme != other.AppScheme) return false;
      if (OrderString != other.OrderString) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (AppScheme.Length != 0) hash ^= AppScheme.GetHashCode();
      if (OrderString.Length != 0) hash ^= OrderString.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (AppScheme.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppScheme);
      }
      if (OrderString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderString);
      }
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (AppScheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppScheme);
      }
      if (OrderString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderString);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPCOrder other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.AppScheme.Length != 0) {
        AppScheme = other.AppScheme;
      }
      if (other.OrderString.Length != 0) {
        OrderString = other.OrderString;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            AppScheme = input.ReadString();
            break;
          }
          case 26: {
            OrderString = input.ReadString();
            break;
          }
          case 32: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCPVerify : pb::IMessage<MsgCPVerify> {
    private static readonly pb::MessageParser<MsgCPVerify> _parser = new pb::MessageParser<MsgCPVerify>(() => new MsgCPVerify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCPVerify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPVerify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPVerify(MsgCPVerify other) : this() {
      mid_ = other.mid_;
      session_ = other.session_;
      appId_ = other.appId_;
      sellerId_ = other.sellerId_;
      outTradeNo_ = other.outTradeNo_;
      totalAmount_ = other.totalAmount_;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCPVerify Clone() {
      return new MsgCPVerify(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 3;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seller_id" field.</summary>
    public const int SellerIdFieldNumber = 4;
    private string sellerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellerId {
      get { return sellerId_; }
      set {
        sellerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "out_trade_no" field.</summary>
    public const int OutTradeNoFieldNumber = 5;
    private string outTradeNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutTradeNo {
      get { return outTradeNo_; }
      set {
        outTradeNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_amount" field.</summary>
    public const int TotalAmountFieldNumber = 6;
    private uint totalAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalAmount {
      get { return totalAmount_; }
      set {
        totalAmount_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 7;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCPVerify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCPVerify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Session != other.Session) return false;
      if (AppId != other.AppId) return false;
      if (SellerId != other.SellerId) return false;
      if (OutTradeNo != other.OutTradeNo) return false;
      if (TotalAmount != other.TotalAmount) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (SellerId.Length != 0) hash ^= SellerId.GetHashCode();
      if (OutTradeNo.Length != 0) hash ^= OutTradeNo.GetHashCode();
      if (TotalAmount != 0) hash ^= TotalAmount.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Session != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Session);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppId);
      }
      if (SellerId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SellerId);
      }
      if (OutTradeNo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OutTradeNo);
      }
      if (TotalAmount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalAmount);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (SellerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellerId);
      }
      if (OutTradeNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutTradeNo);
      }
      if (TotalAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalAmount);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCPVerify other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.SellerId.Length != 0) {
        SellerId = other.SellerId;
      }
      if (other.OutTradeNo.Length != 0) {
        OutTradeNo = other.OutTradeNo;
      }
      if (other.TotalAmount != 0) {
        TotalAmount = other.TotalAmount;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Session = input.ReadUInt64();
            break;
          }
          case 26: {
            AppId = input.ReadString();
            break;
          }
          case 34: {
            SellerId = input.ReadString();
            break;
          }
          case 42: {
            OutTradeNo = input.ReadString();
            break;
          }
          case 48: {
            TotalAmount = input.ReadUInt32();
            break;
          }
          case 58: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgPCVerify : pb::IMessage<MsgPCVerify> {
    private static readonly pb::MessageParser<MsgPCVerify> _parser = new pb::MessageParser<MsgPCVerify>(() => new MsgPCVerify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgPCVerify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCVerify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCVerify(MsgPCVerify other) : this() {
      mid_ = other.mid_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgPCVerify Clone() {
      return new MsgPCVerify(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Proto3.player_t player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.player_t Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgPCVerify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgPCVerify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgPCVerify other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Proto3.player_t();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::Proto3.player_t();
            }
            input.ReadMessage(player_);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// deprecated below
  /// </summary>
  public sealed partial class MsgCHRegister : pb::IMessage<MsgCHRegister> {
    private static readonly pb::MessageParser<MsgCHRegister> _parser = new pb::MessageParser<MsgCHRegister>(() => new MsgCHRegister());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCHRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHRegister(MsgCHRegister other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      phone_ = other.phone_;
      pswd_ = other.pswd_;
      name_ = other.name_;
      address_ = other.address_;
      idcard_ = other.idcard_;
      wechat_ = other.wechat_;
      alipay_ = other.alipay_;
      verifycode_ = other.verifycode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHRegister Clone() {
      return new MsgCHRegister(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 3;
    private string phone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pswd" field.</summary>
    public const int PswdFieldNumber = 4;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 6;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idcard" field.</summary>
    public const int IdcardFieldNumber = 7;
    private string idcard_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idcard {
      get { return idcard_; }
      set {
        idcard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wechat" field.</summary>
    public const int WechatFieldNumber = 8;
    private string wechat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wechat {
      get { return wechat_; }
      set {
        wechat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alipay" field.</summary>
    public const int AlipayFieldNumber = 9;
    private string alipay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alipay {
      get { return alipay_; }
      set {
        alipay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verifycode" field.</summary>
    public const int VerifycodeFieldNumber = 10;
    private string verifycode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Verifycode {
      get { return verifycode_; }
      set {
        verifycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCHRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCHRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Phone != other.Phone) return false;
      if (Pswd != other.Pswd) return false;
      if (Name != other.Name) return false;
      if (Address != other.Address) return false;
      if (Idcard != other.Idcard) return false;
      if (Wechat != other.Wechat) return false;
      if (Alipay != other.Alipay) return false;
      if (Verifycode != other.Verifycode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Idcard.Length != 0) hash ^= Idcard.GetHashCode();
      if (Wechat.Length != 0) hash ^= Wechat.GetHashCode();
      if (Alipay.Length != 0) hash ^= Alipay.GetHashCode();
      if (Verifycode.Length != 0) hash ^= Verifycode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Phone);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Pswd);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Address);
      }
      if (Idcard.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Idcard);
      }
      if (Wechat.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Wechat);
      }
      if (Alipay.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Alipay);
      }
      if (Verifycode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Verifycode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Idcard.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Idcard);
      }
      if (Wechat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wechat);
      }
      if (Alipay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alipay);
      }
      if (Verifycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Verifycode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCHRegister other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Idcard.Length != 0) {
        Idcard = other.Idcard;
      }
      if (other.Wechat.Length != 0) {
        Wechat = other.Wechat;
      }
      if (other.Alipay.Length != 0) {
        Alipay = other.Alipay;
      }
      if (other.Verifycode.Length != 0) {
        Verifycode = other.Verifycode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            Phone = input.ReadString();
            break;
          }
          case 34: {
            Pswd = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Address = input.ReadString();
            break;
          }
          case 58: {
            Idcard = input.ReadString();
            break;
          }
          case 66: {
            Wechat = input.ReadString();
            break;
          }
          case 74: {
            Alipay = input.ReadString();
            break;
          }
          case 82: {
            Verifycode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgHCRegister : pb::IMessage<MsgHCRegister> {
    private static readonly pb::MessageParser<MsgHCRegister> _parser = new pb::MessageParser<MsgHCRegister>(() => new MsgHCRegister());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgHCRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCRegister(MsgHCRegister other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCRegister Clone() {
      return new MsgHCRegister(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgHCRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgHCRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgHCRegister other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCHCharge : pb::IMessage<MsgCHCharge> {
    private static readonly pb::MessageParser<MsgCHCharge> _parser = new pb::MessageParser<MsgCHCharge>(() => new MsgCHCharge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCHCharge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHCharge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHCharge(MsgCHCharge other) : this() {
      mid_ = other.mid_;
      session_ = other.session_;
      uid_ = other.uid_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHCharge Clone() {
      return new MsgCHCharge(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCHCharge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCHCharge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Session != other.Session) return false;
      if (Uid != other.Uid) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Session != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Session);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Uid);
      }
      if (Amount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCHCharge other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Session = input.ReadUInt64();
            break;
          }
          case 26: {
            Uid = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgHCCharge : pb::IMessage<MsgHCCharge> {
    private static readonly pb::MessageParser<MsgHCCharge> _parser = new pb::MessageParser<MsgHCCharge>(() => new MsgHCCharge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgHCCharge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCCharge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCCharge(MsgHCCharge other) : this() {
      mid_ = other.mid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCCharge Clone() {
      return new MsgHCCharge(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 5;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgHCCharge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgHCCharge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Result != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgHCCharge other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 40: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCHQuery : pb::IMessage<MsgCHQuery> {
    private static readonly pb::MessageParser<MsgCHQuery> _parser = new pb::MessageParser<MsgCHQuery>(() => new MsgCHQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCHQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHQuery(MsgCHQuery other) : this() {
      mid_ = other.mid_;
      session_ = other.session_;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCHQuery Clone() {
      return new MsgCHQuery(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCHQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCHQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Session != other.Session) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Session != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Session);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCHQuery other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Session = input.ReadUInt64();
            break;
          }
          case 26: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgHCQuery : pb::IMessage<MsgHCQuery> {
    private static readonly pb::MessageParser<MsgHCQuery> _parser = new pb::MessageParser<MsgHCQuery>(() => new MsgHCQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgHCQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCQuery(MsgHCQuery other) : this() {
      mid_ = other.mid_;
      log_ = other.log_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgHCQuery Clone() {
      return new MsgHCQuery(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.charge_t> _repeated_log_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.charge_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.charge_t> log_ = new pbc::RepeatedField<global::Proto3.charge_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.charge_t> Log {
      get { return log_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgHCQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgHCQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if(!log_.Equals(other.log_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      hash ^= log_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      log_.WriteTo(output, _repeated_log_codec);
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      size += log_.CalculateSize(_repeated_log_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgHCQuery other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      log_.Add(other.log_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            log_.AddEntriesFrom(input, _repeated_log_codec);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ----------------------------------------------------------------
  ///  Node
  /// </summary>
  public sealed partial class MsgCNConnect : pb::IMessage<MsgCNConnect> {
    private static readonly pb::MessageParser<MsgCNConnect> _parser = new pb::MessageParser<MsgCNConnect>(() => new MsgCNConnect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNConnect(MsgCNConnect other) : this() {
      mid_ = other.mid_;
      uid_ = other.uid_;
      version_ = other.version_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNConnect Clone() {
      return new MsgCNConnect(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 4;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Uid != other.Uid) return false;
      if (Version != other.Version) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Session != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNConnect other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Session = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCConnect : pb::IMessage<MsgNCConnect> {
    private static readonly pb::MessageParser<MsgNCConnect> _parser = new pb::MessageParser<MsgNCConnect>(() => new MsgNCConnect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCConnect(MsgNCConnect other) : this() {
      mid_ = other.mid_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCConnect Clone() {
      return new MsgNCConnect(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Proto3.player_t player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.player_t Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCConnect other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Proto3.player_t();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::Proto3.player_t();
            }
            input.ReadMessage(player_);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNCreate : pb::IMessage<MsgCNCreate> {
    private static readonly pb::MessageParser<MsgCNCreate> _parser = new pb::MessageParser<MsgCNCreate>(() => new MsgCNCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate(MsgCNCreate other) : this() {
      mid_ = other.mid_;
      game_ = other.game_;
      options_ = other.options_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNCreate Clone() {
      return new MsgCNCreate(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 2;
    private global::Proto3.pb_enum game_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto3.key_value> _repeated_options_codec
        = pb::FieldCodec.ForMessage(26, global::Proto3.key_value.Parser);
    private readonly pbc::RepeatedField<global::Proto3.key_value> options_ = new pbc::RepeatedField<global::Proto3.key_value>();
    /// <summary>
    /// anti,rounds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.key_value> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Game != other.Game) return false;
      if(!options_.Equals(other.options_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Game != 0) hash ^= Game.GetHashCode();
      hash ^= options_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Game != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Game);
      }
      options_.WriteTo(output, _repeated_options_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Game);
      }
      size += options_.CalculateSize(_repeated_options_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNCreate other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      options_.Add(other.options_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            game_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 26: {
            options_.AddEntriesFrom(input, _repeated_options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCCreate : pb::IMessage<MsgNCCreate> {
    private static readonly pb::MessageParser<MsgNCCreate> _parser = new pb::MessageParser<MsgNCCreate>(() => new MsgNCCreate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate(MsgNCCreate other) : this() {
      mid_ = other.mid_;
      gameId_ = other.gameId_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCCreate Clone() {
      return new MsgNCCreate(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (GameId != other.GameId) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameId);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCCreate other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            GameId = input.ReadInt32();
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNJoin : pb::IMessage<MsgCNJoin> {
    private static readonly pb::MessageParser<MsgCNJoin> _parser = new pb::MessageParser<MsgCNJoin>(() => new MsgCNJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin(MsgCNJoin other) : this() {
      mid_ = other.mid_;
      gameId_ = other.gameId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNJoin Clone() {
      return new MsgCNJoin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (GameId != other.GameId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNJoin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            GameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCJoin : pb::IMessage<MsgNCJoin> {
    private static readonly pb::MessageParser<MsgNCJoin> _parser = new pb::MessageParser<MsgNCJoin>(() => new MsgNCJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin(MsgNCJoin other) : this() {
      mid_ = other.mid_;
      game_ = other.game_;
      category_ = other.category_;
      players_ = other.players_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCJoin Clone() {
      return new MsgNCJoin(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 2;
    private global::Proto3.pb_enum game_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 3;
    private global::Proto3.pb_enum category_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto3.player_t> _repeated_players_codec
        = pb::FieldCodec.ForMessage(34, global::Proto3.player_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.player_t> players_ = new pbc::RepeatedField<global::Proto3.player_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.player_t> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 5;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Game != other.Game) return false;
      if (Category != other.Category) return false;
      if(!players_.Equals(other.players_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      hash ^= players_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Game != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Game);
      }
      if (Category != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Category);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (Result != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Game);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCJoin other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      players_.Add(other.players_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            game_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 24: {
            category_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
          case 34: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 40: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNReady : pb::IMessage<MsgCNReady> {
    private static readonly pb::MessageParser<MsgCNReady> _parser = new pb::MessageParser<MsgCNReady>(() => new MsgCNReady());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNReady(MsgCNReady other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNReady Clone() {
      return new MsgCNReady(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNReady other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCReady : pb::IMessage<MsgNCReady> {
    private static readonly pb::MessageParser<MsgNCReady> _parser = new pb::MessageParser<MsgNCReady>(() => new MsgNCReady());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCReady(MsgNCReady other) : this() {
      mid_ = other.mid_;
      pos_ = other.pos_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCReady Clone() {
      return new MsgNCReady(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Pos != other.Pos) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCReady other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNRevive : pb::IMessage<MsgCNRevive> {
    private static readonly pb::MessageParser<MsgCNRevive> _parser = new pb::MessageParser<MsgCNRevive>(() => new MsgCNRevive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNRevive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNRevive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNRevive(MsgCNRevive other) : this() {
      mid_ = other.mid_;
      game_ = other.game_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNRevive Clone() {
      return new MsgCNRevive(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 2;
    private int game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 3;
    private ulong session_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Session {
      get { return session_; }
      set {
        session_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNRevive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNRevive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Game != other.Game) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Game != 0) hash ^= Game.GetHashCode();
      if (Session != 0UL) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Game != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Game);
      }
      if (Session != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Game);
      }
      if (Session != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNRevive other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Game != 0) {
        Game = other.Game;
      }
      if (other.Session != 0UL) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Game = input.ReadInt32();
            break;
          }
          case 24: {
            Session = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCRevive : pb::IMessage<MsgNCRevive> {
    private static readonly pb::MessageParser<MsgNCRevive> _parser = new pb::MessageParser<MsgNCRevive>(() => new MsgNCRevive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCRevive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCRevive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCRevive(MsgNCRevive other) : this() {
      mid_ = other.mid_;
      Deal = other.deal_ != null ? other.Deal.Clone() : null;
      play_ = other.play_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCRevive Clone() {
      return new MsgNCRevive(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "deal" field.</summary>
    public const int DealFieldNumber = 2;
    private global::Proto3.MsgNCDeal deal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.MsgNCDeal Deal {
      get { return deal_; }
      set {
        deal_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto3.play_t> _repeated_play_codec
        = pb::FieldCodec.ForMessage(26, global::Proto3.play_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.play_t> play_ = new pbc::RepeatedField<global::Proto3.play_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.play_t> Play {
      get { return play_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCRevive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCRevive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Deal, other.Deal)) return false;
      if(!play_.Equals(other.play_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (deal_ != null) hash ^= Deal.GetHashCode();
      hash ^= play_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (deal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deal);
      }
      play_.WriteTo(output, _repeated_play_codec);
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (deal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deal);
      }
      size += play_.CalculateSize(_repeated_play_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCRevive other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.deal_ != null) {
        if (deal_ == null) {
          deal_ = new global::Proto3.MsgNCDeal();
        }
        Deal.MergeFrom(other.Deal);
      }
      play_.Add(other.play_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (deal_ == null) {
              deal_ = new global::Proto3.MsgNCDeal();
            }
            input.ReadMessage(deal_);
            break;
          }
          case 26: {
            play_.AddEntriesFrom(input, _repeated_play_codec);
            break;
          }
          case 32: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDeal : pb::IMessage<MsgNCDeal> {
    private static readonly pb::MessageParser<MsgNCDeal> _parser = new pb::MessageParser<MsgNCDeal>(() => new MsgNCDeal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDeal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDeal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDeal(MsgNCDeal other) : this() {
      mid_ = other.mid_;
      banker_ = other.banker_;
      pos_ = other.pos_;
      ante_ = other.ante_;
      multiple_ = other.multiple_;
      hands_ = other.hands_.Clone();
      bottom_ = other.bottom_.Clone();
      count_ = other.count_.Clone();
      piles_ = other.piles_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDeal Clone() {
      return new MsgNCDeal(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "banker" field.</summary>
    public const int BankerFieldNumber = 2;
    private int banker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Banker {
      get { return banker_; }
      set {
        banker_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 4;
    private int ante_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ante {
      get { return ante_; }
      set {
        ante_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 5;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "hands" field.</summary>
    public const int HandsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_hands_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> hands_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Hands {
      get { return hands_; }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_bottom_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> bottom_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bottom {
      get { return bottom_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_count_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// hands count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Count {
      get { return count_; }
    }

    /// <summary>Field number for the "piles" field.</summary>
    public const int PilesFieldNumber = 9;
    private int piles_;
    /// <summary>
    /// cards in pile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Piles {
      get { return piles_; }
      set {
        piles_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 10;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDeal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDeal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Banker != other.Banker) return false;
      if (Pos != other.Pos) return false;
      if (Ante != other.Ante) return false;
      if (Multiple != other.Multiple) return false;
      if(!hands_.Equals(other.hands_)) return false;
      if(!bottom_.Equals(other.bottom_)) return false;
      if(!count_.Equals(other.count_)) return false;
      if (Piles != other.Piles) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Banker != 0) hash ^= Banker.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Ante != 0) hash ^= Ante.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      hash ^= hands_.GetHashCode();
      hash ^= bottom_.GetHashCode();
      hash ^= count_.GetHashCode();
      if (Piles != 0) hash ^= Piles.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Banker != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Banker);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (Ante != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ante);
      }
      if (Multiple != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Multiple);
      }
      hands_.WriteTo(output, _repeated_hands_codec);
      bottom_.WriteTo(output, _repeated_bottom_codec);
      count_.WriteTo(output, _repeated_count_codec);
      if (Piles != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Piles);
      }
      if (Result != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Banker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Banker);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Ante != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ante);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      size += hands_.CalculateSize(_repeated_hands_codec);
      size += bottom_.CalculateSize(_repeated_bottom_codec);
      size += count_.CalculateSize(_repeated_count_codec);
      if (Piles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Piles);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDeal other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Banker != 0) {
        Banker = other.Banker;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Ante != 0) {
        Ante = other.Ante;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      hands_.Add(other.hands_);
      bottom_.Add(other.bottom_);
      count_.Add(other.count_);
      if (other.Piles != 0) {
        Piles = other.Piles;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Banker = input.ReadInt32();
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
          case 32: {
            Ante = input.ReadInt32();
            break;
          }
          case 40: {
            Multiple = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            hands_.AddEntriesFrom(input, _repeated_hands_codec);
            break;
          }
          case 58:
          case 56: {
            bottom_.AddEntriesFrom(input, _repeated_bottom_codec);
            break;
          }
          case 66:
          case 64: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
          case 72: {
            Piles = input.ReadInt32();
            break;
          }
          case 80: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNEngage : pb::IMessage<MsgCNEngage> {
    private static readonly pb::MessageParser<MsgCNEngage> _parser = new pb::MessageParser<MsgCNEngage>(() => new MsgCNEngage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNEngage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEngage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEngage(MsgCNEngage other) : this() {
      mid_ = other.mid_;
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNEngage Clone() {
      return new MsgCNEngage(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNEngage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNEngage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Key != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNEngage other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Key = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCEngage : pb::IMessage<MsgNCEngage> {
    private static readonly pb::MessageParser<MsgNCEngage> _parser = new pb::MessageParser<MsgNCEngage>(() => new MsgNCEngage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCEngage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEngage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEngage(MsgNCEngage other) : this() {
      mid_ = other.mid_;
      keys_ = other.keys_.Clone();
      bunch_ = other.bunch_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCEngage Clone() {
      return new MsgNCEngage(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_keys_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> keys_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Keys {
      get { return keys_; }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_bunch_codec
        = pb::FieldCodec.ForMessage(26, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> bunch_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Bunch {
      get { return bunch_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 6;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCEngage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCEngage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if(!keys_.Equals(other.keys_)) return false;
      if(!bunch_.Equals(other.bunch_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      hash ^= keys_.GetHashCode();
      hash ^= bunch_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      bunch_.WriteTo(output, _repeated_bunch_codec);
      if (Result != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      size += bunch_.CalculateSize(_repeated_bunch_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCEngage other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      keys_.Add(other.keys_);
      bunch_.Add(other.bunch_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 26: {
            bunch_.AddEntriesFrom(input, _repeated_bunch_codec);
            break;
          }
          case 48: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDiscard : pb::IMessage<MsgCNDiscard> {
    private static readonly pb::MessageParser<MsgCNDiscard> _parser = new pb::MessageParser<MsgCNDiscard>(() => new MsgCNDiscard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDiscard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard(MsgCNDiscard other) : this() {
      mid_ = other.mid_;
      Bunch = other.bunch_ != null ? other.Bunch.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDiscard Clone() {
      return new MsgCNDiscard(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 2;
    private global::Proto3.bunch_t bunch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.bunch_t Bunch {
      get { return bunch_; }
      set {
        bunch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDiscard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDiscard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Bunch, other.Bunch)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (bunch_ != null) hash ^= Bunch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (bunch_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bunch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (bunch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bunch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDiscard other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.bunch_ != null) {
        if (bunch_ == null) {
          bunch_ = new global::Proto3.bunch_t();
        }
        Bunch.MergeFrom(other.Bunch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (bunch_ == null) {
              bunch_ = new global::Proto3.bunch_t();
            }
            input.ReadMessage(bunch_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDiscard : pb::IMessage<MsgNCDiscard> {
    private static readonly pb::MessageParser<MsgNCDiscard> _parser = new pb::MessageParser<MsgNCDiscard>(() => new MsgNCDiscard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDiscard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard(MsgNCDiscard other) : this() {
      mid_ = other.mid_;
      Bunch = other.bunch_ != null ? other.Bunch.Clone() : null;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDiscard Clone() {
      return new MsgNCDiscard(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 2;
    private global::Proto3.bunch_t bunch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.bunch_t Bunch {
      get { return bunch_; }
      set {
        bunch_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDiscard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDiscard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Bunch, other.Bunch)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (bunch_ != null) hash ^= Bunch.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (bunch_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bunch);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (bunch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bunch);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDiscard other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.bunch_ != null) {
        if (bunch_ == null) {
          bunch_ = new global::Proto3.bunch_t();
        }
        Bunch.MergeFrom(other.Bunch);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (bunch_ == null) {
              bunch_ = new global::Proto3.bunch_t();
            }
            input.ReadMessage(bunch_);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNMeld : pb::IMessage<MsgCNMeld> {
    private static readonly pb::MessageParser<MsgCNMeld> _parser = new pb::MessageParser<MsgCNMeld>(() => new MsgCNMeld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNMeld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld(MsgCNMeld other) : this() {
      mid_ = other.mid_;
      Bunch = other.bunch_ != null ? other.Bunch.Clone() : null;
      extra_ = other.extra_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNMeld Clone() {
      return new MsgCNMeld(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 2;
    private global::Proto3.bunch_t bunch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.bunch_t Bunch {
      get { return bunch_; }
      set {
        bunch_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto3.bunch_t> _repeated_extra_codec
        = pb::FieldCodec.ForMessage(26, global::Proto3.bunch_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.bunch_t> extra_ = new pbc::RepeatedField<global::Proto3.bunch_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.bunch_t> Extra {
      get { return extra_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNMeld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNMeld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Bunch, other.Bunch)) return false;
      if(!extra_.Equals(other.extra_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (bunch_ != null) hash ^= Bunch.GetHashCode();
      hash ^= extra_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (bunch_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bunch);
      }
      extra_.WriteTo(output, _repeated_extra_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (bunch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bunch);
      }
      size += extra_.CalculateSize(_repeated_extra_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNMeld other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.bunch_ != null) {
        if (bunch_ == null) {
          bunch_ = new global::Proto3.bunch_t();
        }
        Bunch.MergeFrom(other.Bunch);
      }
      extra_.Add(other.extra_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (bunch_ == null) {
              bunch_ = new global::Proto3.bunch_t();
            }
            input.ReadMessage(bunch_);
            break;
          }
          case 26: {
            extra_.AddEntriesFrom(input, _repeated_extra_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCMeld : pb::IMessage<MsgNCMeld> {
    private static readonly pb::MessageParser<MsgNCMeld> _parser = new pb::MessageParser<MsgNCMeld>(() => new MsgNCMeld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCMeld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld(MsgNCMeld other) : this() {
      mid_ = other.mid_;
      Bunch = other.bunch_ != null ? other.Bunch.Clone() : null;
      from_ = other.from_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCMeld Clone() {
      return new MsgNCMeld(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "bunch" field.</summary>
    public const int BunchFieldNumber = 2;
    private global::Proto3.bunch_t bunch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.bunch_t Bunch {
      get { return bunch_; }
      set {
        bunch_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 3;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCMeld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCMeld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (!object.Equals(Bunch, other.Bunch)) return false;
      if (From != other.From) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (bunch_ != null) hash ^= Bunch.GetHashCode();
      if (From != 0) hash ^= From.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (bunch_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bunch);
      }
      if (From != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(From);
      }
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (bunch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bunch);
      }
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCMeld other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.bunch_ != null) {
        if (bunch_ == null) {
          bunch_ = new global::Proto3.bunch_t();
        }
        Bunch.MergeFrom(other.Bunch);
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            if (bunch_ == null) {
              bunch_ = new global::Proto3.bunch_t();
            }
            input.ReadMessage(bunch_);
            break;
          }
          case 24: {
            From = input.ReadInt32();
            break;
          }
          case 32: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDraw : pb::IMessage<MsgNCDraw> {
    private static readonly pb::MessageParser<MsgNCDraw> _parser = new pb::MessageParser<MsgNCDraw>(() => new MsgNCDraw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDraw(MsgNCDraw other) : this() {
      mid_ = other.mid_;
      pos_ = other.pos_;
      card_ = other.card_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDraw Clone() {
      return new MsgNCDraw(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 3;
    private int card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Pos != other.Pos) return false;
      if (Card != other.Card) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Card != 0) hash ^= Card.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Card != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Card);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDraw other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            Card = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDismissSync : pb::IMessage<MsgCNDismissSync> {
    private static readonly pb::MessageParser<MsgCNDismissSync> _parser = new pb::MessageParser<MsgCNDismissSync>(() => new MsgCNDismissSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDismissSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync(MsgCNDismissSync other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissSync Clone() {
      return new MsgCNDismissSync(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDismissSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDismissSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDismissSync other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDismissSync : pb::IMessage<MsgNCDismissSync> {
    private static readonly pb::MessageParser<MsgNCDismissSync> _parser = new pb::MessageParser<MsgNCDismissSync>(() => new MsgNCDismissSync());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDismissSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync(MsgNCDismissSync other) : this() {
      mid_ = other.mid_;
      pos_ = other.pos_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissSync Clone() {
      return new MsgNCDismissSync(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDismissSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDismissSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Pos != other.Pos) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDismissSync other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNDismissAck : pb::IMessage<MsgCNDismissAck> {
    private static readonly pb::MessageParser<MsgCNDismissAck> _parser = new pb::MessageParser<MsgCNDismissAck>(() => new MsgCNDismissAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNDismissAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck(MsgCNDismissAck other) : this() {
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNDismissAck Clone() {
      return new MsgCNDismissAck(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNDismissAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNDismissAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNDismissAck other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCDismissAck : pb::IMessage<MsgNCDismissAck> {
    private static readonly pb::MessageParser<MsgNCDismissAck> _parser = new pb::MessageParser<MsgNCDismissAck>(() => new MsgNCDismissAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCDismissAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck(MsgNCDismissAck other) : this() {
      mid_ = other.mid_;
      pos_ = other.pos_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCDismissAck Clone() {
      return new MsgNCDismissAck(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCDismissAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCDismissAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Pos != other.Pos) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCDismissAck other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCSettle : pb::IMessage<MsgNCSettle> {
    private static readonly pb::MessageParser<MsgNCSettle> _parser = new pb::MessageParser<MsgNCSettle>(() => new MsgNCSettle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle(MsgNCSettle other) : this() {
      mid_ = other.mid_;
      play_ = other.play_.Clone();
      pile_ = other.pile_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCSettle Clone() {
      return new MsgNCSettle(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.play_t> _repeated_play_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.play_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.play_t> play_ = new pbc::RepeatedField<global::Proto3.play_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.play_t> Play {
      get { return play_; }
    }

    /// <summary>Field number for the "pile" field.</summary>
    public const int PileFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_pile_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> pile_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Pile {
      get { return pile_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if(!play_.Equals(other.play_)) return false;
      if(!pile_.Equals(other.pile_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      hash ^= play_.GetHashCode();
      hash ^= pile_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      play_.WriteTo(output, _repeated_play_codec);
      pile_.WriteTo(output, _repeated_pile_codec);
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      size += play_.CalculateSize(_repeated_play_codec);
      size += pile_.CalculateSize(_repeated_pile_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCSettle other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      play_.Add(other.play_);
      pile_.Add(other.pile_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            play_.AddEntriesFrom(input, _repeated_play_codec);
            break;
          }
          case 26:
          case 24: {
            pile_.AddEntriesFrom(input, _repeated_pile_codec);
            break;
          }
          case 32: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgNCFinish : pb::IMessage<MsgNCFinish> {
    private static readonly pb::MessageParser<MsgNCFinish> _parser = new pb::MessageParser<MsgNCFinish>(() => new MsgNCFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNCFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish(MsgNCFinish other) : this() {
      mid_ = other.mid_;
      play_ = other.play_.Clone();
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNCFinish Clone() {
      return new MsgNCFinish(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.play_t> _repeated_play_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.play_t.Parser);
    private readonly pbc::RepeatedField<global::Proto3.play_t> play_ = new pbc::RepeatedField<global::Proto3.play_t>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.play_t> Play {
      get { return play_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Proto3.pb_enum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_enum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNCFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNCFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if(!play_.Equals(other.play_)) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      hash ^= play_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      play_.WriteTo(output, _repeated_play_codec);
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      size += play_.CalculateSize(_repeated_play_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNCFinish other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      play_.Add(other.play_);
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            play_.AddEntriesFrom(input, _repeated_play_codec);
            break;
          }
          case 24: {
            result_ = (global::Proto3.pb_enum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MsgCNStats : pb::IMessage<MsgCNStats> {
    private static readonly pb::MessageParser<MsgCNStats> _parser = new pb::MessageParser<MsgCNStats>(() => new MsgCNStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgCNStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ProtocolReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNStats(MsgCNStats other) : this() {
      mid_ = other.mid_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgCNStats Clone() {
      return new MsgCNStats(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.pb_msg mid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.pb_msg Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgCNStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgCNStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgCNStats other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mid_ = (global::Proto3.pb_msg) input.ReadEnum();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
